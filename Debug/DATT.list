
DATT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c4c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08006d60  08006d60  00016d60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007194  08007194  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  08007194  08007194  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007194  08007194  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007194  08007194  00017194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007198  08007198  00017198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800719c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  200001ec  08007388  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  08007388  000203f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b2c  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002eac  00000000  00000000  00034d41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000d918  00000000  00000000  00037bed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a70  00000000  00000000  00045508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001c10  00000000  00000000  00045f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018fec  00000000  00000000  00047b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014adb  00000000  00000000  00060b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a8f1  00000000  00000000  0007564f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000fff40  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003814  00000000  00000000  000fff94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	08006d44 	.word	0x08006d44

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	08006d44 	.word	0x08006d44

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <readMCP3553>:
#define MCP3553_DATA_MAX 0x200000
#define MCP3553_LSB_V MCP3553_VREF_V / MCP3553_DATA_MAX
extern UART_HandleTypeDef huart1;

float readMCP3553(void)
{
 800111c:	b530      	push	{r4, r5, lr}
 800111e:	b083      	sub	sp, #12
	uint8_t mcp3553_data[MCP3553_DATA_LEN] ;
	float mcp3553_voltage = 0;
	int32_t mcp3553_lsb = 0;
	uint32_t mcp3553_timeout_cnt = HAL_GetTick();
 8001120:	f001 f95c 	bl	80023dc <HAL_GetTick>

//	HAL_GPIO_WritePin(MCP3553_CS_PORT, MCP3553_CS_PIN, GPIO_PIN_SET);
//	HAL_Delay(10);
	HAL_GPIO_WritePin(MCP3553_CS_PORT, MCP3553_CS_PIN, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	uint32_t mcp3553_timeout_cnt = HAL_GetTick();
 800112a:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(MCP3553_CS_PORT, MCP3553_CS_PIN, GPIO_PIN_RESET);
 800112c:	4820      	ldr	r0, [pc, #128]	; (80011b0 <readMCP3553+0x94>)
 800112e:	f001 fb4b 	bl	80027c8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001132:	200a      	movs	r0, #10
 8001134:	f001 f958 	bl	80023e8 <HAL_Delay>

	while((HAL_GPIO_ReadPin(MCP3553_SDO_RDY_PORT, MCP3553_SDO_RDY_PIN) == GPIO_PIN_SET) &&
 8001138:	4d1d      	ldr	r5, [pc, #116]	; (80011b0 <readMCP3553+0x94>)
 800113a:	e004      	b.n	8001146 <readMCP3553+0x2a>
	      (HAL_GetTick()-mcp3553_timeout_cnt < MCP3553_TIMEOUT_MS));
 800113c:	f001 f94e 	bl	80023dc <HAL_GetTick>
 8001140:	1b00      	subs	r0, r0, r4
	while((HAL_GPIO_ReadPin(MCP3553_SDO_RDY_PORT, MCP3553_SDO_RDY_PIN) == GPIO_PIN_SET) &&
 8001142:	284f      	cmp	r0, #79	; 0x4f
 8001144:	d806      	bhi.n	8001154 <readMCP3553+0x38>
 8001146:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800114a:	4628      	mov	r0, r5
 800114c:	f001 fb36 	bl	80027bc <HAL_GPIO_ReadPin>
 8001150:	2801      	cmp	r0, #1
 8001152:	d0f3      	beq.n	800113c <readMCP3553+0x20>

	if (HAL_GetTick()-mcp3553_timeout_cnt < MCP3553_TIMEOUT_MS)
 8001154:	f001 f942 	bl	80023dc <HAL_GetTick>
 8001158:	1b04      	subs	r4, r0, r4
 800115a:	2c4f      	cmp	r4, #79	; 0x4f
 800115c:	d909      	bls.n	8001172 <readMCP3553+0x56>
	float mcp3553_voltage = 0;
 800115e:	2400      	movs	r4, #0
	}
//	else
//	{
//		HAL_UART_Transmit(&huart1, (uint8_t*)"Timeout\r\n", 9, HAL_MAX_DELAY);
//	}
	HAL_GPIO_WritePin(MCP3553_CS_PORT, MCP3553_CS_PIN, GPIO_PIN_SET);
 8001160:	2201      	movs	r2, #1
 8001162:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001166:	4812      	ldr	r0, [pc, #72]	; (80011b0 <readMCP3553+0x94>)
 8001168:	f001 fb2e 	bl	80027c8 <HAL_GPIO_WritePin>
	return mcp3553_voltage;
}
 800116c:	4620      	mov	r0, r4
 800116e:	b003      	add	sp, #12
 8001170:	bd30      	pop	{r4, r5, pc}
	  sspi_receive(mcp3553_data,MCP3553_DATA_LEN);
 8001172:	a801      	add	r0, sp, #4
 8001174:	2103      	movs	r1, #3
 8001176:	f000 fef5 	bl	8001f64 <sspi_receive>
	  uint32_t result = (mcp3553_data[0] << 16) | (mcp3553_data[1] << 8) | (mcp3553_data[2]);
 800117a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800117e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001182:	021b      	lsls	r3, r3, #8
 8001184:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001188:	f89d 0006 	ldrb.w	r0, [sp, #6]
	  if(!(result & MCP3553_OVF_BIT_MASK))
 800118c:	f413 0f40 	tst.w	r3, #12582912	; 0xc00000
	  uint32_t result = (mcp3553_data[0] << 16) | (mcp3553_data[1] << 8) | (mcp3553_data[2]);
 8001190:	ea40 0003 	orr.w	r0, r0, r3
	  if(!(result & MCP3553_OVF_BIT_MASK))
 8001194:	d1e3      	bne.n	800115e <readMCP3553+0x42>
	    if (!(result & MCP3553_SIGN_BIT_MASK))
 8001196:	0283      	lsls	r3, r0, #10
	      mcp3553_lsb *= (-1);
 8001198:	bf44      	itt	mi
 800119a:	ea6f 2080 	mvnmi.w	r0, r0, lsl #10
 800119e:	ea6f 2090 	mvnmi.w	r0, r0, lsr #10
	    mcp3553_voltage = (float)mcp3553_lsb * MCP3553_LSB_V;
 80011a2:	f7ff fd7b 	bl	8000c9c <__aeabi_i2f>
 80011a6:	4903      	ldr	r1, [pc, #12]	; (80011b4 <readMCP3553+0x98>)
 80011a8:	f7ff fdcc 	bl	8000d44 <__aeabi_fmul>
 80011ac:	4604      	mov	r4, r0
 80011ae:	e7d7      	b.n	8001160 <readMCP3553+0x44>
 80011b0:	40010c00 	.word	0x40010c00
 80011b4:	36200000 	.word	0x36200000

080011b8 <PWM_Calc>:
//	else if(pidOut<-PWM_MAX) pidOut=-PWM_MAX;
//	//if(pidOut<20 && pidOut >-20) pidOut=0;
//	return pidOut;
//}
int16_t PWM_Calc(float frequency,float pressure)
{
 80011b8:	b510      	push	{r4, lr}
	int16_t pwm;
	float coeff_freq = COEFFICIENT_FREQ;
	if(frequency>-600 && frequency<600)
 80011ba:	492d      	ldr	r1, [pc, #180]	; (8001270 <PWM_Calc+0xb8>)
{
 80011bc:	4604      	mov	r4, r0
	if(frequency>-600 && frequency<600)
 80011be:	f7ff ff7d 	bl	80010bc <__aeabi_fcmpgt>
 80011c2:	b120      	cbz	r0, 80011ce <PWM_Calc+0x16>
 80011c4:	4620      	mov	r0, r4
 80011c6:	492b      	ldr	r1, [pc, #172]	; (8001274 <PWM_Calc+0xbc>)
 80011c8:	f7ff ff5a 	bl	8001080 <__aeabi_fcmplt>
 80011cc:	b988      	cbnz	r0, 80011f2 <PWM_Calc+0x3a>
	float coeff_freq = COEFFICIENT_FREQ;
 80011ce:	482a      	ldr	r0, [pc, #168]	; (8001278 <PWM_Calc+0xc0>)
		if (frequency > 0)
			coeff_freq = COEFFICIENT_FREQ*(2.2-frequency*0.002);
		else
			coeff_freq = COEFFICIENT_FREQ*(2.2+frequency*0.002);
	}
	pwm = (int)(frequency*coeff_freq);
 80011d0:	4621      	mov	r1, r4
 80011d2:	f7ff fdb7 	bl	8000d44 <__aeabi_fmul>
 80011d6:	f7ff ff7b 	bl	80010d0 <__aeabi_f2iz>
 80011da:	f46f 73c7 	mvn.w	r3, #398	; 0x18e
 80011de:	b200      	sxth	r0, r0
 80011e0:	4298      	cmp	r0, r3
 80011e2:	bfb8      	it	lt
 80011e4:	4618      	movlt	r0, r3

	if (pwm>PWM_MAX) pwm=PWM_MAX;
	else if(pwm<-PWM_MAX) pwm=-PWM_MAX;
	return pwm;
 80011e6:	f240 138f 	movw	r3, #399	; 0x18f
}
 80011ea:	4298      	cmp	r0, r3
 80011ec:	bfa8      	it	ge
 80011ee:	4618      	movge	r0, r3
 80011f0:	bd10      	pop	{r4, pc}
		if (frequency > 0)
 80011f2:	2100      	movs	r1, #0
 80011f4:	4620      	mov	r0, r4
 80011f6:	f7ff ff61 	bl	80010bc <__aeabi_fcmpgt>
 80011fa:	b1b0      	cbz	r0, 800122a <PWM_Calc+0x72>
			coeff_freq = COEFFICIENT_FREQ*(2.2-frequency*0.002);
 80011fc:	4620      	mov	r0, r4
 80011fe:	f7ff f913 	bl	8000428 <__aeabi_f2d>
 8001202:	a315      	add	r3, pc, #84	; (adr r3, 8001258 <PWM_Calc+0xa0>)
 8001204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001208:	f7ff f966 	bl	80004d8 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	a113      	add	r1, pc, #76	; (adr r1, 8001260 <PWM_Calc+0xa8>)
 8001212:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001216:	f7fe ffa7 	bl	8000168 <__aeabi_dsub>
 800121a:	a313      	add	r3, pc, #76	; (adr r3, 8001268 <PWM_Calc+0xb0>)
 800121c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001220:	f7ff f95a 	bl	80004d8 <__aeabi_dmul>
 8001224:	f7ff fc30 	bl	8000a88 <__aeabi_d2f>
 8001228:	e7d2      	b.n	80011d0 <PWM_Calc+0x18>
			coeff_freq = COEFFICIENT_FREQ*(2.2+frequency*0.002);
 800122a:	4620      	mov	r0, r4
 800122c:	f7ff f8fc 	bl	8000428 <__aeabi_f2d>
 8001230:	a309      	add	r3, pc, #36	; (adr r3, 8001258 <PWM_Calc+0xa0>)
 8001232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001236:	f7ff f94f 	bl	80004d8 <__aeabi_dmul>
 800123a:	a309      	add	r3, pc, #36	; (adr r3, 8001260 <PWM_Calc+0xa8>)
 800123c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001240:	f7fe ff94 	bl	800016c <__adddf3>
 8001244:	a308      	add	r3, pc, #32	; (adr r3, 8001268 <PWM_Calc+0xb0>)
 8001246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124a:	f7ff f945 	bl	80004d8 <__aeabi_dmul>
 800124e:	f7ff fc1b 	bl	8000a88 <__aeabi_d2f>
 8001252:	e7bd      	b.n	80011d0 <PWM_Calc+0x18>
 8001254:	f3af 8000 	nop.w
 8001258:	d2f1a9fc 	.word	0xd2f1a9fc
 800125c:	3f60624d 	.word	0x3f60624d
 8001260:	9999999a 	.word	0x9999999a
 8001264:	40019999 	.word	0x40019999
 8001268:	eb851eb8 	.word	0xeb851eb8
 800126c:	3fbeb851 	.word	0x3fbeb851
 8001270:	c4160000 	.word	0xc4160000
 8001274:	44160000 	.word	0x44160000
 8001278:	3df5c28f 	.word	0x3df5c28f
 800127c:	00000000 	.word	0x00000000

08001280 <PID_Pressure_Calc>:
float  PID_Pressure_Calc (PidParameter PID,float pressure, float setPoint )
{
 8001280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001284:	461e      	mov	r6, r3
 8001286:	b086      	sub	sp, #24
 8001288:	ab06      	add	r3, sp, #24
 800128a:	e903 0007 	stmdb	r3, {r0, r1, r2}
	float pidOut=0;
	if(pressure> PRESSURE_MAX ||pressure< PRESSURE_MIN)
 800128e:	4630      	mov	r0, r6
 8001290:	4985      	ldr	r1, [pc, #532]	; (80014a8 <PID_Pressure_Calc+0x228>)
 8001292:	f7ff ff13 	bl	80010bc <__aeabi_fcmpgt>
 8001296:	b920      	cbnz	r0, 80012a2 <PID_Pressure_Calc+0x22>
 8001298:	4630      	mov	r0, r6
 800129a:	4984      	ldr	r1, [pc, #528]	; (80014ac <PID_Pressure_Calc+0x22c>)
 800129c:	f7ff fef0 	bl	8001080 <__aeabi_fcmplt>
 80012a0:	b148      	cbz	r0, 80012b6 <PID_Pressure_Calc+0x36>
	{
		pidOut=0;
		last_error_pres=0;
 80012a2:	2000      	movs	r0, #0
		pidOut=0;
 80012a4:	4604      	mov	r4, r0
		last_error_pres=0;
 80012a6:	4a82      	ldr	r2, [pc, #520]	; (80014b0 <PID_Pressure_Calc+0x230>)
		integrated_error_pres=0;
 80012a8:	4b82      	ldr	r3, [pc, #520]	; (80014b4 <PID_Pressure_Calc+0x234>)
		last_error_pres=0;
 80012aa:	6010      	str	r0, [r2, #0]
		integrated_error_pres=0;
 80012ac:	6018      	str	r0, [r3, #0]
		if (pidOut>FREQUENCY_MAX) pidOut=FREQUENCY_MAX;
		else if(pidOut<-FREQUENCY_MAX) pidOut=-FREQUENCY_MAX;
	}
	return pidOut;

}
 80012ae:	4620      	mov	r0, r4
 80012b0:	b006      	add	sp, #24
 80012b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012b6:	f8dd 900c 	ldr.w	r9, [sp, #12]
		float dt = (float) (HAL_GetTick() - timerPID_pres);
 80012ba:	f001 f88f 	bl	80023dc <HAL_GetTick>
 80012be:	4c7e      	ldr	r4, [pc, #504]	; (80014b8 <PID_Pressure_Calc+0x238>)
 80012c0:	6823      	ldr	r3, [r4, #0]
 80012c2:	1ac0      	subs	r0, r0, r3
 80012c4:	f7ff fce6 	bl	8000c94 <__aeabi_ui2f>
 80012c8:	4605      	mov	r5, r0
		timerPID_pres= HAL_GetTick();
 80012ca:	f001 f887 	bl	80023dc <HAL_GetTick>
		float error = setPoint - pressure;
 80012ce:	4631      	mov	r1, r6
		timerPID_pres= HAL_GetTick();
 80012d0:	6020      	str	r0, [r4, #0]
		float error = setPoint - pressure;
 80012d2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80012d4:	f7ff fc2c 	bl	8000b30 <__aeabi_fsub>
		if ( dt != 0) {
 80012d8:	2100      	movs	r1, #0
		float error = setPoint - pressure;
 80012da:	4604      	mov	r4, r0
		if ( dt != 0) {
 80012dc:	4628      	mov	r0, r5
 80012de:	f7ff fec5 	bl	800106c <__aeabi_fcmpeq>
 80012e2:	2800      	cmp	r0, #0
 80012e4:	f040 80c5 	bne.w	8001472 <PID_Pressure_Calc+0x1f2>
			dTerm =  1000*PID.Kd * (last_error_pres-error)/dt;
 80012e8:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 80014b0 <PID_Pressure_Calc+0x230>
 80012ec:	990e      	ldr	r1, [sp, #56]	; 0x38
 80012ee:	f8da 0000 	ldr.w	r0, [sl]
 80012f2:	f7ff fc1d 	bl	8000b30 <__aeabi_fsub>
 80012f6:	4631      	mov	r1, r6
 80012f8:	f7ff fc1c 	bl	8000b34 <__addsf3>
 80012fc:	496f      	ldr	r1, [pc, #444]	; (80014bc <PID_Pressure_Calc+0x23c>)
 80012fe:	4607      	mov	r7, r0
 8001300:	9805      	ldr	r0, [sp, #20]
 8001302:	f7ff fd1f 	bl	8000d44 <__aeabi_fmul>
 8001306:	4601      	mov	r1, r0
 8001308:	4638      	mov	r0, r7
 800130a:	f7ff fd1b 	bl	8000d44 <__aeabi_fmul>
 800130e:	4629      	mov	r1, r5
 8001310:	f7ff fdcc 	bl	8000eac <__aeabi_fdiv>
 8001314:	4607      	mov	r7, r0
		integrated_error_pres += error * dt;
 8001316:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80014b4 <PID_Pressure_Calc+0x234>
 800131a:	4628      	mov	r0, r5
 800131c:	4621      	mov	r1, r4
 800131e:	f7ff fd11 	bl	8000d44 <__aeabi_fmul>
 8001322:	f8d8 1000 	ldr.w	r1, [r8]
 8001326:	f7ff fc05 	bl	8000b34 <__addsf3>
		iTerm =   PID.Ki * integrated_error_pres/1000.0;
 800132a:	9904      	ldr	r1, [sp, #16]
		integrated_error_pres += error * dt;
 800132c:	f8c8 0000 	str.w	r0, [r8]
		iTerm =   PID.Ki * integrated_error_pres/1000.0;
 8001330:	f7ff fd08 	bl	8000d44 <__aeabi_fmul>
 8001334:	f7ff f878 	bl	8000428 <__aeabi_f2d>
 8001338:	a355      	add	r3, pc, #340	; (adr r3, 8001490 <PID_Pressure_Calc+0x210>)
 800133a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133e:	f7ff f8cb 	bl	80004d8 <__aeabi_dmul>
 8001342:	f7ff fba1 	bl	8000a88 <__aeabi_d2f>
 8001346:	495e      	ldr	r1, [pc, #376]	; (80014c0 <PID_Pressure_Calc+0x240>)
 8001348:	4605      	mov	r5, r0
 800134a:	f7ff fead 	bl	80010a8 <__aeabi_fcmpge>
 800134e:	b900      	cbnz	r0, 8001352 <PID_Pressure_Calc+0xd2>
 8001350:	4d5b      	ldr	r5, [pc, #364]	; (80014c0 <PID_Pressure_Calc+0x240>)
 8001352:	4628      	mov	r0, r5
 8001354:	495b      	ldr	r1, [pc, #364]	; (80014c4 <PID_Pressure_Calc+0x244>)
 8001356:	f7ff fe9d 	bl	8001094 <__aeabi_fcmple>
 800135a:	b900      	cbnz	r0, 800135e <PID_Pressure_Calc+0xde>
 800135c:	4d59      	ldr	r5, [pc, #356]	; (80014c4 <PID_Pressure_Calc+0x244>)
		float delta = pressure*0.075-18;
 800135e:	4630      	mov	r0, r6
 8001360:	f7ff f862 	bl	8000428 <__aeabi_f2d>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
		if (pressure < PRESSURE_NORMAL) delta = 163-0.058*pressure;
 8001368:	4630      	mov	r0, r6
 800136a:	4957      	ldr	r1, [pc, #348]	; (80014c8 <PID_Pressure_Calc+0x248>)
		float delta = pressure*0.075-18;
 800136c:	e9cd 2300 	strd	r2, r3, [sp]
		if (pressure < PRESSURE_NORMAL) delta = 163-0.058*pressure;
 8001370:	f7ff fe86 	bl	8001080 <__aeabi_fcmplt>
 8001374:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001378:	2800      	cmp	r0, #0
 800137a:	d16b      	bne.n	8001454 <PID_Pressure_Calc+0x1d4>
		float delta = pressure*0.075-18;
 800137c:	4610      	mov	r0, r2
 800137e:	4619      	mov	r1, r3
 8001380:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001384:	4b51      	ldr	r3, [pc, #324]	; (80014cc <PID_Pressure_Calc+0x24c>)
 8001386:	f7ff f8a7 	bl	80004d8 <__aeabi_dmul>
 800138a:	2200      	movs	r2, #0
 800138c:	4b50      	ldr	r3, [pc, #320]	; (80014d0 <PID_Pressure_Calc+0x250>)
 800138e:	f7fe feeb 	bl	8000168 <__aeabi_dsub>
 8001392:	f7ff fb79 	bl	8000a88 <__aeabi_d2f>
		if(error>50)
 8001396:	494f      	ldr	r1, [pc, #316]	; (80014d4 <PID_Pressure_Calc+0x254>)
 8001398:	4606      	mov	r6, r0
 800139a:	4620      	mov	r0, r4
 800139c:	f7ff fe8e 	bl	80010bc <__aeabi_fcmpgt>
 80013a0:	2800      	cmp	r0, #0
 80013a2:	d040      	beq.n	8001426 <PID_Pressure_Calc+0x1a6>
			pTerm =   PID.Kp/50  * pow(error,2);
 80013a4:	4620      	mov	r0, r4
 80013a6:	f7ff f83f 	bl	8000428 <__aeabi_f2d>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4690      	mov	r8, r2
 80013b0:	4648      	mov	r0, r9
 80013b2:	4699      	mov	r9, r3
 80013b4:	4948      	ldr	r1, [pc, #288]	; (80014d8 <PID_Pressure_Calc+0x258>)
 80013b6:	f7ff fcc5 	bl	8000d44 <__aeabi_fmul>
 80013ba:	f7ff f835 	bl	8000428 <__aeabi_f2d>
 80013be:	4642      	mov	r2, r8
 80013c0:	464b      	mov	r3, r9
 80013c2:	4680      	mov	r8, r0
 80013c4:	4689      	mov	r9, r1
 80013c6:	4610      	mov	r0, r2
 80013c8:	4619      	mov	r1, r3
 80013ca:	f7ff f885 	bl	80004d8 <__aeabi_dmul>
			pTerm =   -PID.Kp/50  * pow(error,2);
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4640      	mov	r0, r8
 80013d4:	4649      	mov	r1, r9
 80013d6:	f7ff f87f 	bl	80004d8 <__aeabi_dmul>
 80013da:	f7ff fb55 	bl	8000a88 <__aeabi_d2f>
 80013de:	4680      	mov	r8, r0
		if(error>0)	pTerm += delta;
 80013e0:	2100      	movs	r1, #0
 80013e2:	4620      	mov	r0, r4
 80013e4:	f7ff fe6a 	bl	80010bc <__aeabi_fcmpgt>
 80013e8:	4631      	mov	r1, r6
 80013ea:	2800      	cmp	r0, #0
 80013ec:	d045      	beq.n	800147a <PID_Pressure_Calc+0x1fa>
 80013ee:	4640      	mov	r0, r8
 80013f0:	f7ff fba0 	bl	8000b34 <__addsf3>
 80013f4:	4606      	mov	r6, r0
		pidOut = pTerm + iTerm + dTerm;
 80013f6:	4639      	mov	r1, r7
		last_error_pres = error;
 80013f8:	f8ca 4000 	str.w	r4, [sl]
		pidOut = pTerm + iTerm + dTerm;
 80013fc:	4628      	mov	r0, r5
 80013fe:	f7ff fb99 	bl	8000b34 <__addsf3>
 8001402:	4631      	mov	r1, r6
 8001404:	f7ff fb96 	bl	8000b34 <__addsf3>
 8001408:	4934      	ldr	r1, [pc, #208]	; (80014dc <PID_Pressure_Calc+0x25c>)
 800140a:	4604      	mov	r4, r0
 800140c:	f7ff fe4c 	bl	80010a8 <__aeabi_fcmpge>
 8001410:	b900      	cbnz	r0, 8001414 <PID_Pressure_Calc+0x194>
 8001412:	4c32      	ldr	r4, [pc, #200]	; (80014dc <PID_Pressure_Calc+0x25c>)
 8001414:	4620      	mov	r0, r4
 8001416:	4932      	ldr	r1, [pc, #200]	; (80014e0 <PID_Pressure_Calc+0x260>)
 8001418:	f7ff fe3c 	bl	8001094 <__aeabi_fcmple>
 800141c:	2800      	cmp	r0, #0
 800141e:	f47f af46 	bne.w	80012ae <PID_Pressure_Calc+0x2e>
 8001422:	4c2f      	ldr	r4, [pc, #188]	; (80014e0 <PID_Pressure_Calc+0x260>)
	return pidOut;
 8001424:	e743      	b.n	80012ae <PID_Pressure_Calc+0x2e>
		else if(error<-50)
 8001426:	4620      	mov	r0, r4
 8001428:	492e      	ldr	r1, [pc, #184]	; (80014e4 <PID_Pressure_Calc+0x264>)
 800142a:	f7ff fe29 	bl	8001080 <__aeabi_fcmplt>
 800142e:	b348      	cbz	r0, 8001484 <PID_Pressure_Calc+0x204>
			pTerm =   -PID.Kp/50  * pow(error,2);
 8001430:	4620      	mov	r0, r4
 8001432:	f7fe fff9 	bl	8000428 <__aeabi_f2d>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	f7ff f84d 	bl	80004d8 <__aeabi_dmul>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4648      	mov	r0, r9
 8001444:	4928      	ldr	r1, [pc, #160]	; (80014e8 <PID_Pressure_Calc+0x268>)
 8001446:	4690      	mov	r8, r2
 8001448:	4699      	mov	r9, r3
 800144a:	f7ff fc7b 	bl	8000d44 <__aeabi_fmul>
 800144e:	f7fe ffeb 	bl	8000428 <__aeabi_f2d>
 8001452:	e7bc      	b.n	80013ce <PID_Pressure_Calc+0x14e>
		if (pressure < PRESSURE_NORMAL) delta = 163-0.058*pressure;
 8001454:	4610      	mov	r0, r2
 8001456:	4619      	mov	r1, r3
 8001458:	a30f      	add	r3, pc, #60	; (adr r3, 8001498 <PID_Pressure_Calc+0x218>)
 800145a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145e:	f7ff f83b 	bl	80004d8 <__aeabi_dmul>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	a10e      	add	r1, pc, #56	; (adr r1, 80014a0 <PID_Pressure_Calc+0x220>)
 8001468:	e9d1 0100 	ldrd	r0, r1, [r1]
 800146c:	f7fe fe7c 	bl	8000168 <__aeabi_dsub>
 8001470:	e78f      	b.n	8001392 <PID_Pressure_Calc+0x112>
		float pTerm = 0, iTerm = 0,dTerm = 0;
 8001472:	462f      	mov	r7, r5
 8001474:	f8df a038 	ldr.w	sl, [pc, #56]	; 80014b0 <PID_Pressure_Calc+0x230>
 8001478:	e74d      	b.n	8001316 <PID_Pressure_Calc+0x96>
		else pTerm-=delta;
 800147a:	4640      	mov	r0, r8
 800147c:	f7ff fb58 	bl	8000b30 <__aeabi_fsub>
 8001480:	4606      	mov	r6, r0
 8001482:	e7b8      	b.n	80013f6 <PID_Pressure_Calc+0x176>
			pTerm =   PID.Kp  * error;
 8001484:	4648      	mov	r0, r9
 8001486:	4621      	mov	r1, r4
 8001488:	f7ff fc5c 	bl	8000d44 <__aeabi_fmul>
 800148c:	4680      	mov	r8, r0
 800148e:	e7a7      	b.n	80013e0 <PID_Pressure_Calc+0x160>
 8001490:	d2f1a9fc 	.word	0xd2f1a9fc
 8001494:	3f50624d 	.word	0x3f50624d
 8001498:	0e560419 	.word	0x0e560419
 800149c:	3fadb22d 	.word	0x3fadb22d
 80014a0:	00000000 	.word	0x00000000
 80014a4:	40646000 	.word	0x40646000
 80014a8:	4584d000 	.word	0x4584d000
 80014ac:	44610000 	.word	0x44610000
 80014b0:	2000020c 	.word	0x2000020c
 80014b4:	20000208 	.word	0x20000208
 80014b8:	20000210 	.word	0x20000210
 80014bc:	447a0000 	.word	0x447a0000
 80014c0:	c4d16000 	.word	0xc4d16000
 80014c4:	44d16000 	.word	0x44d16000
 80014c8:	44a5a000 	.word	0x44a5a000
 80014cc:	3fb33333 	.word	0x3fb33333
 80014d0:	40320000 	.word	0x40320000
 80014d4:	42480000 	.word	0x42480000
 80014d8:	3ca3d70a 	.word	0x3ca3d70a
 80014dc:	c5516000 	.word	0xc5516000
 80014e0:	45516000 	.word	0x45516000
 80014e4:	c2480000 	.word	0xc2480000
 80014e8:	bca3d70a 	.word	0xbca3d70a

080014ec <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
	if (htim -> Instance == htim1.Instance)
 80014ec:	4b42      	ldr	r3, [pc, #264]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80014ee:	6802      	ldr	r2, [r0, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d000      	beq.n	80014f8 <HAL_TIM_PeriodElapsedCallback+0xc>
 80014f6:	4770      	bx	lr
{
 80014f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	{
		uint8_t state_system = !HAL_GPIO_ReadPin(BLM_E_GPIO_Port,BLM_E_Pin);//1:run; 0:stop
 80014fc:	2108      	movs	r1, #8
{
 80014fe:	b08d      	sub	sp, #52	; 0x34
		uint8_t state_system = !HAL_GPIO_ReadPin(BLM_E_GPIO_Port,BLM_E_Pin);//1:run; 0:stop
 8001500:	483e      	ldr	r0, [pc, #248]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001502:	f001 f95b 	bl	80027bc <HAL_GPIO_ReadPin>
		uint8_t state_dir = HAL_GPIO_ReadPin(BLM_SI_GPIO_Port, BLM_SI_Pin);//0: back; 1: forward
 8001506:	2120      	movs	r1, #32
		uint8_t state_system = !HAL_GPIO_ReadPin(BLM_E_GPIO_Port,BLM_E_Pin);//1:run; 0:stop
 8001508:	4604      	mov	r4, r0
		uint8_t state_dir = HAL_GPIO_ReadPin(BLM_SI_GPIO_Port, BLM_SI_Pin);//0: back; 1: forward
 800150a:	483c      	ldr	r0, [pc, #240]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0x110>)
 800150c:	f001 f956 	bl	80027bc <HAL_GPIO_ReadPin>
		uint8_t state_valse = HAL_GPIO_ReadPin(VLV1_GPIO_Port,VLV1_Pin);//0: close; 1: open
 8001510:	2104      	movs	r1, #4
		uint8_t state_dir = HAL_GPIO_ReadPin(BLM_SI_GPIO_Port, BLM_SI_Pin);//0: back; 1: forward
 8001512:	4682      	mov	sl, r0
		uint8_t state_valse = HAL_GPIO_ReadPin(VLV1_GPIO_Port,VLV1_Pin);//0: close; 1: open
 8001514:	483a      	ldr	r0, [pc, #232]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001516:	f001 f951 	bl	80027bc <HAL_GPIO_ReadPin>
		uint8_t state_extreme_back= !HAL_GPIO_ReadPin(SW0_GPIO_Port,SW0_Pin);//0: not; 1: yes
 800151a:	f44f 6180 	mov.w	r1, #1024	; 0x400
		uint8_t state_valse = HAL_GPIO_ReadPin(VLV1_GPIO_Port,VLV1_Pin);//0: close; 1: open
 800151e:	4605      	mov	r5, r0
		uint8_t state_extreme_back= !HAL_GPIO_ReadPin(SW0_GPIO_Port,SW0_Pin);//0: not; 1: yes
 8001520:	4836      	ldr	r0, [pc, #216]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001522:	f001 f94b 	bl	80027bc <HAL_GPIO_ReadPin>
		uint8_t state_extreme_front= !HAL_GPIO_ReadPin(SW1_GPIO_Port,SW1_Pin);//0:not; 1: yes
 8001526:	f44f 6100 	mov.w	r1, #2048	; 0x800
		uint8_t state_extreme_back= !HAL_GPIO_ReadPin(SW0_GPIO_Port,SW0_Pin);//0: not; 1: yes
 800152a:	4683      	mov	fp, r0
		uint8_t state_extreme_front= !HAL_GPIO_ReadPin(SW1_GPIO_Port,SW1_Pin);//0:not; 1: yes
 800152c:	4833      	ldr	r0, [pc, #204]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0x110>)
 800152e:	f001 f945 	bl	80027bc <HAL_GPIO_ReadPin>
 8001532:	4603      	mov	r3, r0
		uint8_t state_motor= HAL_GPIO_ReadPin(BLM_ER_GPIO_Port,BLM_ER_Pin);//0: not error; 1:error
 8001534:	2110      	movs	r1, #16
 8001536:	4831      	ldr	r0, [pc, #196]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0x110>)
		uint8_t state_extreme_front= !HAL_GPIO_ReadPin(SW1_GPIO_Port,SW1_Pin);//0:not; 1: yes
 8001538:	930b      	str	r3, [sp, #44]	; 0x2c
		uint8_t state_motor= HAL_GPIO_ReadPin(BLM_ER_GPIO_Port,BLM_ER_Pin);//0: not error; 1:error
 800153a:	f001 f93f 	bl	80027bc <HAL_GPIO_ReadPin>
		sprintf(Txdata,"%.1f %.1f %d %d %d %d %d %d %d %d\n",pressure,frequency,state_system,state_dir,
 800153e:	4a31      	ldr	r2, [pc, #196]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001540:	4931      	ldr	r1, [pc, #196]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x11c>)
		uint8_t state_motor= HAL_GPIO_ReadPin(BLM_ER_GPIO_Port,BLM_ER_Pin);//0: not error; 1:error
 8001542:	4680      	mov	r8, r0
		sprintf(Txdata,"%.1f %.1f %d %d %d %d %d %d %d %d\n",pressure,frequency,state_system,state_dir,
 8001544:	6810      	ldr	r0, [r2, #0]
 8001546:	f891 9000 	ldrb.w	r9, [r1]
 800154a:	f7fe ff6d 	bl	8000428 <__aeabi_f2d>
		uint8_t state_extreme_front= !HAL_GPIO_ReadPin(SW1_GPIO_Port,SW1_Pin);//0:not; 1: yes
 800154e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		sprintf(Txdata,"%.1f %.1f %d %d %d %d %d %d %d %d\n",pressure,frequency,state_system,state_dir,
 8001550:	4606      	mov	r6, r0
		uint8_t state_extreme_front= !HAL_GPIO_ReadPin(SW1_GPIO_Port,SW1_Pin);//0:not; 1: yes
 8001552:	fab3 f083 	clz	r0, r3
		sprintf(Txdata,"%.1f %.1f %d %d %d %d %d %d %d %d\n",pressure,frequency,state_system,state_dir,
 8001556:	460f      	mov	r7, r1
		uint8_t state_system = !HAL_GPIO_ReadPin(BLM_E_GPIO_Port,BLM_E_Pin);//1:run; 0:stop
 8001558:	fab4 f384 	clz	r3, r4
		uint8_t state_extreme_back= !HAL_GPIO_ReadPin(SW0_GPIO_Port,SW0_Pin);//0: not; 1: yes
 800155c:	fabb f18b 	clz	r1, fp
		sprintf(Txdata,"%.1f %.1f %d %d %d %d %d %d %d %d\n",pressure,frequency,state_system,state_dir,
 8001560:	4a2a      	ldr	r2, [pc, #168]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x120>)
		uint8_t state_extreme_front= !HAL_GPIO_ReadPin(SW1_GPIO_Port,SW1_Pin);//0:not; 1: yes
 8001562:	0940      	lsrs	r0, r0, #5
		sprintf(Txdata,"%.1f %.1f %d %d %d %d %d %d %d %d\n",pressure,frequency,state_system,state_dir,
 8001564:	4c2a      	ldr	r4, [pc, #168]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001566:	7812      	ldrb	r2, [r2, #0]
 8001568:	f8cd a00c 	str.w	sl, [sp, #12]
 800156c:	9006      	str	r0, [sp, #24]
 800156e:	6820      	ldr	r0, [r4, #0]
		uint8_t state_system = !HAL_GPIO_ReadPin(BLM_E_GPIO_Port,BLM_E_Pin);//1:run; 0:stop
 8001570:	095b      	lsrs	r3, r3, #5
		uint8_t state_extreme_back= !HAL_GPIO_ReadPin(SW0_GPIO_Port,SW0_Pin);//0: not; 1: yes
 8001572:	0949      	lsrs	r1, r1, #5
		sprintf(Txdata,"%.1f %.1f %d %d %d %d %d %d %d %d\n",pressure,frequency,state_system,state_dir,
 8001574:	fa5f f989 	uxtb.w	r9, r9
 8001578:	9302      	str	r3, [sp, #8]
 800157a:	9209      	str	r2, [sp, #36]	; 0x24
 800157c:	e9cd 8907 	strd	r8, r9, [sp, #28]
 8001580:	9105      	str	r1, [sp, #20]
 8001582:	9504      	str	r5, [sp, #16]
 8001584:	f7fe ff50 	bl	8000428 <__aeabi_f2d>
 8001588:	4632      	mov	r2, r6
 800158a:	463b      	mov	r3, r7
 800158c:	e9cd 0100 	strd	r0, r1, [sp]
 8001590:	4920      	ldr	r1, [pc, #128]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001592:	4821      	ldr	r0, [pc, #132]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001594:	f003 f90e 	bl	80047b4 <siprintf>
				state_valse,state_extreme_back,state_extreme_front,state_motor,flag_auto,countError);
		HAL_UART_Transmit(&huart1, (uint8_t*)Txdata, strlen(Txdata), HAL_MAX_DELAY);
 8001598:	481f      	ldr	r0, [pc, #124]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800159a:	f7fe fdd9 	bl	8000150 <strlen>
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
 80015a2:	b282      	uxth	r2, r0
 80015a4:	491c      	ldr	r1, [pc, #112]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80015a6:	481d      	ldr	r0, [pc, #116]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x130>)
 80015a8:	f002 fa24 	bl	80039f4 <HAL_UART_Transmit>
		if (Difference_last != Difference)
 80015ac:	4a1c      	ldr	r2, [pc, #112]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80015ae:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80015b0:	6812      	ldr	r2, [r2, #0]
 80015b2:	6819      	ldr	r1, [r3, #0]
 80015b4:	4291      	cmp	r1, r2
 80015b6:	d006      	beq.n	80015c6 <HAL_TIM_PeriodElapsedCallback+0xda>
			{
				count = 0;
 80015b8:	2000      	movs	r0, #0
 80015ba:	491b      	ldr	r1, [pc, #108]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x13c>)
				Difference_last = Difference;
 80015bc:	601a      	str	r2, [r3, #0]
				count = 0;
 80015be:	7008      	strb	r0, [r1, #0]
						frequency = 0;
						count = 0;
					}
			}
	}
}
 80015c0:	b00d      	add	sp, #52	; 0x34
 80015c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if(frequency>200 || frequency<-200)
 80015c6:	6825      	ldr	r5, [r4, #0]
 80015c8:	4918      	ldr	r1, [pc, #96]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x140>)
 80015ca:	4628      	mov	r0, r5
 80015cc:	f7ff fd76 	bl	80010bc <__aeabi_fcmpgt>
 80015d0:	b978      	cbnz	r0, 80015f2 <HAL_TIM_PeriodElapsedCallback+0x106>
 80015d2:	4628      	mov	r0, r5
 80015d4:	4916      	ldr	r1, [pc, #88]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80015d6:	f7ff fd53 	bl	8001080 <__aeabi_fcmplt>
 80015da:	b950      	cbnz	r0, 80015f2 <HAL_TIM_PeriodElapsedCallback+0x106>
				else if(++count==9)
 80015dc:	4a12      	ldr	r2, [pc, #72]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80015de:	7813      	ldrb	r3, [r2, #0]
 80015e0:	3301      	adds	r3, #1
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b09      	cmp	r3, #9
 80015e6:	7013      	strb	r3, [r2, #0]
 80015e8:	d1ea      	bne.n	80015c0 <HAL_TIM_PeriodElapsedCallback+0xd4>
						frequency = 0;
 80015ea:	2300      	movs	r3, #0
						count = 0;
 80015ec:	7010      	strb	r0, [r2, #0]
						frequency = 0;
 80015ee:	6023      	str	r3, [r4, #0]
}
 80015f0:	e7e6      	b.n	80015c0 <HAL_TIM_PeriodElapsedCallback+0xd4>
					frequency = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	6023      	str	r3, [r4, #0]
 80015f6:	e7e3      	b.n	80015c0 <HAL_TIM_PeriodElapsedCallback+0xd4>
 80015f8:	20000328 	.word	0x20000328
 80015fc:	40010c00 	.word	0x40010c00
 8001600:	40010800 	.word	0x40010800
 8001604:	2000000c 	.word	0x2000000c
 8001608:	2000021e 	.word	0x2000021e
 800160c:	2000021d 	.word	0x2000021d
 8001610:	20000224 	.word	0x20000224
 8001614:	08006d60 	.word	0x08006d60
 8001618:	200002f4 	.word	0x200002f4
 800161c:	200002ac 	.word	0x200002ac
 8001620:	20000214 	.word	0x20000214
 8001624:	20000218 	.word	0x20000218
 8001628:	2000021c 	.word	0x2000021c
 800162c:	43480000 	.word	0x43480000
 8001630:	c3480000 	.word	0xc3480000

08001634 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin == SW0_Pin)
 8001634:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
{
 8001638:	b508      	push	{r3, lr}
	if(GPIO_Pin == SW0_Pin)
 800163a:	d009      	beq.n	8001650 <HAL_GPIO_EXTI_Callback+0x1c>
		HAL_GPIO_WritePin(BLM_SI_GPIO_Port, BLM_SI_Pin, GPIO_PIN_SET);
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
		flag_auto = 0;
	}
	else
	if(GPIO_Pin == SW1_Pin)
 800163c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8001640:	d01f      	beq.n	8001682 <HAL_GPIO_EXTI_Callback+0x4e>
		HAL_GPIO_WritePin(BLM_SI_GPIO_Port, BLM_SI_Pin, GPIO_PIN_RESET);
		//speed = 0
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
		flag_auto = 0;
	}
	if(GPIO_Pin == BLM_ER_Pin) //error motor
 8001642:	2810      	cmp	r0, #16
 8001644:	d103      	bne.n	800164e <HAL_GPIO_EXTI_Callback+0x1a>
	{
		//stop motor
		//HAL_GPIO_WritePin(BLM_E_GPIO_Port, BLM_E_Pin, GPIO_PIN_SET);
		//__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
		//flag_auto = 0;
		countError++;
 8001646:	4a16      	ldr	r2, [pc, #88]	; (80016a0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001648:	7813      	ldrb	r3, [r2, #0]
 800164a:	3301      	adds	r3, #1
 800164c:	7013      	strb	r3, [r2, #0]
		//HAL_UART_Transmit(&huart1, (uint8_t*)"ERROR\n", 13, HAL_MAX_DELAY);
	}
}
 800164e:	bd08      	pop	{r3, pc}
		HAL_GPIO_WritePin(VLV1_GPIO_Port, VLV1_Pin, GPIO_PIN_RESET);
 8001650:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001654:	2200      	movs	r2, #0
 8001656:	2104      	movs	r1, #4
 8001658:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
 800165c:	f001 f8b4 	bl	80027c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLM_E_GPIO_Port, BLM_E_Pin, GPIO_PIN_SET);
 8001660:	2201      	movs	r2, #1
 8001662:	2108      	movs	r1, #8
 8001664:	480f      	ldr	r0, [pc, #60]	; (80016a4 <HAL_GPIO_EXTI_Callback+0x70>)
 8001666:	f001 f8af 	bl	80027c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLM_SI_GPIO_Port, BLM_SI_Pin, GPIO_PIN_SET);
 800166a:	2201      	movs	r2, #1
		HAL_GPIO_WritePin(BLM_SI_GPIO_Port, BLM_SI_Pin, GPIO_PIN_RESET);
 800166c:	2120      	movs	r1, #32
 800166e:	480d      	ldr	r0, [pc, #52]	; (80016a4 <HAL_GPIO_EXTI_Callback+0x70>)
 8001670:	f001 f8aa 	bl	80027c8 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
 8001674:	2300      	movs	r3, #0
 8001676:	490c      	ldr	r1, [pc, #48]	; (80016a8 <HAL_GPIO_EXTI_Callback+0x74>)
		flag_auto = 0;
 8001678:	4a0c      	ldr	r2, [pc, #48]	; (80016ac <HAL_GPIO_EXTI_Callback+0x78>)
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
 800167a:	6809      	ldr	r1, [r1, #0]
 800167c:	634b      	str	r3, [r1, #52]	; 0x34
		flag_auto = 0;
 800167e:	7013      	strb	r3, [r2, #0]
}
 8001680:	bd08      	pop	{r3, pc}
		HAL_GPIO_WritePin(VLV1_GPIO_Port, VLV1_Pin, GPIO_PIN_SET);
 8001682:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001686:	2201      	movs	r2, #1
 8001688:	2104      	movs	r1, #4
 800168a:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800168e:	f001 f89b 	bl	80027c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLM_E_GPIO_Port, BLM_E_Pin, GPIO_PIN_SET);
 8001692:	2201      	movs	r2, #1
 8001694:	2108      	movs	r1, #8
 8001696:	4803      	ldr	r0, [pc, #12]	; (80016a4 <HAL_GPIO_EXTI_Callback+0x70>)
 8001698:	f001 f896 	bl	80027c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLM_SI_GPIO_Port, BLM_SI_Pin, GPIO_PIN_RESET);
 800169c:	2200      	movs	r2, #0
 800169e:	e7e5      	b.n	800166c <HAL_GPIO_EXTI_Callback+0x38>
 80016a0:	2000021d 	.word	0x2000021d
 80016a4:	40010c00 	.word	0x40010c00
 80016a8:	20000394 	.word	0x20000394
 80016ac:	2000021e 	.word	0x2000021e

080016b0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart->Instance==huart1.Instance)
 80016b0:	4b13      	ldr	r3, [pc, #76]	; (8001700 <HAL_UART_RxCpltCallback+0x50>)
 80016b2:	6802      	ldr	r2, [r0, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d000      	beq.n	80016bc <HAL_UART_RxCpltCallback+0xc>
 80016ba:	4770      	bx	lr
{
 80016bc:	b410      	push	{r4}
	{
		if (!rx_index)
 80016be:	4c11      	ldr	r4, [pc, #68]	; (8001704 <HAL_UART_RxCpltCallback+0x54>)
 80016c0:	7823      	ldrb	r3, [r4, #0]
 80016c2:	b92b      	cbnz	r3, 80016d0 <HAL_UART_RxCpltCallback+0x20>
 80016c4:	4a10      	ldr	r2, [pc, #64]	; (8001708 <HAL_UART_RxCpltCallback+0x58>)
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	6053      	str	r3, [r2, #4]
 80016ca:	6093      	str	r3, [r2, #8]
 80016cc:	60d3      	str	r3, [r2, #12]
 80016ce:	6113      	str	r3, [r2, #16]
			for(int i=0;i<20;i++)
			{
				rx_buffer[i]='\0';
			}
		}
		if(rx_data!='\n' && rx_data!='\r' && rx_data != '/')
 80016d0:	4a0e      	ldr	r2, [pc, #56]	; (800170c <HAL_UART_RxCpltCallback+0x5c>)
 80016d2:	7812      	ldrb	r2, [r2, #0]
 80016d4:	2a0a      	cmp	r2, #10
 80016d6:	d008      	beq.n	80016ea <HAL_UART_RxCpltCallback+0x3a>
 80016d8:	2a0d      	cmp	r2, #13
 80016da:	d006      	beq.n	80016ea <HAL_UART_RxCpltCallback+0x3a>
 80016dc:	2a2f      	cmp	r2, #47	; 0x2f
 80016de:	d004      	beq.n	80016ea <HAL_UART_RxCpltCallback+0x3a>
		{
			rx_buffer[rx_index++]=rx_data;
 80016e0:	4809      	ldr	r0, [pc, #36]	; (8001708 <HAL_UART_RxCpltCallback+0x58>)
 80016e2:	1c59      	adds	r1, r3, #1
 80016e4:	54c2      	strb	r2, [r0, r3]
 80016e6:	b2cb      	uxtb	r3, r1
 80016e8:	e003      	b.n	80016f2 <HAL_UART_RxCpltCallback+0x42>
		}
		else
		{
			//HAL_UART_Transmit(&huart1, (uint8_t*)rx_buffer, strlen(rx_buffer), HAL_MAX_DELAY);
			flag_value = 1;
 80016ea:	2101      	movs	r1, #1
			rx_index=0;
 80016ec:	2300      	movs	r3, #0
			flag_value = 1;
 80016ee:	4a08      	ldr	r2, [pc, #32]	; (8001710 <HAL_UART_RxCpltCallback+0x60>)
 80016f0:	7011      	strb	r1, [r2, #0]
			rx_index=0;
 80016f2:	7023      	strb	r3, [r4, #0]
		}

		HAL_UART_Receive_IT(&huart1,&rx_data, 1);
 80016f4:	2201      	movs	r2, #1
 80016f6:	4905      	ldr	r1, [pc, #20]	; (800170c <HAL_UART_RxCpltCallback+0x5c>)
 80016f8:	4801      	ldr	r0, [pc, #4]	; (8001700 <HAL_UART_RxCpltCallback+0x50>)
	}
}
 80016fa:	bc10      	pop	{r4}
		HAL_UART_Receive_IT(&huart1,&rx_data, 1);
 80016fc:	f002 ba02 	b.w	8003b04 <HAL_UART_Receive_IT>
 8001700:	200002ac 	.word	0x200002ac
 8001704:	2000022c 	.word	0x2000022c
 8001708:	2000028c 	.word	0x2000028c
 800170c:	20000370 	.word	0x20000370
 8001710:	20000220 	.word	0x20000220

08001714 <HAL_TIM_IC_CaptureCallback>:
			HAL_GPIO_WritePin(VLV1_GPIO_Port, VLV1_Pin, GPIO_PIN_RESET);
			break;
	}
}
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001714:	b538      	push	{r3, r4, r5, lr}
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8001716:	7f03      	ldrb	r3, [r0, #28]
 8001718:	2b04      	cmp	r3, #4
 800171a:	d000      	beq.n	800171e <HAL_TIM_IC_CaptureCallback+0xa>
		frequency = (float)24000*60/3/Difference; //rpm
		if(!HAL_GPIO_ReadPin(BLM_SI_GPIO_Port,BLM_SI_Pin))
			frequency = -frequency;
		__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
	}
}
 800171c:	bd38      	pop	{r3, r4, r5, pc}
		Difference = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 800171e:	4604      	mov	r4, r0
 8001720:	2108      	movs	r1, #8
 8001722:	f002 f801 	bl	8003728 <HAL_TIM_ReadCapturedValue>
		__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001726:	2200      	movs	r2, #0
 8001728:	6823      	ldr	r3, [r4, #0]
		Difference = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 800172a:	490d      	ldr	r1, [pc, #52]	; (8001760 <HAL_TIM_IC_CaptureCallback+0x4c>)
		__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800172c:	625a      	str	r2, [r3, #36]	; 0x24
		Difference = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 800172e:	6008      	str	r0, [r1, #0]
		frequency = (float)24000*60/3/Difference; //rpm
 8001730:	f7ff fab0 	bl	8000c94 <__aeabi_ui2f>
 8001734:	4601      	mov	r1, r0
 8001736:	480b      	ldr	r0, [pc, #44]	; (8001764 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001738:	f7ff fbb8 	bl	8000eac <__aeabi_fdiv>
 800173c:	4603      	mov	r3, r0
 800173e:	4d0a      	ldr	r5, [pc, #40]	; (8001768 <HAL_TIM_IC_CaptureCallback+0x54>)
		if(!HAL_GPIO_ReadPin(BLM_SI_GPIO_Port,BLM_SI_Pin))
 8001740:	2120      	movs	r1, #32
 8001742:	480a      	ldr	r0, [pc, #40]	; (800176c <HAL_TIM_IC_CaptureCallback+0x58>)
		frequency = (float)24000*60/3/Difference; //rpm
 8001744:	602b      	str	r3, [r5, #0]
		if(!HAL_GPIO_ReadPin(BLM_SI_GPIO_Port,BLM_SI_Pin))
 8001746:	f001 f839 	bl	80027bc <HAL_GPIO_ReadPin>
 800174a:	b918      	cbnz	r0, 8001754 <HAL_TIM_IC_CaptureCallback+0x40>
			frequency = -frequency;
 800174c:	682b      	ldr	r3, [r5, #0]
 800174e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001752:	602b      	str	r3, [r5, #0]
		__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001754:	f06f 0201 	mvn.w	r2, #1
 8001758:	6823      	ldr	r3, [r4, #0]
 800175a:	611a      	str	r2, [r3, #16]
}
 800175c:	bd38      	pop	{r3, r4, r5, pc}
 800175e:	bf00      	nop
 8001760:	20000214 	.word	0x20000214
 8001764:	48ea6000 	.word	0x48ea6000
 8001768:	20000224 	.word	0x20000224
 800176c:	40010c00 	.word	0x40010c00

08001770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001774:	2300      	movs	r3, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001776:	2601      	movs	r6, #1
 8001778:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800177c:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800177e:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001780:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001784:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
{
 8001788:	b091      	sub	sp, #68	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800178a:	a806      	add	r0, sp, #24
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800178c:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001790:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001794:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001798:	e9cd 6706 	strd	r6, r7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800179c:	e9cd 410d 	strd	r4, r1, [sp, #52]	; 0x34
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017a0:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a2:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80017a4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017a6:	950a      	str	r5, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80017a8:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017aa:	f001 f81d 	bl	80027e8 <HAL_RCC_OscConfig>
 80017ae:	b108      	cbz	r0, 80017b4 <SystemClock_Config+0x44>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <SystemClock_Config+0x42>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017b4:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017b6:	f04f 080f 	mov.w	r8, #15
 80017ba:	f04f 0902 	mov.w	r9, #2
 80017be:	2600      	movs	r6, #0
 80017c0:	f44f 6780 	mov.w	r7, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017c4:	4621      	mov	r1, r4
 80017c6:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c8:	e9cd 8900 	strd	r8, r9, [sp]
 80017cc:	e9cd 6702 	strd	r6, r7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017d0:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017d2:	f001 fa09 	bl	8002be8 <HAL_RCC_ClockConfig>
 80017d6:	b108      	cbz	r0, 80017dc <SystemClock_Config+0x6c>
 80017d8:	b672      	cpsid	i
  while (1)
 80017da:	e7fe      	b.n	80017da <SystemClock_Config+0x6a>
}
 80017dc:	b011      	add	sp, #68	; 0x44
 80017de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017e2:	bf00      	nop
 80017e4:	0000      	movs	r0, r0
	...

080017e8 <main>:
{
 80017e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	2500      	movs	r5, #0
{
 80017ee:	b099      	sub	sp, #100	; 0x64
  HAL_Init();
 80017f0:	f000 fdd6 	bl	80023a0 <HAL_Init>
  SystemClock_Config();
 80017f4:	f7ff ffbc 	bl	8001770 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
 80017fc:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001800:	4ba3      	ldr	r3, [pc, #652]	; (8001a90 <main+0x2a8>)
  HAL_GPIO_WritePin(GPIOA, VLV1_Pin|SPI_SCK_Pin, GPIO_PIN_RESET);
 8001802:	462a      	mov	r2, r5
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001804:	6999      	ldr	r1, [r3, #24]
  GPIO_InitStruct.Pin = VLV1_Pin;
 8001806:	2702      	movs	r7, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001808:	f041 0120 	orr.w	r1, r1, #32
 800180c:	6199      	str	r1, [r3, #24]
 800180e:	6998      	ldr	r0, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, VLV1_Pin|SPI_SCK_Pin, GPIO_PIN_RESET);
 8001810:	f44f 7182 	mov.w	r1, #260	; 0x104
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001814:	f000 0020 	and.w	r0, r0, #32
 8001818:	9007      	str	r0, [sp, #28]
 800181a:	9807      	ldr	r0, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800181c:	699c      	ldr	r4, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, VLV1_Pin|SPI_SCK_Pin, GPIO_PIN_RESET);
 800181e:	489d      	ldr	r0, [pc, #628]	; (8001a94 <main+0x2ac>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001820:	f044 0404 	orr.w	r4, r4, #4
 8001824:	619c      	str	r4, [r3, #24]
 8001826:	699e      	ldr	r6, [r3, #24]
  GPIO_InitStruct.Pin = SW0_Pin|SW1_Pin;
 8001828:	f44f 6840 	mov.w	r8, #3072	; 0xc00
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800182c:	f006 0604 	and.w	r6, r6, #4
 8001830:	9608      	str	r6, [sp, #32]
 8001832:	9e08      	ldr	r6, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001834:	699e      	ldr	r6, [r3, #24]
  GPIO_InitStruct.Pin = SW0_Pin|SW1_Pin;
 8001836:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8001abc <main+0x2d4>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800183a:	f046 0608 	orr.w	r6, r6, #8
 800183e:	619e      	str	r6, [r3, #24]
 8001840:	699b      	ldr	r3, [r3, #24]
  GPIO_InitStruct.Pin = VLV1_Pin;
 8001842:	2600      	movs	r6, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001844:	f003 0308 	and.w	r3, r3, #8
 8001848:	9309      	str	r3, [sp, #36]	; 0x24
 800184a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOA, VLV1_Pin|SPI_SCK_Pin, GPIO_PIN_RESET);
 800184c:	f000 ffbc 	bl	80027c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SPI_SS_Pin|BLM_E_Pin|BLM_SI_Pin, GPIO_PIN_RESET);
 8001850:	462a      	mov	r2, r5
 8001852:	f244 0128 	movw	r1, #16424	; 0x4028
 8001856:	4890      	ldr	r0, [pc, #576]	; (8001a98 <main+0x2b0>)
 8001858:	f000 ffb6 	bl	80027c8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = VLV1_Pin;
 800185c:	2204      	movs	r2, #4
 800185e:	2301      	movs	r3, #1
  HAL_GPIO_Init(VLV1_GPIO_Port, &GPIO_InitStruct);
 8001860:	488c      	ldr	r0, [pc, #560]	; (8001a94 <main+0x2ac>)
 8001862:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = VLV1_Pin;
 8001864:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8001868:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(VLV1_GPIO_Port, &GPIO_InitStruct);
 800186c:	f000 feaa 	bl	80025c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001870:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001872:	4889      	ldr	r0, [pc, #548]	; (8001a98 <main+0x2b0>)
 8001874:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = SW0_Pin|SW1_Pin;
 8001876:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800187a:	9312      	str	r3, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187c:	f000 fea2 	bl	80025c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 8001880:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001884:	2311      	movs	r3, #17
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8001886:	4884      	ldr	r0, [pc, #528]	; (8001a98 <main+0x2b0>)
 8001888:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 800188a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800188e:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8001892:	f000 fe97 	bl	80025c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPI_MISO_Pin;
 8001896:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800189a:	2300      	movs	r3, #0
  HAL_GPIO_Init(SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 800189c:	487e      	ldr	r0, [pc, #504]	; (8001a98 <main+0x2b0>)
 800189e:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = SPI_MISO_Pin;
 80018a0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pin = SPI_SCK_Pin;
 80018a4:	f44f 7880 	mov.w	r8, #256	; 0x100
 80018a8:	f04f 0911 	mov.w	r9, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	9512      	str	r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 80018ae:	f000 fe89 	bl	80025c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPI_SCK_Pin;
 80018b2:	2200      	movs	r2, #0
 80018b4:	2303      	movs	r3, #3
  HAL_GPIO_Init(SPI_SCK_GPIO_Port, &GPIO_InitStruct);
 80018b6:	4877      	ldr	r0, [pc, #476]	; (8001a94 <main+0x2ac>)
 80018b8:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = SPI_SCK_Pin;
 80018ba:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80018be:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
  HAL_GPIO_Init(SPI_SCK_GPIO_Port, &GPIO_InitStruct);
 80018c2:	f000 fe7f 	bl	80025c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BLM_E_Pin|BLM_SI_Pin;
 80018c6:	2228      	movs	r2, #40	; 0x28
 80018c8:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ca:	4873      	ldr	r0, [pc, #460]	; (8001a98 <main+0x2b0>)
 80018cc:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = BLM_E_Pin|BLM_SI_Pin;
 80018ce:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80018d2:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d6:	f000 fe75 	bl	80025c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BLM_ER_Pin;
 80018da:	2210      	movs	r2, #16
 80018dc:	4b6f      	ldr	r3, [pc, #444]	; (8001a9c <main+0x2b4>)
  HAL_GPIO_Init(BLM_ER_GPIO_Port, &GPIO_InitStruct);
 80018de:	486e      	ldr	r0, [pc, #440]	; (8001a98 <main+0x2b0>)
 80018e0:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = BLM_ER_Pin;
 80018e2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	9512      	str	r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(BLM_ER_GPIO_Port, &GPIO_InitStruct);
 80018e8:	f000 fe6c 	bl	80025c4 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80018ec:	462a      	mov	r2, r5
 80018ee:	4629      	mov	r1, r5
 80018f0:	200a      	movs	r0, #10
 80018f2:	f000 fd9d 	bl	8002430 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80018f6:	200a      	movs	r0, #10
 80018f8:	f000 fdd2 	bl	80024a0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018fc:	462a      	mov	r2, r5
 80018fe:	4629      	mov	r1, r5
 8001900:	2028      	movs	r0, #40	; 0x28
 8001902:	f000 fd95 	bl	8002430 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001906:	2028      	movs	r0, #40	; 0x28
 8001908:	f000 fdca 	bl	80024a0 <HAL_NVIC_EnableIRQ>
  htim2.Instance = TIM2;
 800190c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 9-1;
 8001910:	2208      	movs	r2, #8
  htim2.Init.Period = 400-1;
 8001912:	f240 138f 	movw	r3, #399	; 0x18f
  htim2.Instance = TIM2;
 8001916:	4c62      	ldr	r4, [pc, #392]	; (8001aa0 <main+0x2b8>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001918:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800191c:	4620      	mov	r0, r4
  TIM_OC_InitTypeDef sConfigOC = {0};
 800191e:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
 8001922:	e9cd 5514 	strd	r5, r5, [sp, #80]	; 0x50
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001926:	e9cd 550d 	strd	r5, r5, [sp, #52]	; 0x34
  htim2.Init.Prescaler = 9-1;
 800192a:	e9c4 1200 	strd	r1, r2, [r4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800192e:	950c      	str	r5, [sp, #48]	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001930:	950a      	str	r5, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001932:	9516      	str	r5, [sp, #88]	; 0x58
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001934:	950f      	str	r5, [sp, #60]	; 0x3c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001936:	950b      	str	r5, [sp, #44]	; 0x2c
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001938:	60a5      	str	r5, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193a:	6125      	str	r5, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193c:	61a5      	str	r5, [r4, #24]
  htim2.Init.Period = 400-1;
 800193e:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001940:	f001 fa40 	bl	8002dc4 <HAL_TIM_Base_Init>
 8001944:	b108      	cbz	r0, 800194a <main+0x162>
 8001946:	b672      	cpsid	i
  while (1)
 8001948:	e7fe      	b.n	8001948 <main+0x160>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800194a:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800194e:	4620      	mov	r0, r4
 8001950:	a90c      	add	r1, sp, #48	; 0x30
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001952:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001956:	f001 fe3b 	bl	80035d0 <HAL_TIM_ConfigClockSource>
 800195a:	b108      	cbz	r0, 8001960 <main+0x178>
 800195c:	b672      	cpsid	i
  while (1)
 800195e:	e7fe      	b.n	800195e <main+0x176>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001960:	4620      	mov	r0, r4
 8001962:	f001 fab9 	bl	8002ed8 <HAL_TIM_PWM_Init>
 8001966:	b108      	cbz	r0, 800196c <main+0x184>
 8001968:	b672      	cpsid	i
  while (1)
 800196a:	e7fe      	b.n	800196a <main+0x182>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800196c:	2600      	movs	r6, #0
 800196e:	2700      	movs	r7, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001970:	4620      	mov	r0, r4
 8001972:	a90a      	add	r1, sp, #40	; 0x28
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001974:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001978:	f001 ffa0 	bl	80038bc <HAL_TIMEx_MasterConfigSynchronization>
 800197c:	4602      	mov	r2, r0
 800197e:	b108      	cbz	r0, 8001984 <main+0x19c>
 8001980:	b672      	cpsid	i
  while (1)
 8001982:	e7fe      	b.n	8001982 <main+0x19a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001984:	f04f 0a60 	mov.w	sl, #96	; 0x60
 8001988:	f04f 0b00 	mov.w	fp, #0
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800198c:	9012      	str	r0, [sp, #72]	; 0x48
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800198e:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001990:	a910      	add	r1, sp, #64	; 0x40
 8001992:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001994:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001998:	f001 fd14 	bl	80033c4 <HAL_TIM_PWM_ConfigChannel>
 800199c:	b108      	cbz	r0, 80019a2 <main+0x1ba>
 800199e:	b672      	cpsid	i
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <main+0x1b8>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019a2:	2204      	movs	r2, #4
 80019a4:	4620      	mov	r0, r4
 80019a6:	a910      	add	r1, sp, #64	; 0x40
 80019a8:	f001 fd0c 	bl	80033c4 <HAL_TIM_PWM_ConfigChannel>
 80019ac:	4605      	mov	r5, r0
 80019ae:	b108      	cbz	r0, 80019b4 <main+0x1cc>
 80019b0:	b672      	cpsid	i
  while (1)
 80019b2:	e7fe      	b.n	80019b2 <main+0x1ca>
  HAL_TIM_MspPostInit(&htim2);
 80019b4:	4620      	mov	r0, r4
 80019b6:	f000 fba3 	bl	8002100 <HAL_TIM_MspPostInit>
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019ba:	230c      	movs	r3, #12
  huart1.Init.BaudRate = 115200;
 80019bc:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart1.Instance = USART1;
 80019c0:	4838      	ldr	r0, [pc, #224]	; (8001aa4 <main+0x2bc>)
 80019c2:	4a39      	ldr	r2, [pc, #228]	; (8001aa8 <main+0x2c0>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019c4:	6143      	str	r3, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019c6:	e9c0 1501 	strd	r1, r5, [r0, #4]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019ca:	e9c0 5503 	strd	r5, r5, [r0, #12]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ce:	e9c0 5506 	strd	r5, r5, [r0, #24]
  huart1.Instance = USART1;
 80019d2:	6002      	str	r2, [r0, #0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019d4:	f001 ffa4 	bl	8003920 <HAL_UART_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	b108      	cbz	r0, 80019e0 <main+0x1f8>
 80019dc:	b672      	cpsid	i
  while (1)
 80019de:	e7fe      	b.n	80019de <main+0x1f6>
  htim1.Init.Prescaler = 7200-1;
 80019e0:	f641 401f 	movw	r0, #7199	; 0x1c1f
  htim1.Init.Period = 1000-1;
 80019e4:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim1.Instance = TIM1;
 80019e8:	4d30      	ldr	r5, [pc, #192]	; (8001aac <main+0x2c4>)
 80019ea:	4931      	ldr	r1, [pc, #196]	; (8001ab0 <main+0x2c8>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ec:	e9c5 0301 	strd	r0, r3, [r5, #4]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019f0:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019f2:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 80019f6:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019fa:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  htim1.Init.RepetitionCounter = 0;
 80019fe:	e9c5 3304 	strd	r3, r3, [r5, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a02:	61ab      	str	r3, [r5, #24]
  htim1.Instance = TIM1;
 8001a04:	6029      	str	r1, [r5, #0]
  htim1.Init.Period = 1000-1;
 8001a06:	60ea      	str	r2, [r5, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a08:	f001 f9dc 	bl	8002dc4 <HAL_TIM_Base_Init>
 8001a0c:	b108      	cbz	r0, 8001a12 <main+0x22a>
 8001a0e:	b672      	cpsid	i
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <main+0x228>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a12:	4628      	mov	r0, r5
 8001a14:	a910      	add	r1, sp, #64	; 0x40
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a16:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a1a:	f001 fdd9 	bl	80035d0 <HAL_TIM_ConfigClockSource>
 8001a1e:	b108      	cbz	r0, 8001a24 <main+0x23c>
 8001a20:	b672      	cpsid	i
  while (1)
 8001a22:	e7fe      	b.n	8001a22 <main+0x23a>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a24:	4628      	mov	r0, r5
 8001a26:	a90c      	add	r1, sp, #48	; 0x30
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a28:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a2c:	f001 ff46 	bl	80038bc <HAL_TIMEx_MasterConfigSynchronization>
 8001a30:	b108      	cbz	r0, 8001a36 <main+0x24e>
 8001a32:	b672      	cpsid	i
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <main+0x24c>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a36:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 3000-1;
 8001a38:	f640 31b7 	movw	r1, #2999	; 0xbb7
  htim3.Init.Period = 0xffff-1;
 8001a3c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  htim3.Instance = TIM3;
 8001a40:	4d1c      	ldr	r5, [pc, #112]	; (8001ab4 <main+0x2cc>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a42:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 8001a46:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a4a:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a4e:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8001a52:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a56:	60ab      	str	r3, [r5, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a58:	612b      	str	r3, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a5a:	61ab      	str	r3, [r5, #24]
  htim3.Instance = TIM3;
 8001a5c:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <main+0x2d0>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a5e:	4628      	mov	r0, r5
  htim3.Instance = TIM3;
 8001a60:	e9c5 3100 	strd	r3, r1, [r5]
  htim3.Init.Period = 0xffff-1;
 8001a64:	60ea      	str	r2, [r5, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a66:	f001 f9ad 	bl	8002dc4 <HAL_TIM_Base_Init>
 8001a6a:	b108      	cbz	r0, 8001a70 <main+0x288>
 8001a6c:	b672      	cpsid	i
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <main+0x286>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a74:	4628      	mov	r0, r5
 8001a76:	a910      	add	r1, sp, #64	; 0x40
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a78:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a7a:	f001 fda9 	bl	80035d0 <HAL_TIM_ConfigClockSource>
 8001a7e:	b108      	cbz	r0, 8001a84 <main+0x29c>
 8001a80:	b672      	cpsid	i
  while (1)
 8001a82:	e7fe      	b.n	8001a82 <main+0x29a>
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001a84:	4628      	mov	r0, r5
 8001a86:	f001 fadb 	bl	8003040 <HAL_TIM_IC_Init>
 8001a8a:	b1c8      	cbz	r0, 8001ac0 <main+0x2d8>
 8001a8c:	b672      	cpsid	i
  while (1)
 8001a8e:	e7fe      	b.n	8001a8e <main+0x2a6>
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40010800 	.word	0x40010800
 8001a98:	40010c00 	.word	0x40010c00
 8001a9c:	10110000 	.word	0x10110000
 8001aa0:	20000394 	.word	0x20000394
 8001aa4:	200002ac 	.word	0x200002ac
 8001aa8:	40013800 	.word	0x40013800
 8001aac:	20000328 	.word	0x20000328
 8001ab0:	40012c00 	.word	0x40012c00
 8001ab4:	20000240 	.word	0x20000240
 8001ab8:	40000400 	.word	0x40000400
 8001abc:	10210000 	.word	0x10210000
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac0:	2600      	movs	r6, #0
 8001ac2:	2700      	movs	r7, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ac4:	4628      	mov	r0, r5
 8001ac6:	a90a      	add	r1, sp, #40	; 0x28
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac8:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001acc:	f001 fef6 	bl	80038bc <HAL_TIMEx_MasterConfigSynchronization>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	b108      	cbz	r0, 8001ad8 <main+0x2f0>
 8001ad4:	b672      	cpsid	i
  while (1)
 8001ad6:	e7fe      	b.n	8001ad6 <main+0x2ee>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ad8:	f04f 0800 	mov.w	r8, #0
 8001adc:	f04f 0901 	mov.w	r9, #1
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ae0:	4628      	mov	r0, r5
 8001ae2:	a90c      	add	r1, sp, #48	; 0x30
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ae4:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 8001ae8:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001aec:	f001 fbaa 	bl	8003244 <HAL_TIM_IC_ConfigChannel>
 8001af0:	b108      	cbz	r0, 8001af6 <main+0x30e>
 8001af2:	b672      	cpsid	i
  while (1)
 8001af4:	e7fe      	b.n	8001af4 <main+0x30c>
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001af6:	2204      	movs	r2, #4
 8001af8:	4628      	mov	r0, r5
 8001afa:	a90c      	add	r1, sp, #48	; 0x30
 8001afc:	f001 fba2 	bl	8003244 <HAL_TIM_IC_ConfigChannel>
 8001b00:	b108      	cbz	r0, 8001b06 <main+0x31e>
 8001b02:	b672      	cpsid	i
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <main+0x31c>
  sConfigIC.ICFilter = 2;
 8001b06:	2302      	movs	r3, #2
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001b08:	2208      	movs	r2, #8
 8001b0a:	4628      	mov	r0, r5
 8001b0c:	a90c      	add	r1, sp, #48	; 0x30
  sConfigIC.ICFilter = 2;
 8001b0e:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001b10:	f001 fb98 	bl	8003244 <HAL_TIM_IC_ConfigChannel>
 8001b14:	b108      	cbz	r0, 8001b1a <main+0x332>
 8001b16:	b672      	cpsid	i
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <main+0x330>
  if (HAL_TIM_ConfigTI1Input(&htim3, TIM_TI1SELECTION_XORCOMBINATION) != HAL_OK)
 8001b1a:	4628      	mov	r0, r5
 8001b1c:	2180      	movs	r1, #128	; 0x80
 8001b1e:	f001 fdfb 	bl	8003718 <HAL_TIM_ConfigTI1Input>
 8001b22:	4605      	mov	r5, r0
 8001b24:	b108      	cbz	r0, 8001b2a <main+0x342>
 8001b26:	b672      	cpsid	i
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <main+0x340>
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8001b2a:	2201      	movs	r2, #1
	  pressure = readMCP3553()/0.00064;
 8001b2c:	f20f 29b8 	addw	r9, pc, #696	; 0x2b8
 8001b30:	e9d9 8900 	ldrd	r8, r9, [r9]
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8001b34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b38:	48ad      	ldr	r0, [pc, #692]	; (8001df0 <main+0x608>)
 8001b3a:	f000 fe45 	bl	80027c8 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001b3e:	2064      	movs	r0, #100	; 0x64
 8001b40:	f000 fc52 	bl	80023e8 <HAL_Delay>
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 8001b44:	462a      	mov	r2, r5
 8001b46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b4a:	48a9      	ldr	r0, [pc, #676]	; (8001df0 <main+0x608>)
 8001b4c:	f000 fe3c 	bl	80027c8 <HAL_GPIO_WritePin>
 8001b50:	2505      	movs	r5, #5
 8001b52:	4fa8      	ldr	r7, [pc, #672]	; (8001df4 <main+0x60c>)
	  pressure = readMCP3553()/0.00064;
 8001b54:	f7ff fae2 	bl	800111c <readMCP3553>
 8001b58:	f7fe fc66 	bl	8000428 <__aeabi_f2d>
 8001b5c:	4642      	mov	r2, r8
 8001b5e:	464b      	mov	r3, r9
 8001b60:	f7fe fcba 	bl	80004d8 <__aeabi_dmul>
 8001b64:	f7fe ff90 	bl	8000a88 <__aeabi_d2f>
 8001b68:	3d01      	subs	r5, #1
  for(uint8_t i=0;i<5;i++)
 8001b6a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
	  pressure = readMCP3553()/0.00064;
 8001b6e:	6038      	str	r0, [r7, #0]
  for(uint8_t i=0;i<5;i++)
 8001b70:	d1f0      	bne.n	8001b54 <main+0x36c>
  HAL_TIM_Base_Start_IT(&htim1);
 8001b72:	48a1      	ldr	r0, [pc, #644]	; (8001df8 <main+0x610>)
 8001b74:	f001 f986 	bl	8002e84 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1,&rx_data, 1);
 8001b78:	2201      	movs	r2, #1
 8001b7a:	49a0      	ldr	r1, [pc, #640]	; (8001dfc <main+0x614>)
 8001b7c:	48a0      	ldr	r0, [pc, #640]	; (8001e00 <main+0x618>)
 8001b7e:	f001 ffc1 	bl	8003b04 <HAL_UART_Receive_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001b82:	4629      	mov	r1, r5
 8001b84:	489f      	ldr	r0, [pc, #636]	; (8001e04 <main+0x61c>)
 8001b86:	f001 fabb 	bl	8003100 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8001b8a:	2104      	movs	r1, #4
 8001b8c:	489d      	ldr	r0, [pc, #628]	; (8001e04 <main+0x61c>)
 8001b8e:	f001 fab7 	bl	8003100 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8001b92:	2108      	movs	r1, #8
 8001b94:	489b      	ldr	r0, [pc, #620]	; (8001e04 <main+0x61c>)
 8001b96:	f001 fab3 	bl	8003100 <HAL_TIM_IC_Start_IT>
  HAL_GPIO_WritePin(BLM_SI_GPIO_Port, BLM_SI_Pin, GPIO_PIN_SET);
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	2120      	movs	r1, #32
 8001b9e:	4894      	ldr	r0, [pc, #592]	; (8001df0 <main+0x608>)
 8001ba0:	f000 fe12 	bl	80027c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BLM_E_GPIO_Port, BLM_E_Pin, GPIO_PIN_SET);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	2108      	movs	r1, #8
 8001ba8:	4891      	ldr	r0, [pc, #580]	; (8001df0 <main+0x608>)
 8001baa:	f000 fe0d 	bl	80027c8 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001bae:	4629      	mov	r1, r5
 8001bb0:	4895      	ldr	r0, [pc, #596]	; (8001e08 <main+0x620>)
 8001bb2:	f001 f9f1 	bl	8002f98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001bb6:	2104      	movs	r1, #4
 8001bb8:	4893      	ldr	r0, [pc, #588]	; (8001e08 <main+0x620>)
 8001bba:	f001 f9ed 	bl	8002f98 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,399);
 8001bbe:	f240 128f 	movw	r2, #399	; 0x18f
 8001bc2:	6823      	ldr	r3, [r4, #0]
 8001bc4:	4e91      	ldr	r6, [pc, #580]	; (8001e0c <main+0x624>)
 8001bc6:	f8df 8270 	ldr.w	r8, [pc, #624]	; 8001e38 <main+0x650>
 8001bca:	f8df b270 	ldr.w	fp, [pc, #624]	; 8001e3c <main+0x654>
 8001bce:	f8df a270 	ldr.w	sl, [pc, #624]	; 8001e40 <main+0x658>
 8001bd2:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(BLM_SI_GPIO_Port, BLM_SI_Pin, GPIO_PIN_SET);
 8001bd4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8001df0 <main+0x608>
 8001bd8:	e03f      	b.n	8001c5a <main+0x472>
	if (!HAL_GPIO_ReadPin(BLM_E_GPIO_Port, BLM_E_Pin))
 8001bda:	2108      	movs	r1, #8
 8001bdc:	4648      	mov	r0, r9
 8001bde:	f000 fded 	bl	80027bc <HAL_GPIO_ReadPin>
 8001be2:	9003      	str	r0, [sp, #12]
 8001be4:	bb20      	cbnz	r0, 8001c30 <main+0x448>
		if(flag_auto)
 8001be6:	498a      	ldr	r1, [pc, #552]	; (8001e10 <main+0x628>)
 8001be8:	780b      	ldrb	r3, [r1, #0]
 8001bea:	b1eb      	cbz	r3, 8001c28 <main+0x440>
			if(pressureCalc-pressure<0.5 && pressureCalc-pressure>-0.5)
 8001bec:	4989      	ldr	r1, [pc, #548]	; (8001e14 <main+0x62c>)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	680d      	ldr	r5, [r1, #0]
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4628      	mov	r0, r5
 8001bf6:	9304      	str	r3, [sp, #16]
 8001bf8:	f7fe ff9a 	bl	8000b30 <__aeabi_fsub>
 8001bfc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001c00:	9005      	str	r0, [sp, #20]
 8001c02:	f7ff fa3d 	bl	8001080 <__aeabi_fcmplt>
 8001c06:	9b04      	ldr	r3, [sp, #16]
 8001c08:	2800      	cmp	r0, #0
 8001c0a:	f000 80a3 	beq.w	8001d54 <main+0x56c>
 8001c0e:	9a05      	ldr	r2, [sp, #20]
 8001c10:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 8001c14:	4610      	mov	r0, r2
 8001c16:	f7ff fa51 	bl	80010bc <__aeabi_fcmpgt>
 8001c1a:	9b04      	ldr	r3, [sp, #16]
 8001c1c:	2800      	cmp	r0, #0
 8001c1e:	f000 8099 	beq.w	8001d54 <main+0x56c>
					__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
 8001c22:	6823      	ldr	r3, [r4, #0]
 8001c24:	9a03      	ldr	r2, [sp, #12]
 8001c26:	635a      	str	r2, [r3, #52]	; 0x34
		if(flag_speed)
 8001c28:	4b7b      	ldr	r3, [pc, #492]	; (8001e18 <main+0x630>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d160      	bne.n	8001cf2 <main+0x50a>
	if (!HAL_GPIO_ReadPin(SW0_GPIO_Port, SW0_Pin) && !HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin))
 8001c30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c34:	4648      	mov	r0, r9
 8001c36:	f000 fdc1 	bl	80027bc <HAL_GPIO_ReadPin>
 8001c3a:	2800      	cmp	r0, #0
 8001c3c:	d07c      	beq.n	8001d38 <main+0x550>
	if (!HAL_GPIO_ReadPin(SW0_GPIO_Port, SW0_Pin))
 8001c3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c42:	4648      	mov	r0, r9
 8001c44:	f000 fdba 	bl	80027bc <HAL_GPIO_ReadPin>
 8001c48:	2800      	cmp	r0, #0
 8001c4a:	d06c      	beq.n	8001d26 <main+0x53e>
	if (!HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin))
 8001c4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c50:	4648      	mov	r0, r9
 8001c52:	f000 fdb3 	bl	80027bc <HAL_GPIO_ReadPin>
 8001c56:	2800      	cmp	r0, #0
 8001c58:	d057      	beq.n	8001d0a <main+0x522>
	pressure = readMCP3553()/0.00064;
 8001c5a:	f7ff fa5f 	bl	800111c <readMCP3553>
 8001c5e:	f7fe fbe3 	bl	8000428 <__aeabi_f2d>
 8001c62:	a361      	add	r3, pc, #388	; (adr r3, 8001de8 <main+0x600>)
 8001c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c68:	f7fe fc36 	bl	80004d8 <__aeabi_dmul>
 8001c6c:	f7fe ff0c 	bl	8000a88 <__aeabi_d2f>
	if(pressure < PRESSURE_MIN||pressure>PRESSURE_MAX)
 8001c70:	496a      	ldr	r1, [pc, #424]	; (8001e1c <main+0x634>)
	pressure = readMCP3553()/0.00064;
 8001c72:	6038      	str	r0, [r7, #0]
 8001c74:	4605      	mov	r5, r0
	if(pressure < PRESSURE_MIN||pressure>PRESSURE_MAX)
 8001c76:	f7ff fa03 	bl	8001080 <__aeabi_fcmplt>
 8001c7a:	b920      	cbnz	r0, 8001c86 <main+0x49e>
 8001c7c:	4628      	mov	r0, r5
 8001c7e:	4968      	ldr	r1, [pc, #416]	; (8001e20 <main+0x638>)
 8001c80:	f7ff fa1c 	bl	80010bc <__aeabi_fcmpgt>
 8001c84:	b120      	cbz	r0, 8001c90 <main+0x4a8>
	  HAL_GPIO_WritePin(VLV1_GPIO_Port,VLV1_Pin,GPIO_PIN_SET);
 8001c86:	2201      	movs	r2, #1
 8001c88:	2104      	movs	r1, #4
 8001c8a:	4866      	ldr	r0, [pc, #408]	; (8001e24 <main+0x63c>)
 8001c8c:	f000 fd9c 	bl	80027c8 <HAL_GPIO_WritePin>
	if (flag_value)
 8001c90:	4b65      	ldr	r3, [pc, #404]	; (8001e28 <main+0x640>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0a0      	beq.n	8001bda <main+0x3f2>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	e003      	b.n	8001ca4 <main+0x4bc>
	  num[num_index]=rxBuffer[num_index+1];
 8001c9c:	4963      	ldr	r1, [pc, #396]	; (8001e2c <main+0x644>)
 8001c9e:	5c8a      	ldrb	r2, [r1, r2]
 8001ca0:	f800 2c20 	strb.w	r2, [r0, #-32]
	while(rxBuffer[num_index]!='\0')
 8001ca4:	4962      	ldr	r1, [pc, #392]	; (8001e30 <main+0x648>)
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	5c89      	ldrb	r1, [r1, r2]
	  num[num_index]=rxBuffer[num_index+1];
 8001caa:	a818      	add	r0, sp, #96	; 0x60
 8001cac:	4410      	add	r0, r2
 8001cae:	3301      	adds	r3, #1
	while(rxBuffer[num_index]!='\0')
 8001cb0:	2900      	cmp	r1, #0
 8001cb2:	d1f3      	bne.n	8001c9c <main+0x4b4>
	switch (rxBuffer[0])
 8001cb4:	4b5e      	ldr	r3, [pc, #376]	; (8001e30 <main+0x648>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	3b61      	subs	r3, #97	; 0x61
 8001cba:	2b16      	cmp	r3, #22
 8001cbc:	f200 808d 	bhi.w	8001dda <main+0x5f2>
 8001cc0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001cc4:	0133011d 	.word	0x0133011d
 8001cc8:	00f20117 	.word	0x00f20117
 8001ccc:	010600da 	.word	0x010600da
 8001cd0:	008b0100 	.word	0x008b0100
 8001cd4:	00e000f2 	.word	0x00e000f2
 8001cd8:	008b008b 	.word	0x008b008b
 8001cdc:	008b00d5 	.word	0x008b00d5
 8001ce0:	00f200cf 	.word	0x00f200cf
 8001ce4:	008b008b 	.word	0x008b008b
 8001ce8:	008b00c6 	.word	0x008b00c6
 8001cec:	008b008b 	.word	0x008b008b
 8001cf0:	007a      	.short	0x007a
			pwm = PWM_Calc(frequencyCalc, pressure);
 8001cf2:	6839      	ldr	r1, [r7, #0]
 8001cf4:	6830      	ldr	r0, [r6, #0]
 8001cf6:	f7ff fa5f 	bl	80011b8 <PWM_Calc>
			flag_speed = 0;
 8001cfa:	2200      	movs	r2, #0
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,pwm);
 8001cfc:	6821      	ldr	r1, [r4, #0]
			flag_speed = 0;
 8001cfe:	4b46      	ldr	r3, [pc, #280]	; (8001e18 <main+0x630>)
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,pwm);
 8001d00:	6348      	str	r0, [r1, #52]	; 0x34
			pwm = PWM_Calc(frequencyCalc, pressure);
 8001d02:	f8aa 0000 	strh.w	r0, [sl]
			flag_speed = 0;
 8001d06:	701a      	strb	r2, [r3, #0]
 8001d08:	e792      	b.n	8001c30 <main+0x448>
		if(HAL_GPIO_ReadPin(BLM_SI_GPIO_Port, BLM_SI_Pin))
 8001d0a:	4605      	mov	r5, r0
 8001d0c:	2120      	movs	r1, #32
 8001d0e:	4838      	ldr	r0, [pc, #224]	; (8001df0 <main+0x608>)
 8001d10:	f000 fd54 	bl	80027bc <HAL_GPIO_ReadPin>
 8001d14:	b108      	cbz	r0, 8001d1a <main+0x532>
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
 8001d16:	6823      	ldr	r3, [r4, #0]
 8001d18:	635d      	str	r5, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(VLV1_GPIO_Port, VLV1_Pin, GPIO_PIN_SET);
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	2104      	movs	r1, #4
 8001d1e:	4841      	ldr	r0, [pc, #260]	; (8001e24 <main+0x63c>)
 8001d20:	f000 fd52 	bl	80027c8 <HAL_GPIO_WritePin>
 8001d24:	e756      	b.n	8001bd4 <main+0x3ec>
		if(!HAL_GPIO_ReadPin(BLM_SI_GPIO_Port, BLM_SI_Pin))
 8001d26:	2120      	movs	r1, #32
 8001d28:	4648      	mov	r0, r9
 8001d2a:	f000 fd47 	bl	80027bc <HAL_GPIO_ReadPin>
 8001d2e:	2800      	cmp	r0, #0
 8001d30:	d18c      	bne.n	8001c4c <main+0x464>
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
 8001d32:	6822      	ldr	r2, [r4, #0]
 8001d34:	6350      	str	r0, [r2, #52]	; 0x34
 8001d36:	e789      	b.n	8001c4c <main+0x464>
	if (!HAL_GPIO_ReadPin(SW0_GPIO_Port, SW0_Pin) && !HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin))
 8001d38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d3c:	4648      	mov	r0, r9
 8001d3e:	f000 fd3d 	bl	80027bc <HAL_GPIO_ReadPin>
 8001d42:	2800      	cmp	r0, #0
 8001d44:	f47f af7b 	bne.w	8001c3e <main+0x456>
		HAL_GPIO_WritePin(BLM_E_GPIO_Port, BLM_E_Pin, GPIO_PIN_SET);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	2108      	movs	r1, #8
 8001d4c:	4648      	mov	r0, r9
 8001d4e:	f000 fd3b 	bl	80027c8 <HAL_GPIO_WritePin>
 8001d52:	e774      	b.n	8001c3e <main+0x456>
					frequencyCalc = PID_Pressure_Calc(PID_PRESSURE, pressure, pressureCalc);
 8001d54:	4a37      	ldr	r2, [pc, #220]	; (8001e34 <main+0x64c>)
 8001d56:	9500      	str	r5, [sp, #0]
 8001d58:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d5a:	f7ff fa91 	bl	8001280 <PID_Pressure_Calc>
					pwm = PWM_Calc(frequencyCalc, pressure);
 8001d5e:	6839      	ldr	r1, [r7, #0]
					frequencyCalc = PID_Pressure_Calc(PID_PRESSURE, pressure, pressureCalc);
 8001d60:	6030      	str	r0, [r6, #0]
					pwm = PWM_Calc(frequencyCalc, pressure);
 8001d62:	f7ff fa29 	bl	80011b8 <PWM_Calc>
					if(pwm>0)
 8001d66:	2800      	cmp	r0, #0
					pwm = PWM_Calc(frequencyCalc, pressure);
 8001d68:	f8aa 0000 	strh.w	r0, [sl]
					if(pwm>0)
 8001d6c:	dd11      	ble.n	8001d92 <main+0x5aa>
						if (HAL_GPIO_ReadPin(SW0_GPIO_Port, SW1_Pin))
 8001d6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d72:	4648      	mov	r0, r9
 8001d74:	f000 fd22 	bl	80027bc <HAL_GPIO_ReadPin>
 8001d78:	2800      	cmp	r0, #0
 8001d7a:	f43f af55 	beq.w	8001c28 <main+0x440>
							HAL_GPIO_WritePin(BLM_SI_GPIO_Port, BLM_SI_Pin, GPIO_PIN_SET);
 8001d7e:	2201      	movs	r2, #1
 8001d80:	2120      	movs	r1, #32
 8001d82:	4648      	mov	r0, r9
 8001d84:	f000 fd20 	bl	80027c8 <HAL_GPIO_WritePin>
							__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,pwm);
 8001d88:	6823      	ldr	r3, [r4, #0]
 8001d8a:	f9ba 2000 	ldrsh.w	r2, [sl]
 8001d8e:	635a      	str	r2, [r3, #52]	; 0x34
 8001d90:	e74a      	b.n	8001c28 <main+0x440>
						if (HAL_GPIO_ReadPin(SW0_GPIO_Port, SW0_Pin))
 8001d92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d96:	4648      	mov	r0, r9
 8001d98:	f000 fd10 	bl	80027bc <HAL_GPIO_ReadPin>
 8001d9c:	2800      	cmp	r0, #0
 8001d9e:	f43f af43 	beq.w	8001c28 <main+0x440>
							HAL_GPIO_WritePin(BLM_SI_GPIO_Port, BLM_SI_Pin, GPIO_PIN_RESET);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2120      	movs	r1, #32
 8001da6:	4648      	mov	r0, r9
 8001da8:	f000 fd0e 	bl	80027c8 <HAL_GPIO_WritePin>
							__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,-pwm);
 8001dac:	f9ba 3000 	ldrsh.w	r3, [sl]
 8001db0:	6822      	ldr	r2, [r4, #0]
 8001db2:	425b      	negs	r3, r3
 8001db4:	6353      	str	r3, [r2, #52]	; 0x34
 8001db6:	e737      	b.n	8001c28 <main+0x440>
			voltage=atoi(num);
 8001db8:	a810      	add	r0, sp, #64	; 0x40
 8001dba:	f002 f865 	bl	8003e88 <atoi>
 8001dbe:	b203      	sxth	r3, r0
			if (voltage > PWM_MAX) voltage = PWM_MAX;
 8001dc0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
			voltage=atoi(num);
 8001dc4:	f8a8 3000 	strh.w	r3, [r8]
			if (voltage > PWM_MAX) voltage = PWM_MAX;
 8001dc8:	db3c      	blt.n	8001e44 <main+0x65c>
 8001dca:	f240 138f 	movw	r3, #399	; 0x18f
 8001dce:	f8a8 3000 	strh.w	r3, [r8]
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,voltage);
 8001dd2:	6823      	ldr	r3, [r4, #0]
 8001dd4:	f9b8 2000 	ldrsh.w	r2, [r8]
 8001dd8:	635a      	str	r2, [r3, #52]	; 0x34
		flag_value = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	4a12      	ldr	r2, [pc, #72]	; (8001e28 <main+0x640>)
 8001dde:	7013      	strb	r3, [r2, #0]
 8001de0:	e6fb      	b.n	8001bda <main+0x3f2>
 8001de2:	bf00      	nop
 8001de4:	f3af 8000 	nop.w
 8001de8:	ffffffff 	.word	0xffffffff
 8001dec:	409869ff 	.word	0x409869ff
 8001df0:	40010c00 	.word	0x40010c00
 8001df4:	2000000c 	.word	0x2000000c
 8001df8:	20000328 	.word	0x20000328
 8001dfc:	20000370 	.word	0x20000370
 8001e00:	200002ac 	.word	0x200002ac
 8001e04:	20000240 	.word	0x20000240
 8001e08:	20000394 	.word	0x20000394
 8001e0c:	20000228 	.word	0x20000228
 8001e10:	2000021e 	.word	0x2000021e
 8001e14:	2000023c 	.word	0x2000023c
 8001e18:	2000021f 	.word	0x2000021f
 8001e1c:	44610000 	.word	0x44610000
 8001e20:	4584d000 	.word	0x4584d000
 8001e24:	40010800 	.word	0x40010800
 8001e28:	20000220 	.word	0x20000220
 8001e2c:	2000028d 	.word	0x2000028d
 8001e30:	2000028c 	.word	0x2000028c
 8001e34:	20000000 	.word	0x20000000
 8001e38:	20000288 	.word	0x20000288
 8001e3c:	200002f0 	.word	0x200002f0
 8001e40:	20000390 	.word	0x20000390
			else if (voltage < PWM_MIN) voltage = PWM_MIN;
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	bfbc      	itt	lt
 8001e48:	2300      	movlt	r3, #0
 8001e4a:	f8a8 3000 	strhlt.w	r3, [r8]
 8001e4e:	e7c0      	b.n	8001dd2 <main+0x5ea>
			HAL_GPIO_WritePin(BLM_E_GPIO_Port, BLM_E_Pin, GPIO_PIN_SET);
 8001e50:	2201      	movs	r2, #1
 8001e52:	2108      	movs	r1, #8
 8001e54:	4648      	mov	r0, r9
 8001e56:	f000 fcb7 	bl	80027c8 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	6823      	ldr	r3, [r4, #0]
 8001e5e:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8001e60:	e7bb      	b.n	8001dda <main+0x5f2>
			HAL_GPIO_WritePin(VLV1_GPIO_Port, VLV1_Pin, GPIO_PIN_SET);
 8001e62:	2201      	movs	r2, #1
 8001e64:	2104      	movs	r1, #4
 8001e66:	4838      	ldr	r0, [pc, #224]	; (8001f48 <main+0x760>)
 8001e68:	f000 fcae 	bl	80027c8 <HAL_GPIO_WritePin>
			break;
 8001e6c:	e7b5      	b.n	8001dda <main+0x5f2>
			flag_auto = 0;
 8001e6e:	2300      	movs	r3, #0
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
 8001e70:	6822      	ldr	r2, [r4, #0]
			flag_auto = 0;
 8001e72:	4936      	ldr	r1, [pc, #216]	; (8001f4c <main+0x764>)
 8001e74:	700b      	strb	r3, [r1, #0]
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
 8001e76:	6353      	str	r3, [r2, #52]	; 0x34
			HAL_GPIO_WritePin(BLM_E_GPIO_Port, BLM_E_Pin, GPIO_PIN_RESET);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2108      	movs	r1, #8
 8001e7c:	4648      	mov	r0, r9
 8001e7e:	f000 fca3 	bl	80027c8 <HAL_GPIO_WritePin>
			break;
 8001e82:	e7aa      	b.n	8001dda <main+0x5f2>
			current=atoi(num);
 8001e84:	a810      	add	r0, sp, #64	; 0x40
 8001e86:	f001 ffff 	bl	8003e88 <atoi>
 8001e8a:	b203      	sxth	r3, r0
			if (current > PWM_MAX) current = PWM_MAX;
 8001e8c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
			current=atoi(num);
 8001e90:	f8ab 3000 	strh.w	r3, [fp]
			if (current > PWM_MAX) current = PWM_MAX;
 8001e94:	db10      	blt.n	8001eb8 <main+0x6d0>
 8001e96:	f240 138f 	movw	r3, #399	; 0x18f
 8001e9a:	f8ab 3000 	strh.w	r3, [fp]
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,current);
 8001e9e:	6823      	ldr	r3, [r4, #0]
 8001ea0:	f9bb 2000 	ldrsh.w	r2, [fp]
 8001ea4:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8001ea6:	e798      	b.n	8001dda <main+0x5f2>
			PID_PRESSURE.Kd = atoi(num);
 8001ea8:	a810      	add	r0, sp, #64	; 0x40
 8001eaa:	f001 ffed 	bl	8003e88 <atoi>
 8001eae:	f7fe fef5 	bl	8000c9c <__aeabi_i2f>
 8001eb2:	4b27      	ldr	r3, [pc, #156]	; (8001f50 <main+0x768>)
 8001eb4:	6098      	str	r0, [r3, #8]
			break;
 8001eb6:	e790      	b.n	8001dda <main+0x5f2>
			else if (current < PWM_MIN) current = PWM_MIN;
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	bfbc      	itt	lt
 8001ebc:	2300      	movlt	r3, #0
 8001ebe:	f8ab 3000 	strhlt.w	r3, [fp]
 8001ec2:	e7ec      	b.n	8001e9e <main+0x6b6>
			HAL_GPIO_WritePin(BLM_SI_GPIO_Port, BLM_SI_Pin, GPIO_PIN_SET);
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	2120      	movs	r1, #32
 8001ec8:	4648      	mov	r0, r9
 8001eca:	f000 fc7d 	bl	80027c8 <HAL_GPIO_WritePin>
			break;
 8001ece:	e784      	b.n	8001dda <main+0x5f2>
			frequencyCalc=atoi(num);
 8001ed0:	a810      	add	r0, sp, #64	; 0x40
 8001ed2:	f001 ffd9 	bl	8003e88 <atoi>
 8001ed6:	f7fe fee1 	bl	8000c9c <__aeabi_i2f>
			if (frequencyCalc > FREQUENCY_MAX) frequencyCalc = FREQUENCY_MAX;
 8001eda:	491e      	ldr	r1, [pc, #120]	; (8001f54 <main+0x76c>)
			frequencyCalc=atoi(num);
 8001edc:	6030      	str	r0, [r6, #0]
 8001ede:	4605      	mov	r5, r0
			if (frequencyCalc > FREQUENCY_MAX) frequencyCalc = FREQUENCY_MAX;
 8001ee0:	f7ff f8ec 	bl	80010bc <__aeabi_fcmpgt>
 8001ee4:	b338      	cbz	r0, 8001f36 <main+0x74e>
 8001ee6:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <main+0x76c>)
 8001ee8:	6033      	str	r3, [r6, #0]
			flag_speed = 1;
 8001eea:	2301      	movs	r3, #1
 8001eec:	4a1a      	ldr	r2, [pc, #104]	; (8001f58 <main+0x770>)
 8001eee:	7013      	strb	r3, [r2, #0]
			break;
 8001ef0:	e773      	b.n	8001dda <main+0x5f2>
			HAL_GPIO_WritePin(VLV1_GPIO_Port, VLV1_Pin, GPIO_PIN_RESET);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2104      	movs	r1, #4
 8001ef6:	4814      	ldr	r0, [pc, #80]	; (8001f48 <main+0x760>)
 8001ef8:	f000 fc66 	bl	80027c8 <HAL_GPIO_WritePin>
			break;
 8001efc:	e76d      	b.n	8001dda <main+0x5f2>
			pressureCalc = atoi(num);
 8001efe:	a810      	add	r0, sp, #64	; 0x40
 8001f00:	f001 ffc2 	bl	8003e88 <atoi>
 8001f04:	f7fe feca 	bl	8000c9c <__aeabi_i2f>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	4d14      	ldr	r5, [pc, #80]	; (8001f5c <main+0x774>)
			HAL_GPIO_WritePin(BLM_E_GPIO_Port, BLM_E_Pin, GPIO_PIN_RESET);
 8001f0c:	4648      	mov	r0, r9
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2108      	movs	r1, #8
			pressureCalc = atoi(num);
 8001f12:	602b      	str	r3, [r5, #0]
			HAL_GPIO_WritePin(BLM_E_GPIO_Port, BLM_E_Pin, GPIO_PIN_RESET);
 8001f14:	f000 fc58 	bl	80027c8 <HAL_GPIO_WritePin>
			flag_auto = 1;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	4d0c      	ldr	r5, [pc, #48]	; (8001f4c <main+0x764>)
			HAL_GPIO_WritePin(VLV1_GPIO_Port, VLV1_Pin, GPIO_PIN_RESET);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2104      	movs	r1, #4
 8001f20:	4809      	ldr	r0, [pc, #36]	; (8001f48 <main+0x760>)
			flag_auto = 1;
 8001f22:	702b      	strb	r3, [r5, #0]
			HAL_GPIO_WritePin(VLV1_GPIO_Port, VLV1_Pin, GPIO_PIN_RESET);
 8001f24:	f000 fc50 	bl	80027c8 <HAL_GPIO_WritePin>
			break;
 8001f28:	e757      	b.n	8001dda <main+0x5f2>
			HAL_GPIO_WritePin(BLM_SI_GPIO_Port, BLM_SI_Pin, GPIO_PIN_RESET);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2120      	movs	r1, #32
 8001f2e:	4648      	mov	r0, r9
 8001f30:	f000 fc4a 	bl	80027c8 <HAL_GPIO_WritePin>
			break;
 8001f34:	e751      	b.n	8001dda <main+0x5f2>
			else if (frequencyCalc < -FREQUENCY_MAX) frequencyCalc = -FREQUENCY_MAX;
 8001f36:	4628      	mov	r0, r5
 8001f38:	4909      	ldr	r1, [pc, #36]	; (8001f60 <main+0x778>)
 8001f3a:	f7ff f8a1 	bl	8001080 <__aeabi_fcmplt>
 8001f3e:	2800      	cmp	r0, #0
 8001f40:	d0d3      	beq.n	8001eea <main+0x702>
 8001f42:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <main+0x778>)
 8001f44:	6033      	str	r3, [r6, #0]
 8001f46:	e7d0      	b.n	8001eea <main+0x702>
 8001f48:	40010800 	.word	0x40010800
 8001f4c:	2000021e 	.word	0x2000021e
 8001f50:	20000000 	.word	0x20000000
 8001f54:	45516000 	.word	0x45516000
 8001f58:	2000021f 	.word	0x2000021f
 8001f5c:	2000023c 	.word	0x2000023c
 8001f60:	c5516000 	.word	0xc5516000

08001f64 <sspi_receive>:
}

inline void sspi_receive(uint8_t*data, uint8_t size)
{
	uint8_t i;
	for(i=0;i<size;i++)
 8001f64:	b361      	cbz	r1, 8001fc0 <sspi_receive+0x5c>
{
 8001f66:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f6a:	f101 38ff 	add.w	r8, r1, #4294967295
 8001f6e:	fa5f f888 	uxtb.w	r8, r8
    HAL_GPIO_WritePin(SPI_SCK_GPIO_Port, SPI_SCK_Pin, 0);
 8001f72:	4f14      	ldr	r7, [pc, #80]	; (8001fc4 <sspi_receive+0x60>)
    if(HAL_GPIO_ReadPin(SPI_MISO_GPIO_Port, SPI_MISO_Pin))
 8001f74:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8001fc8 <sspi_receive+0x64>
 8001f78:	4480      	add	r8, r0
 8001f7a:	1e46      	subs	r6, r0, #1
{
 8001f7c:	2508      	movs	r5, #8
  uint8_t rdata=0;
 8001f7e:	2400      	movs	r4, #0
    HAL_GPIO_WritePin(SPI_SCK_GPIO_Port, SPI_SCK_Pin, 0);
 8001f80:	2200      	movs	r2, #0
 8001f82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f86:	4638      	mov	r0, r7
 8001f88:	f000 fc1e 	bl	80027c8 <HAL_GPIO_WritePin>
    if(HAL_GPIO_ReadPin(SPI_MISO_GPIO_Port, SPI_MISO_Pin))
 8001f8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f90:	4648      	mov	r0, r9
 8001f92:	f000 fc13 	bl	80027bc <HAL_GPIO_ReadPin>
 8001f96:	4603      	mov	r3, r0
    rdata <<= 1;
 8001f98:	0064      	lsls	r4, r4, #1
    HAL_GPIO_WritePin(SPI_SCK_GPIO_Port, SPI_SCK_Pin, 1);
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fa0:	4638      	mov	r0, r7
    rdata <<= 1;
 8001fa2:	b2e4      	uxtb	r4, r4
    if(HAL_GPIO_ReadPin(SPI_MISO_GPIO_Port, SPI_MISO_Pin))
 8001fa4:	b103      	cbz	r3, 8001fa8 <sspi_receive+0x44>
      rdata |= 0x01;
 8001fa6:	4314      	orrs	r4, r2
    HAL_GPIO_WritePin(SPI_SCK_GPIO_Port, SPI_SCK_Pin, 1);
 8001fa8:	f000 fc0e 	bl	80027c8 <HAL_GPIO_WritePin>
  for(i=0;i<8;i++)
 8001fac:	1e6b      	subs	r3, r5, #1
 8001fae:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
 8001fb2:	d1e5      	bne.n	8001f80 <sspi_receive+0x1c>
	{
		data[i] = sspi_r();
 8001fb4:	f806 4f01 	strb.w	r4, [r6, #1]!
	for(i=0;i<size;i++)
 8001fb8:	4546      	cmp	r6, r8
 8001fba:	d1df      	bne.n	8001f7c <sspi_receive+0x18>
	}
}
 8001fbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	40010800 	.word	0x40010800
 8001fc8:	40010c00 	.word	0x40010c00

08001fcc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fcc:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <HAL_MspInit+0x3c>)
{
 8001fce:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fd0:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001fd2:	490e      	ldr	r1, [pc, #56]	; (800200c <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fd4:	f042 0201 	orr.w	r2, r2, #1
 8001fd8:	619a      	str	r2, [r3, #24]
 8001fda:	699a      	ldr	r2, [r3, #24]
 8001fdc:	f002 0201 	and.w	r2, r2, #1
 8001fe0:	9200      	str	r2, [sp, #0]
 8001fe2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe4:	69da      	ldr	r2, [r3, #28]
 8001fe6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001fea:	61da      	str	r2, [r3, #28]
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	9301      	str	r3, [sp, #4]
 8001ff4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001ff6:	684b      	ldr	r3, [r1, #4]
 8001ff8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ffc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002000:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002002:	b002      	add	sp, #8
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000
 800200c:	40010000 	.word	0x40010000

08002010 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002010:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002012:	2400      	movs	r4, #0
  if(htim_base->Instance==TIM1)
 8002014:	6803      	ldr	r3, [r0, #0]
 8002016:	4a35      	ldr	r2, [pc, #212]	; (80020ec <HAL_TIM_Base_MspInit+0xdc>)
{
 8002018:	b08b      	sub	sp, #44	; 0x2c
  if(htim_base->Instance==TIM1)
 800201a:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201c:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002020:	e9cd 4408 	strd	r4, r4, [sp, #32]
  if(htim_base->Instance==TIM1)
 8002024:	d04d      	beq.n	80020c2 <HAL_TIM_Base_MspInit+0xb2>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8002026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800202a:	d004      	beq.n	8002036 <HAL_TIM_Base_MspInit+0x26>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 800202c:	4a30      	ldr	r2, [pc, #192]	; (80020f0 <HAL_TIM_Base_MspInit+0xe0>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d00e      	beq.n	8002050 <HAL_TIM_Base_MspInit+0x40>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002032:	b00b      	add	sp, #44	; 0x2c
 8002034:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002036:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800203a:	69da      	ldr	r2, [r3, #28]
 800203c:	f042 0201 	orr.w	r2, r2, #1
 8002040:	61da      	str	r2, [r3, #28]
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	9302      	str	r3, [sp, #8]
 800204a:	9b02      	ldr	r3, [sp, #8]
}
 800204c:	b00b      	add	sp, #44	; 0x2c
 800204e:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = BLM_P0A_Pin|BLM_P0B_Pin;
 8002050:	20c0      	movs	r0, #192	; 0xc0
 8002052:	2100      	movs	r1, #0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002054:	2501      	movs	r5, #1
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002056:	4b27      	ldr	r3, [pc, #156]	; (80020f4 <HAL_TIM_Base_MspInit+0xe4>)
 8002058:	69da      	ldr	r2, [r3, #28]
 800205a:	f042 0202 	orr.w	r2, r2, #2
 800205e:	61da      	str	r2, [r3, #28]
 8002060:	69da      	ldr	r2, [r3, #28]
 8002062:	f002 0202 	and.w	r2, r2, #2
 8002066:	9203      	str	r2, [sp, #12]
 8002068:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206a:	699a      	ldr	r2, [r3, #24]
 800206c:	f042 0204 	orr.w	r2, r2, #4
 8002070:	619a      	str	r2, [r3, #24]
 8002072:	699a      	ldr	r2, [r3, #24]
 8002074:	f002 0204 	and.w	r2, r2, #4
 8002078:	9204      	str	r2, [sp, #16]
 800207a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800207c:	699a      	ldr	r2, [r3, #24]
 800207e:	f042 0208 	orr.w	r2, r2, #8
 8002082:	619a      	str	r2, [r3, #24]
 8002084:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = BLM_P0A_Pin|BLM_P0B_Pin;
 8002086:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002090:	a906      	add	r1, sp, #24
 8002092:	4819      	ldr	r0, [pc, #100]	; (80020f8 <HAL_TIM_Base_MspInit+0xe8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002094:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002096:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002098:	f000 fa94 	bl	80025c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BLM_P0C_Pin;
 800209c:	2300      	movs	r3, #0
 800209e:	2201      	movs	r2, #1
    HAL_GPIO_Init(BLM_P0C_GPIO_Port, &GPIO_InitStruct);
 80020a0:	a906      	add	r1, sp, #24
 80020a2:	4816      	ldr	r0, [pc, #88]	; (80020fc <HAL_TIM_Base_MspInit+0xec>)
    GPIO_InitStruct.Pin = BLM_P0C_Pin;
 80020a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(BLM_P0C_GPIO_Port, &GPIO_InitStruct);
 80020aa:	f000 fa8b 	bl	80025c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020ae:	4622      	mov	r2, r4
 80020b0:	4621      	mov	r1, r4
 80020b2:	201d      	movs	r0, #29
 80020b4:	f000 f9bc 	bl	8002430 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020b8:	201d      	movs	r0, #29
 80020ba:	f000 f9f1 	bl	80024a0 <HAL_NVIC_EnableIRQ>
}
 80020be:	b00b      	add	sp, #44	; 0x2c
 80020c0:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020c2:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <HAL_TIM_Base_MspInit+0xe4>)
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 2, 0);
 80020c4:	4622      	mov	r2, r4
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020c6:	6998      	ldr	r0, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 2, 0);
 80020c8:	2102      	movs	r1, #2
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020ca:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 80020ce:	6198      	str	r0, [r3, #24]
 80020d0:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 2, 0);
 80020d2:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020d8:	9301      	str	r3, [sp, #4]
 80020da:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 2, 0);
 80020dc:	f000 f9a8 	bl	8002430 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80020e0:	2019      	movs	r0, #25
 80020e2:	f000 f9dd 	bl	80024a0 <HAL_NVIC_EnableIRQ>
}
 80020e6:	b00b      	add	sp, #44	; 0x2c
 80020e8:	bd30      	pop	{r4, r5, pc}
 80020ea:	bf00      	nop
 80020ec:	40012c00 	.word	0x40012c00
 80020f0:	40000400 	.word	0x40000400
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40010800 	.word	0x40010800
 80020fc:	40010c00 	.word	0x40010c00

08002100 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002100:	2300      	movs	r3, #0
{
 8002102:	b5d0      	push	{r4, r6, r7, lr}
  if(htim->Instance==TIM2)
 8002104:	6802      	ldr	r2, [r0, #0]
{
 8002106:	b086      	sub	sp, #24
  if(htim->Instance==TIM2)
 8002108:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002110:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(htim->Instance==TIM2)
 8002114:	d001      	beq.n	800211a <HAL_TIM_MspPostInit+0x1a>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002116:	b006      	add	sp, #24
 8002118:	bdd0      	pop	{r4, r6, r7, pc}
    GPIO_InitStruct.Pin = BLM_PWM_U_Pin|BLM_PWM_I_Pin;
 800211a:	2603      	movs	r6, #3
 800211c:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211e:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002120:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002124:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002128:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212a:	4808      	ldr	r0, [pc, #32]	; (800214c <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800212c:	f042 0204 	orr.w	r2, r2, #4
 8002130:	619a      	str	r2, [r3, #24]
 8002132:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002134:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002136:	f003 0304 	and.w	r3, r3, #4
 800213a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = BLM_PWM_U_Pin|BLM_PWM_I_Pin;
 800213c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002140:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002142:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002144:	f000 fa3e 	bl	80025c4 <HAL_GPIO_Init>
}
 8002148:	b006      	add	sp, #24
 800214a:	bdd0      	pop	{r4, r6, r7, pc}
 800214c:	40010800 	.word	0x40010800

08002150 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002150:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002152:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8002154:	6802      	ldr	r2, [r0, #0]
 8002156:	4b20      	ldr	r3, [pc, #128]	; (80021d8 <HAL_UART_MspInit+0x88>)
{
 8002158:	b087      	sub	sp, #28
  if(huart->Instance==USART1)
 800215a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8002160:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(huart->Instance==USART1)
 8002164:	d001      	beq.n	800216a <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002166:	b007      	add	sp, #28
 8002168:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800216a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800216e:	2102      	movs	r1, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002170:	2503      	movs	r5, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 8002172:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002176:	699a      	ldr	r2, [r3, #24]
 8002178:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800217c:	619a      	str	r2, [r3, #24]
 800217e:	699a      	ldr	r2, [r3, #24]
 8002180:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002184:	9200      	str	r2, [sp, #0]
 8002186:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002188:	699a      	ldr	r2, [r3, #24]
 800218a:	f042 0204 	orr.w	r2, r2, #4
 800218e:	619a      	str	r2, [r3, #24]
 8002190:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002192:	e9cd 0102 	strd	r0, r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002196:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219e:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a0:	a902      	add	r1, sp, #8
 80021a2:	f500 3083 	add.w	r0, r0, #67072	; 0x10600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021a8:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021aa:	f000 fa0b 	bl	80025c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021ae:	2300      	movs	r3, #0
 80021b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b4:	a902      	add	r1, sp, #8
 80021b6:	4809      	ldr	r0, [pc, #36]	; (80021dc <HAL_UART_MspInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021be:	f000 fa01 	bl	80025c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80021c2:	4622      	mov	r2, r4
 80021c4:	2101      	movs	r1, #1
 80021c6:	2025      	movs	r0, #37	; 0x25
 80021c8:	f000 f932 	bl	8002430 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021cc:	2025      	movs	r0, #37	; 0x25
 80021ce:	f000 f967 	bl	80024a0 <HAL_NVIC_EnableIRQ>
}
 80021d2:	b007      	add	sp, #28
 80021d4:	bd30      	pop	{r4, r5, pc}
 80021d6:	bf00      	nop
 80021d8:	40013800 	.word	0x40013800
 80021dc:	40010800 	.word	0x40010800

080021e0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021e0:	e7fe      	b.n	80021e0 <NMI_Handler>
 80021e2:	bf00      	nop

080021e4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021e4:	e7fe      	b.n	80021e4 <HardFault_Handler>
 80021e6:	bf00      	nop

080021e8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021e8:	e7fe      	b.n	80021e8 <MemManage_Handler>
 80021ea:	bf00      	nop

080021ec <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ec:	e7fe      	b.n	80021ec <BusFault_Handler>
 80021ee:	bf00      	nop

080021f0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021f0:	e7fe      	b.n	80021f0 <UsageFault_Handler>
 80021f2:	bf00      	nop

080021f4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop

080021f8 <DebugMon_Handler>:
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop

080021fc <PendSV_Handler>:
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop

08002200 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002200:	f000 b8e0 	b.w	80023c4 <HAL_IncTick>

08002204 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLM_ER_Pin);
 8002204:	2010      	movs	r0, #16
 8002206:	f000 bae3 	b.w	80027d0 <HAL_GPIO_EXTI_IRQHandler>
 800220a:	bf00      	nop

0800220c <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800220c:	4801      	ldr	r0, [pc, #4]	; (8002214 <TIM1_UP_IRQHandler+0x8>)
 800220e:	f001 baab 	b.w	8003768 <HAL_TIM_IRQHandler>
 8002212:	bf00      	nop
 8002214:	20000328 	.word	0x20000328

08002218 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002218:	4801      	ldr	r0, [pc, #4]	; (8002220 <TIM3_IRQHandler+0x8>)
 800221a:	f001 baa5 	b.w	8003768 <HAL_TIM_IRQHandler>
 800221e:	bf00      	nop
 8002220:	20000240 	.word	0x20000240

08002224 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002224:	4801      	ldr	r0, [pc, #4]	; (800222c <USART1_IRQHandler+0x8>)
 8002226:	f001 bd01 	b.w	8003c2c <HAL_UART_IRQHandler>
 800222a:	bf00      	nop
 800222c:	200002ac 	.word	0x200002ac

08002230 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002230:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW0_Pin);
 8002232:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002236:	f000 facb 	bl	80027d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800223a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 800223e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002242:	f000 bac5 	b.w	80027d0 <HAL_GPIO_EXTI_IRQHandler>
 8002246:	bf00      	nop

08002248 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002248:	2001      	movs	r0, #1
 800224a:	4770      	bx	lr

0800224c <_kill>:

int _kill(int pid, int sig)
{
 800224c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800224e:	f001 fe1f 	bl	8003e90 <__errno>
 8002252:	2216      	movs	r2, #22
 8002254:	4603      	mov	r3, r0
	return -1;
}
 8002256:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 800225a:	601a      	str	r2, [r3, #0]
}
 800225c:	bd08      	pop	{r3, pc}
 800225e:	bf00      	nop

08002260 <_exit>:

void _exit (int status)
{
 8002260:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002262:	f001 fe15 	bl	8003e90 <__errno>
 8002266:	2316      	movs	r3, #22
 8002268:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800226a:	e7fe      	b.n	800226a <_exit+0xa>

0800226c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800226c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800226e:	1e16      	subs	r6, r2, #0
 8002270:	dd07      	ble.n	8002282 <_read+0x16>
 8002272:	460c      	mov	r4, r1
 8002274:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8002276:	f3af 8000 	nop.w
 800227a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800227e:	42a5      	cmp	r5, r4
 8002280:	d1f9      	bne.n	8002276 <_read+0xa>
	}

return len;
}
 8002282:	4630      	mov	r0, r6
 8002284:	bd70      	pop	{r4, r5, r6, pc}
 8002286:	bf00      	nop

08002288 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002288:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800228a:	1e16      	subs	r6, r2, #0
 800228c:	dd07      	ble.n	800229e <_write+0x16>
 800228e:	460c      	mov	r4, r1
 8002290:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8002292:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002296:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229a:	42ac      	cmp	r4, r5
 800229c:	d1f9      	bne.n	8002292 <_write+0xa>
	}
	return len;
}
 800229e:	4630      	mov	r0, r6
 80022a0:	bd70      	pop	{r4, r5, r6, pc}
 80022a2:	bf00      	nop

080022a4 <_close>:

int _close(int file)
{
	return -1;
}
 80022a4:	f04f 30ff 	mov.w	r0, #4294967295
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop

080022ac <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80022ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80022b0:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80022b2:	604b      	str	r3, [r1, #4]
}
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop

080022b8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80022b8:	2001      	movs	r0, #1
 80022ba:	4770      	bx	lr

080022bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80022bc:	2000      	movs	r0, #0
 80022be:	4770      	bx	lr

080022c0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022c0:	490d      	ldr	r1, [pc, #52]	; (80022f8 <_sbrk+0x38>)
{
 80022c2:	4603      	mov	r3, r0
 80022c4:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022c6:	4a0d      	ldr	r2, [pc, #52]	; (80022fc <_sbrk+0x3c>)
 80022c8:	4c0d      	ldr	r4, [pc, #52]	; (8002300 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 80022ca:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022cc:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80022ce:	b120      	cbz	r0, 80022da <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022d0:	4403      	add	r3, r0
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d807      	bhi.n	80022e6 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80022d6:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 80022d8:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80022da:	4c0a      	ldr	r4, [pc, #40]	; (8002304 <_sbrk+0x44>)
 80022dc:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 80022de:	4403      	add	r3, r0
 80022e0:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 80022e2:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80022e4:	d9f7      	bls.n	80022d6 <_sbrk+0x16>
    errno = ENOMEM;
 80022e6:	f001 fdd3 	bl	8003e90 <__errno>
 80022ea:	220c      	movs	r2, #12
 80022ec:	4603      	mov	r3, r0
    return (void *)-1;
 80022ee:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 80022f2:	601a      	str	r2, [r3, #0]
}
 80022f4:	bd10      	pop	{r4, pc}
 80022f6:	bf00      	nop
 80022f8:	20000230 	.word	0x20000230
 80022fc:	20002800 	.word	0x20002800
 8002300:	00000400 	.word	0x00000400
 8002304:	200003f0 	.word	0x200003f0

08002308 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop

0800230c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800230c:	480c      	ldr	r0, [pc, #48]	; (8002340 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800230e:	490d      	ldr	r1, [pc, #52]	; (8002344 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002310:	4a0d      	ldr	r2, [pc, #52]	; (8002348 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002314:	e002      	b.n	800231c <LoopCopyDataInit>

08002316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800231a:	3304      	adds	r3, #4

0800231c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800231c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800231e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002320:	d3f9      	bcc.n	8002316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002322:	4a0a      	ldr	r2, [pc, #40]	; (800234c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002324:	4c0a      	ldr	r4, [pc, #40]	; (8002350 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002328:	e001      	b.n	800232e <LoopFillZerobss>

0800232a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800232a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800232c:	3204      	adds	r2, #4

0800232e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800232e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002330:	d3fb      	bcc.n	800232a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002332:	f7ff ffe9 	bl	8002308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002336:	f001 fdb1 	bl	8003e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800233a:	f7ff fa55 	bl	80017e8 <main>
  bx lr
 800233e:	4770      	bx	lr
  ldr r0, =_sdata
 8002340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002344:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002348:	0800719c 	.word	0x0800719c
  ldr r2, =_sbss
 800234c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002350:	200003f0 	.word	0x200003f0

08002354 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002354:	e7fe      	b.n	8002354 <ADC1_2_IRQHandler>
	...

08002358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002358:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800235a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800235e:	4a0d      	ldr	r2, [pc, #52]	; (8002394 <HAL_InitTick+0x3c>)
{
 8002360:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002362:	7811      	ldrb	r1, [r2, #0]
 8002364:	4a0c      	ldr	r2, [pc, #48]	; (8002398 <HAL_InitTick+0x40>)
 8002366:	fbb3 f3f1 	udiv	r3, r3, r1
 800236a:	6812      	ldr	r2, [r2, #0]
 800236c:	fbb2 f0f3 	udiv	r0, r2, r3
 8002370:	f000 f8a4 	bl	80024bc <HAL_SYSTICK_Config>
 8002374:	b908      	cbnz	r0, 800237a <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002376:	2d0f      	cmp	r5, #15
 8002378:	d901      	bls.n	800237e <HAL_InitTick+0x26>
    return HAL_ERROR;
 800237a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800237c:	bd38      	pop	{r3, r4, r5, pc}
 800237e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002380:	4602      	mov	r2, r0
 8002382:	4629      	mov	r1, r5
 8002384:	f04f 30ff 	mov.w	r0, #4294967295
 8002388:	f000 f852 	bl	8002430 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800238c:	4b03      	ldr	r3, [pc, #12]	; (800239c <HAL_InitTick+0x44>)
 800238e:	4620      	mov	r0, r4
 8002390:	601d      	str	r5, [r3, #0]
}
 8002392:	bd38      	pop	{r3, r4, r5, pc}
 8002394:	20000014 	.word	0x20000014
 8002398:	20000010 	.word	0x20000010
 800239c:	20000018 	.word	0x20000018

080023a0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023a0:	4a07      	ldr	r2, [pc, #28]	; (80023c0 <HAL_Init+0x20>)
{
 80023a2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023a4:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023a8:	f043 0310 	orr.w	r3, r3, #16
 80023ac:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023ae:	f000 f82d 	bl	800240c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80023b2:	200f      	movs	r0, #15
 80023b4:	f7ff ffd0 	bl	8002358 <HAL_InitTick>
  HAL_MspInit();
 80023b8:	f7ff fe08 	bl	8001fcc <HAL_MspInit>
}
 80023bc:	2000      	movs	r0, #0
 80023be:	bd08      	pop	{r3, pc}
 80023c0:	40022000 	.word	0x40022000

080023c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80023c4:	4a03      	ldr	r2, [pc, #12]	; (80023d4 <HAL_IncTick+0x10>)
 80023c6:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <HAL_IncTick+0x14>)
 80023c8:	6811      	ldr	r1, [r2, #0]
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	440b      	add	r3, r1
 80023ce:	6013      	str	r3, [r2, #0]
}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	200003dc 	.word	0x200003dc
 80023d8:	20000014 	.word	0x20000014

080023dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80023dc:	4b01      	ldr	r3, [pc, #4]	; (80023e4 <HAL_GetTick+0x8>)
 80023de:	6818      	ldr	r0, [r3, #0]
}
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	200003dc 	.word	0x200003dc

080023e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023e8:	b538      	push	{r3, r4, r5, lr}
 80023ea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80023ec:	f7ff fff6 	bl	80023dc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023f0:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80023f2:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80023f4:	d002      	beq.n	80023fc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80023f6:	4b04      	ldr	r3, [pc, #16]	; (8002408 <HAL_Delay+0x20>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023fc:	f7ff ffee 	bl	80023dc <HAL_GetTick>
 8002400:	1b40      	subs	r0, r0, r5
 8002402:	42a0      	cmp	r0, r4
 8002404:	d3fa      	bcc.n	80023fc <HAL_Delay+0x14>
  {
  }
}
 8002406:	bd38      	pop	{r3, r4, r5, pc}
 8002408:	20000014 	.word	0x20000014

0800240c <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800240c:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002410:	4a06      	ldr	r2, [pc, #24]	; (800242c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002412:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002414:	68d0      	ldr	r0, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002416:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800241a:	4008      	ands	r0, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800241c:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800241e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002422:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002426:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002430:	4b19      	ldr	r3, [pc, #100]	; (8002498 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002432:	b430      	push	{r4, r5}
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800243a:	f1c3 0507 	rsb	r5, r3, #7
 800243e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002440:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002444:	bf28      	it	cs
 8002446:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002448:	2c06      	cmp	r4, #6
 800244a:	d919      	bls.n	8002480 <HAL_NVIC_SetPriority+0x50>
 800244c:	f04f 34ff 	mov.w	r4, #4294967295
 8002450:	3b03      	subs	r3, #3
 8002452:	409c      	lsls	r4, r3
 8002454:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002458:	f04f 34ff 	mov.w	r4, #4294967295
 800245c:	40ac      	lsls	r4, r5
 800245e:	ea21 0104 	bic.w	r1, r1, r4
 8002462:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002464:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002466:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800246a:	db0c      	blt.n	8002486 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246c:	0109      	lsls	r1, r1, #4
 800246e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002472:	b2c9      	uxtb	r1, r1
 8002474:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002478:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800247c:	bc30      	pop	{r4, r5}
 800247e:	4770      	bx	lr
 8002480:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002482:	4613      	mov	r3, r2
 8002484:	e7e8      	b.n	8002458 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002486:	4b05      	ldr	r3, [pc, #20]	; (800249c <HAL_NVIC_SetPriority+0x6c>)
 8002488:	f000 000f 	and.w	r0, r0, #15
 800248c:	0109      	lsls	r1, r1, #4
 800248e:	b2c9      	uxtb	r1, r1
 8002490:	4403      	add	r3, r0
 8002492:	7619      	strb	r1, [r3, #24]
 8002494:	bc30      	pop	{r4, r5}
 8002496:	4770      	bx	lr
 8002498:	e000ed00 	.word	0xe000ed00
 800249c:	e000ecfc 	.word	0xe000ecfc

080024a0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80024a0:	2800      	cmp	r0, #0
 80024a2:	db07      	blt.n	80024b4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a4:	2301      	movs	r3, #1
 80024a6:	f000 011f 	and.w	r1, r0, #31
 80024aa:	4a03      	ldr	r2, [pc, #12]	; (80024b8 <HAL_NVIC_EnableIRQ+0x18>)
 80024ac:	408b      	lsls	r3, r1
 80024ae:	0940      	lsrs	r0, r0, #5
 80024b0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	e000e100 	.word	0xe000e100

080024bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024bc:	3801      	subs	r0, #1
 80024be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80024c2:	d20d      	bcs.n	80024e0 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024c4:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c6:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c8:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ca:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024cc:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ce:	4c06      	ldr	r4, [pc, #24]	; (80024e8 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024d0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d2:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d6:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 80024d8:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024da:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024dc:	6019      	str	r1, [r3, #0]
 80024de:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80024e0:	2001      	movs	r0, #1
 80024e2:	4770      	bx	lr
 80024e4:	e000e010 	.word	0xe000e010
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024ec:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 80024f0:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024f2:	2a02      	cmp	r2, #2
 80024f4:	d006      	beq.n	8002504 <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024f6:	2104      	movs	r1, #4
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024f8:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024fa:	6381      	str	r1, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80024fc:	f880 2020 	strb.w	r2, [r0, #32]
    
    return HAL_ERROR;
 8002500:	2001      	movs	r0, #1

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
  
  return status; 
}
 8002502:	4770      	bx	lr
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002504:	2101      	movs	r1, #1
{
 8002506:	b470      	push	{r4, r5, r6}
  __HAL_UNLOCK(hdma);      
 8002508:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800250c:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800250e:	6c1e      	ldr	r6, [r3, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002510:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002512:	40b1      	lsls	r1, r6
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002514:	f024 040e 	bic.w	r4, r4, #14
 8002518:	6014      	str	r4, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800251a:	6814      	ldr	r4, [r2, #0]
  return status; 
 800251c:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 800251e:	f024 0401 	bic.w	r4, r4, #1
 8002522:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002524:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002526:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hdma);      
 8002528:	841d      	strh	r5, [r3, #32]
}
 800252a:	bc70      	pop	{r4, r5, r6}
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop

08002530 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002530:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{  
 8002534:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002536:	2a02      	cmp	r2, #2
 8002538:	d003      	beq.n	8002542 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800253a:	2204      	movs	r2, #4
        
    status = HAL_ERROR;
 800253c:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800253e:	639a      	str	r2, [r3, #56]	; 0x38
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8002540:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002542:	6802      	ldr	r2, [r0, #0]
{  
 8002544:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002546:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002548:	481b      	ldr	r0, [pc, #108]	; (80025b8 <HAL_DMA_Abort_IT+0x88>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800254a:	f021 010e 	bic.w	r1, r1, #14
 800254e:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002550:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002552:	4282      	cmp	r2, r0
    __HAL_DMA_DISABLE(hdma);
 8002554:	f021 0101 	bic.w	r1, r1, #1
 8002558:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800255a:	d021      	beq.n	80025a0 <HAL_DMA_Abort_IT+0x70>
 800255c:	4917      	ldr	r1, [pc, #92]	; (80025bc <HAL_DMA_Abort_IT+0x8c>)
 800255e:	428a      	cmp	r2, r1
 8002560:	d01a      	beq.n	8002598 <HAL_DMA_Abort_IT+0x68>
 8002562:	3114      	adds	r1, #20
 8002564:	428a      	cmp	r2, r1
 8002566:	d01d      	beq.n	80025a4 <HAL_DMA_Abort_IT+0x74>
 8002568:	3114      	adds	r1, #20
 800256a:	428a      	cmp	r2, r1
 800256c:	d01d      	beq.n	80025aa <HAL_DMA_Abort_IT+0x7a>
 800256e:	3114      	adds	r1, #20
 8002570:	428a      	cmp	r2, r1
 8002572:	d01d      	beq.n	80025b0 <HAL_DMA_Abort_IT+0x80>
 8002574:	3114      	adds	r1, #20
 8002576:	428a      	cmp	r2, r1
 8002578:	bf0c      	ite	eq
 800257a:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 800257e:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
    __HAL_UNLOCK(hdma);
 8002582:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002586:	4c0e      	ldr	r4, [pc, #56]	; (80025c0 <HAL_DMA_Abort_IT+0x90>)
    if(hdma->XferAbortCallback != NULL)
 8002588:	6b59      	ldr	r1, [r3, #52]	; 0x34
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800258a:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 800258c:	8418      	strh	r0, [r3, #32]
    if(hdma->XferAbortCallback != NULL)
 800258e:	b129      	cbz	r1, 800259c <HAL_DMA_Abort_IT+0x6c>
      hdma->XferAbortCallback(hdma);
 8002590:	4618      	mov	r0, r3
 8002592:	4788      	blx	r1
  HAL_StatusTypeDef status = HAL_OK;
 8002594:	2000      	movs	r0, #0
}
 8002596:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002598:	2210      	movs	r2, #16
 800259a:	e7f2      	b.n	8002582 <HAL_DMA_Abort_IT+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 800259c:	4608      	mov	r0, r1
}
 800259e:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80025a0:	2201      	movs	r2, #1
 80025a2:	e7ee      	b.n	8002582 <HAL_DMA_Abort_IT+0x52>
 80025a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025a8:	e7eb      	b.n	8002582 <HAL_DMA_Abort_IT+0x52>
 80025aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025ae:	e7e8      	b.n	8002582 <HAL_DMA_Abort_IT+0x52>
 80025b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025b4:	e7e5      	b.n	8002582 <HAL_DMA_Abort_IT+0x52>
 80025b6:	bf00      	nop
 80025b8:	40020008 	.word	0x40020008
 80025bc:	4002001c 	.word	0x4002001c
 80025c0:	40020000 	.word	0x40020000

080025c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025c8:	680c      	ldr	r4, [r1, #0]
{
 80025ca:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025cc:	2c00      	cmp	r4, #0
 80025ce:	f000 809a 	beq.w	8002706 <HAL_GPIO_Init+0x142>
  uint32_t config = 0x00u;
 80025d2:	2600      	movs	r6, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025d4:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 80027ac <HAL_GPIO_Init+0x1e8>
  uint32_t position = 0x00u;
 80025d8:	4633      	mov	r3, r6
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025da:	4f6f      	ldr	r7, [pc, #444]	; (8002798 <HAL_GPIO_Init+0x1d4>)
      switch (GPIO_Init->Mode)
 80025dc:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 80027b0 <HAL_GPIO_Init+0x1ec>
 80025e0:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 80027b4 <HAL_GPIO_Init+0x1f0>
 80025e4:	9000      	str	r0, [sp, #0]
 80025e6:	e004      	b.n	80025f2 <HAL_GPIO_Init+0x2e>
        }
      }
    }

	position++;
 80025e8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ea:	fa34 f203 	lsrs.w	r2, r4, r3
 80025ee:	f000 808a 	beq.w	8002706 <HAL_GPIO_Init+0x142>
    ioposition = (0x01uL << position);
 80025f2:	2201      	movs	r2, #1
 80025f4:	409a      	lsls	r2, r3
    if (iocurrent == ioposition)
 80025f6:	ea32 0004 	bics.w	r0, r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025fa:	ea02 0504 	and.w	r5, r2, r4
    if (iocurrent == ioposition)
 80025fe:	d1f3      	bne.n	80025e8 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 8002600:	684c      	ldr	r4, [r1, #4]
 8002602:	2c12      	cmp	r4, #18
 8002604:	f200 8082 	bhi.w	800270c <HAL_GPIO_Init+0x148>
 8002608:	2c12      	cmp	r4, #18
 800260a:	d80c      	bhi.n	8002626 <HAL_GPIO_Init+0x62>
 800260c:	e8df f004 	tbb	[pc, r4]
 8002610:	0ab6b986 	.word	0x0ab6b986
 8002614:	0b0b0b0b 	.word	0x0b0b0b0b
 8002618:	0b0b0b0b 	.word	0x0b0b0b0b
 800261c:	0b0b0b0b 	.word	0x0b0b0b0b
 8002620:	b30b      	.short	0xb30b
 8002622:	b0          	.byte	0xb0
 8002623:	00          	.byte	0x00
 8002624:	2600      	movs	r6, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002626:	2dff      	cmp	r5, #255	; 0xff
 8002628:	d87e      	bhi.n	8002728 <HAL_GPIO_Init+0x164>
 800262a:	f8dd 9000 	ldr.w	r9, [sp]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800262e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002632:	240f      	movs	r4, #15
 8002634:	f8d9 2000 	ldr.w	r2, [r9]
 8002638:	fa04 fb0a 	lsl.w	fp, r4, sl
 800263c:	ea22 020b 	bic.w	r2, r2, fp
 8002640:	fa06 fa0a 	lsl.w	sl, r6, sl
 8002644:	ea42 020a 	orr.w	r2, r2, sl
 8002648:	f8c9 2000 	str.w	r2, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800264c:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8002650:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 8002654:	f000 808a 	beq.w	800276c <HAL_GPIO_Init+0x1a8>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002658:	f8dc a018 	ldr.w	sl, [ip, #24]
 800265c:	f023 0203 	bic.w	r2, r3, #3
 8002660:	f04a 0a01 	orr.w	sl, sl, #1
 8002664:	f8cc a018 	str.w	sl, [ip, #24]
 8002668:	f8dc a018 	ldr.w	sl, [ip, #24]
 800266c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002670:	f00a 0a01 	and.w	sl, sl, #1
 8002674:	f8cd a00c 	str.w	sl, [sp, #12]
 8002678:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800267c:	f003 0a03 	and.w	sl, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002680:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002684:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002688:	f8d2 b008 	ldr.w	fp, [r2, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800268c:	fa04 f40a 	lsl.w	r4, r4, sl
 8002690:	ea2b 0004 	bic.w	r0, fp, r4
 8002694:	9001      	str	r0, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002696:	9c00      	ldr	r4, [sp, #0]
 8002698:	4840      	ldr	r0, [pc, #256]	; (800279c <HAL_GPIO_Init+0x1d8>)
 800269a:	4284      	cmp	r4, r0
 800269c:	d010      	beq.n	80026c0 <HAL_GPIO_Init+0xfc>
 800269e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80026a2:	4284      	cmp	r4, r0
 80026a4:	d06f      	beq.n	8002786 <HAL_GPIO_Init+0x1c2>
 80026a6:	483e      	ldr	r0, [pc, #248]	; (80027a0 <HAL_GPIO_Init+0x1dc>)
 80026a8:	4284      	cmp	r4, r0
 80026aa:	bf0c      	ite	eq
 80026ac:	f04f 0b02 	moveq.w	fp, #2
 80026b0:	f04f 0b03 	movne.w	fp, #3
 80026b4:	9801      	ldr	r0, [sp, #4]
 80026b6:	fa0b fa0a 	lsl.w	sl, fp, sl
 80026ba:	ea40 000a 	orr.w	r0, r0, sl
 80026be:	9001      	str	r0, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 80026c0:	9801      	ldr	r0, [sp, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026c2:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        AFIO->EXTICR[position >> 2u] = temp;
 80026c6:	6090      	str	r0, [r2, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	bf14      	ite	ne
 80026cc:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026ce:	43aa      	biceq	r2, r5
 80026d0:	603a      	str	r2, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80026d2:	687a      	ldr	r2, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026d4:	f419 3f00 	tst.w	r9, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80026d8:	bf14      	ite	ne
 80026da:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026dc:	43aa      	biceq	r2, r5
 80026de:	607a      	str	r2, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80026e0:	68ba      	ldr	r2, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026e2:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80026e6:	bf14      	ite	ne
 80026e8:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026ea:	43aa      	biceq	r2, r5
 80026ec:	60ba      	str	r2, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026ee:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80026f2:	68fa      	ldr	r2, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026f4:	d037      	beq.n	8002766 <HAL_GPIO_Init+0x1a2>
          SET_BIT(EXTI->FTSR, iocurrent);
 80026f6:	4315      	orrs	r5, r2
 80026f8:	60fd      	str	r5, [r7, #12]
 80026fa:	680c      	ldr	r4, [r1, #0]
	position++;
 80026fc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026fe:	fa34 f203 	lsrs.w	r2, r4, r3
 8002702:	f47f af76 	bne.w	80025f2 <HAL_GPIO_Init+0x2e>
  }
}
 8002706:	b005      	add	sp, #20
 8002708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800270c:	4544      	cmp	r4, r8
 800270e:	d005      	beq.n	800271c <HAL_GPIO_Init+0x158>
 8002710:	d912      	bls.n	8002738 <HAL_GPIO_Init+0x174>
 8002712:	4574      	cmp	r4, lr
 8002714:	d002      	beq.n	800271c <HAL_GPIO_Init+0x158>
 8002716:	4823      	ldr	r0, [pc, #140]	; (80027a4 <HAL_GPIO_Init+0x1e0>)
 8002718:	4284      	cmp	r4, r0
 800271a:	d184      	bne.n	8002626 <HAL_GPIO_Init+0x62>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800271c:	688c      	ldr	r4, [r1, #8]
 800271e:	b9d4      	cbnz	r4, 8002756 <HAL_GPIO_Init+0x192>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002720:	2dff      	cmp	r5, #255	; 0xff
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002722:	f04f 0604 	mov.w	r6, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002726:	d980      	bls.n	800262a <HAL_GPIO_Init+0x66>
 8002728:	9a00      	ldr	r2, [sp, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800272a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800272e:	f1aa 0a20 	sub.w	sl, sl, #32
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002732:	f102 0904 	add.w	r9, r2, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002736:	e77c      	b.n	8002632 <HAL_GPIO_Init+0x6e>
      switch (GPIO_Init->Mode)
 8002738:	481b      	ldr	r0, [pc, #108]	; (80027a8 <HAL_GPIO_Init+0x1e4>)
 800273a:	4284      	cmp	r4, r0
 800273c:	d0ee      	beq.n	800271c <HAL_GPIO_Init+0x158>
 800273e:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80027b8 <HAL_GPIO_Init+0x1f4>
 8002742:	454c      	cmp	r4, r9
 8002744:	d0ea      	beq.n	800271c <HAL_GPIO_Init+0x158>
 8002746:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800274a:	454c      	cmp	r4, r9
 800274c:	f47f af6b 	bne.w	8002626 <HAL_GPIO_Init+0x62>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002750:	688c      	ldr	r4, [r1, #8]
 8002752:	2c00      	cmp	r4, #0
 8002754:	d0e4      	beq.n	8002720 <HAL_GPIO_Init+0x15c>
            GPIOx->BSRR = ioposition;
 8002756:	9800      	ldr	r0, [sp, #0]
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002758:	2c01      	cmp	r4, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800275a:	f04f 0608 	mov.w	r6, #8
            GPIOx->BSRR = ioposition;
 800275e:	bf0c      	ite	eq
 8002760:	6102      	streq	r2, [r0, #16]
            GPIOx->BRR = ioposition;
 8002762:	6142      	strne	r2, [r0, #20]
 8002764:	e75f      	b.n	8002626 <HAL_GPIO_Init+0x62>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002766:	ea22 0505 	bic.w	r5, r2, r5
 800276a:	60fd      	str	r5, [r7, #12]
 800276c:	680c      	ldr	r4, [r1, #0]
 800276e:	e73b      	b.n	80025e8 <HAL_GPIO_Init+0x24>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002770:	68ce      	ldr	r6, [r1, #12]
 8002772:	360c      	adds	r6, #12
          break;
 8002774:	e757      	b.n	8002626 <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002776:	68ce      	ldr	r6, [r1, #12]
 8002778:	3604      	adds	r6, #4
          break;
 800277a:	e754      	b.n	8002626 <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800277c:	68ce      	ldr	r6, [r1, #12]
 800277e:	3608      	adds	r6, #8
          break;
 8002780:	e751      	b.n	8002626 <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002782:	68ce      	ldr	r6, [r1, #12]
          break;
 8002784:	e74f      	b.n	8002626 <HAL_GPIO_Init+0x62>
 8002786:	f04f 0b01 	mov.w	fp, #1
 800278a:	9801      	ldr	r0, [sp, #4]
 800278c:	fa0b fa0a 	lsl.w	sl, fp, sl
 8002790:	ea40 000a 	orr.w	r0, r0, sl
 8002794:	9001      	str	r0, [sp, #4]
 8002796:	e793      	b.n	80026c0 <HAL_GPIO_Init+0xfc>
 8002798:	40010400 	.word	0x40010400
 800279c:	40010800 	.word	0x40010800
 80027a0:	40011000 	.word	0x40011000
 80027a4:	10320000 	.word	0x10320000
 80027a8:	10120000 	.word	0x10120000
 80027ac:	40021000 	.word	0x40021000
 80027b0:	10220000 	.word	0x10220000
 80027b4:	10310000 	.word	0x10310000
 80027b8:	10210000 	.word	0x10210000

080027bc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027bc:	6883      	ldr	r3, [r0, #8]
 80027be:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80027c0:	bf14      	ite	ne
 80027c2:	2001      	movne	r0, #1
 80027c4:	2000      	moveq	r0, #0
 80027c6:	4770      	bx	lr

080027c8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027c8:	b902      	cbnz	r2, 80027cc <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027ca:	0409      	lsls	r1, r1, #16
 80027cc:	6101      	str	r1, [r0, #16]
  }
}
 80027ce:	4770      	bx	lr

080027d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027d0:	4a04      	ldr	r2, [pc, #16]	; (80027e4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80027d2:	6951      	ldr	r1, [r2, #20]
 80027d4:	4201      	tst	r1, r0
 80027d6:	d100      	bne.n	80027da <HAL_GPIO_EXTI_IRQHandler+0xa>
 80027d8:	4770      	bx	lr
{
 80027da:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027dc:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027de:	f7fe ff29 	bl	8001634 <HAL_GPIO_EXTI_Callback>
  }
}
 80027e2:	bd08      	pop	{r3, pc}
 80027e4:	40010400 	.word	0x40010400

080027e8 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027e8:	2800      	cmp	r0, #0
 80027ea:	f000 81c3 	beq.w	8002b74 <HAL_RCC_OscConfig+0x38c>
{
 80027ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027f2:	6803      	ldr	r3, [r0, #0]
 80027f4:	4604      	mov	r4, r0
 80027f6:	07dd      	lsls	r5, r3, #31
{
 80027f8:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027fa:	d535      	bpl.n	8002868 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027fc:	49a6      	ldr	r1, [pc, #664]	; (8002a98 <HAL_RCC_OscConfig+0x2b0>)
 80027fe:	684a      	ldr	r2, [r1, #4]
 8002800:	f002 020c 	and.w	r2, r2, #12
 8002804:	2a04      	cmp	r2, #4
 8002806:	f000 80ef 	beq.w	80029e8 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800280a:	684a      	ldr	r2, [r1, #4]
 800280c:	f002 020c 	and.w	r2, r2, #12
 8002810:	2a08      	cmp	r2, #8
 8002812:	f000 80e5 	beq.w	80029e0 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002816:	6863      	ldr	r3, [r4, #4]
 8002818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800281c:	d010      	beq.n	8002840 <HAL_RCC_OscConfig+0x58>
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 810d 	beq.w	8002a3e <HAL_RCC_OscConfig+0x256>
 8002824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002828:	f000 818f 	beq.w	8002b4a <HAL_RCC_OscConfig+0x362>
 800282c:	4b9a      	ldr	r3, [pc, #616]	; (8002a98 <HAL_RCC_OscConfig+0x2b0>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	e004      	b.n	800284a <HAL_RCC_OscConfig+0x62>
 8002840:	4a95      	ldr	r2, [pc, #596]	; (8002a98 <HAL_RCC_OscConfig+0x2b0>)
 8002842:	6813      	ldr	r3, [r2, #0]
 8002844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002848:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284a:	f7ff fdc7 	bl	80023dc <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284e:	4e92      	ldr	r6, [pc, #584]	; (8002a98 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8002850:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002852:	e005      	b.n	8002860 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002854:	f7ff fdc2 	bl	80023dc <HAL_GetTick>
 8002858:	1b40      	subs	r0, r0, r5
 800285a:	2864      	cmp	r0, #100	; 0x64
 800285c:	f200 80eb 	bhi.w	8002a36 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002860:	6833      	ldr	r3, [r6, #0]
 8002862:	039a      	lsls	r2, r3, #14
 8002864:	d5f6      	bpl.n	8002854 <HAL_RCC_OscConfig+0x6c>
 8002866:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002868:	079f      	lsls	r7, r3, #30
 800286a:	d528      	bpl.n	80028be <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800286c:	4a8a      	ldr	r2, [pc, #552]	; (8002a98 <HAL_RCC_OscConfig+0x2b0>)
 800286e:	6851      	ldr	r1, [r2, #4]
 8002870:	f011 0f0c 	tst.w	r1, #12
 8002874:	f000 808e 	beq.w	8002994 <HAL_RCC_OscConfig+0x1ac>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002878:	6851      	ldr	r1, [r2, #4]
 800287a:	f001 010c 	and.w	r1, r1, #12
 800287e:	2908      	cmp	r1, #8
 8002880:	f000 8084 	beq.w	800298c <HAL_RCC_OscConfig+0x1a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002884:	6923      	ldr	r3, [r4, #16]
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 8125 	beq.w	8002ad6 <HAL_RCC_OscConfig+0x2ee>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800288c:	2201      	movs	r2, #1
 800288e:	4b83      	ldr	r3, [pc, #524]	; (8002a9c <HAL_RCC_OscConfig+0x2b4>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002890:	4e81      	ldr	r6, [pc, #516]	; (8002a98 <HAL_RCC_OscConfig+0x2b0>)
        __HAL_RCC_HSI_ENABLE();
 8002892:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002894:	f7ff fda2 	bl	80023dc <HAL_GetTick>
 8002898:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289a:	e005      	b.n	80028a8 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800289c:	f7ff fd9e 	bl	80023dc <HAL_GetTick>
 80028a0:	1b40      	subs	r0, r0, r5
 80028a2:	2802      	cmp	r0, #2
 80028a4:	f200 80c7 	bhi.w	8002a36 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a8:	6833      	ldr	r3, [r6, #0]
 80028aa:	0798      	lsls	r0, r3, #30
 80028ac:	d5f6      	bpl.n	800289c <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ae:	6833      	ldr	r3, [r6, #0]
 80028b0:	6962      	ldr	r2, [r4, #20]
 80028b2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80028b6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80028ba:	6033      	str	r3, [r6, #0]
 80028bc:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028be:	071a      	lsls	r2, r3, #28
 80028c0:	d41f      	bmi.n	8002902 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028c2:	075d      	lsls	r5, r3, #29
 80028c4:	d541      	bpl.n	800294a <HAL_RCC_OscConfig+0x162>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028c6:	4b74      	ldr	r3, [pc, #464]	; (8002a98 <HAL_RCC_OscConfig+0x2b0>)
 80028c8:	69da      	ldr	r2, [r3, #28]
 80028ca:	00d0      	lsls	r0, r2, #3
 80028cc:	d57d      	bpl.n	80029ca <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 80028ce:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d0:	4b73      	ldr	r3, [pc, #460]	; (8002aa0 <HAL_RCC_OscConfig+0x2b8>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	05d1      	lsls	r1, r2, #23
 80028d6:	f140 809d 	bpl.w	8002a14 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028da:	68e3      	ldr	r3, [r4, #12]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	f000 810b 	beq.w	8002af8 <HAL_RCC_OscConfig+0x310>
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 80c5 	beq.w	8002a72 <HAL_RCC_OscConfig+0x28a>
 80028e8:	2b05      	cmp	r3, #5
 80028ea:	4b6b      	ldr	r3, [pc, #428]	; (8002a98 <HAL_RCC_OscConfig+0x2b0>)
 80028ec:	6a1a      	ldr	r2, [r3, #32]
 80028ee:	f000 8139 	beq.w	8002b64 <HAL_RCC_OscConfig+0x37c>
 80028f2:	f022 0201 	bic.w	r2, r2, #1
 80028f6:	621a      	str	r2, [r3, #32]
 80028f8:	6a1a      	ldr	r2, [r3, #32]
 80028fa:	f022 0204 	bic.w	r2, r2, #4
 80028fe:	621a      	str	r2, [r3, #32]
 8002900:	e0ff      	b.n	8002b02 <HAL_RCC_OscConfig+0x31a>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002902:	69a3      	ldr	r3, [r4, #24]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d050      	beq.n	80029aa <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8002908:	2201      	movs	r2, #1
 800290a:	4b66      	ldr	r3, [pc, #408]	; (8002aa4 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800290c:	4e62      	ldr	r6, [pc, #392]	; (8002a98 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_ENABLE();
 800290e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002910:	f7ff fd64 	bl	80023dc <HAL_GetTick>
 8002914:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002916:	e005      	b.n	8002924 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002918:	f7ff fd60 	bl	80023dc <HAL_GetTick>
 800291c:	1b40      	subs	r0, r0, r5
 800291e:	2802      	cmp	r0, #2
 8002920:	f200 8089 	bhi.w	8002a36 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002924:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002926:	079b      	lsls	r3, r3, #30
 8002928:	d5f6      	bpl.n	8002918 <HAL_RCC_OscConfig+0x130>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800292a:	4b5f      	ldr	r3, [pc, #380]	; (8002aa8 <HAL_RCC_OscConfig+0x2c0>)
 800292c:	4a5f      	ldr	r2, [pc, #380]	; (8002aac <HAL_RCC_OscConfig+0x2c4>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	fba2 2303 	umull	r2, r3, r2, r3
 8002934:	0a5b      	lsrs	r3, r3, #9
 8002936:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002938:	bf00      	nop
  }
  while (Delay --);
 800293a:	9b01      	ldr	r3, [sp, #4]
 800293c:	1e5a      	subs	r2, r3, #1
 800293e:	9201      	str	r2, [sp, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1f9      	bne.n	8002938 <HAL_RCC_OscConfig+0x150>
 8002944:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002946:	075d      	lsls	r5, r3, #29
 8002948:	d4bd      	bmi.n	80028c6 <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800294a:	69e0      	ldr	r0, [r4, #28]
 800294c:	b1d0      	cbz	r0, 8002984 <HAL_RCC_OscConfig+0x19c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800294e:	4d52      	ldr	r5, [pc, #328]	; (8002a98 <HAL_RCC_OscConfig+0x2b0>)
 8002950:	686a      	ldr	r2, [r5, #4]
 8002952:	f002 020c 	and.w	r2, r2, #12
 8002956:	2a08      	cmp	r2, #8
 8002958:	f000 80e6 	beq.w	8002b28 <HAL_RCC_OscConfig+0x340>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800295c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800295e:	f04f 0100 	mov.w	r1, #0
 8002962:	4a53      	ldr	r2, [pc, #332]	; (8002ab0 <HAL_RCC_OscConfig+0x2c8>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002964:	f000 8108 	beq.w	8002b78 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_PLL_DISABLE();
 8002968:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 800296a:	f7ff fd37 	bl	80023dc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800296e:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8002970:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002972:	e004      	b.n	800297e <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002974:	f7ff fd32 	bl	80023dc <HAL_GetTick>
 8002978:	1b40      	subs	r0, r0, r5
 800297a:	2802      	cmp	r0, #2
 800297c:	d85b      	bhi.n	8002a36 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800297e:	6823      	ldr	r3, [r4, #0]
 8002980:	019b      	lsls	r3, r3, #6
 8002982:	d4f7      	bmi.n	8002974 <HAL_RCC_OscConfig+0x18c>
  return HAL_OK;
 8002984:	2000      	movs	r0, #0
}
 8002986:	b002      	add	sp, #8
 8002988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800298c:	6852      	ldr	r2, [r2, #4]
 800298e:	03d6      	lsls	r6, r2, #15
 8002990:	f53f af78 	bmi.w	8002884 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002994:	4a40      	ldr	r2, [pc, #256]	; (8002a98 <HAL_RCC_OscConfig+0x2b0>)
 8002996:	6812      	ldr	r2, [r2, #0]
 8002998:	0795      	lsls	r5, r2, #30
 800299a:	d52f      	bpl.n	80029fc <HAL_RCC_OscConfig+0x214>
 800299c:	6922      	ldr	r2, [r4, #16]
 800299e:	2a01      	cmp	r2, #1
 80029a0:	d02c      	beq.n	80029fc <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 80029a2:	2001      	movs	r0, #1
}
 80029a4:	b002      	add	sp, #8
 80029a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80029aa:	4a3e      	ldr	r2, [pc, #248]	; (8002aa4 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ac:	4e3a      	ldr	r6, [pc, #232]	; (8002a98 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_DISABLE();
 80029ae:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80029b0:	f7ff fd14 	bl	80023dc <HAL_GetTick>
 80029b4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b6:	e004      	b.n	80029c2 <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b8:	f7ff fd10 	bl	80023dc <HAL_GetTick>
 80029bc:	1b40      	subs	r0, r0, r5
 80029be:	2802      	cmp	r0, #2
 80029c0:	d839      	bhi.n	8002a36 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80029c4:	079f      	lsls	r7, r3, #30
 80029c6:	d4f7      	bmi.n	80029b8 <HAL_RCC_OscConfig+0x1d0>
 80029c8:	e7bc      	b.n	8002944 <HAL_RCC_OscConfig+0x15c>
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ca:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 80029cc:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029d2:	61da      	str	r2, [r3, #28]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 80029de:	e777      	b.n	80028d0 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029e0:	684a      	ldr	r2, [r1, #4]
 80029e2:	03d0      	lsls	r0, r2, #15
 80029e4:	f57f af17 	bpl.w	8002816 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e8:	4a2b      	ldr	r2, [pc, #172]	; (8002a98 <HAL_RCC_OscConfig+0x2b0>)
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	0391      	lsls	r1, r2, #14
 80029ee:	f57f af3b 	bpl.w	8002868 <HAL_RCC_OscConfig+0x80>
 80029f2:	6862      	ldr	r2, [r4, #4]
 80029f4:	2a00      	cmp	r2, #0
 80029f6:	f47f af37 	bne.w	8002868 <HAL_RCC_OscConfig+0x80>
 80029fa:	e7d2      	b.n	80029a2 <HAL_RCC_OscConfig+0x1ba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fc:	4926      	ldr	r1, [pc, #152]	; (8002a98 <HAL_RCC_OscConfig+0x2b0>)
 80029fe:	6960      	ldr	r0, [r4, #20]
 8002a00:	680a      	ldr	r2, [r1, #0]
 8002a02:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002a06:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002a0a:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a0c:	071a      	lsls	r2, r3, #28
 8002a0e:	f57f af58 	bpl.w	80028c2 <HAL_RCC_OscConfig+0xda>
 8002a12:	e776      	b.n	8002902 <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a14:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a16:	461f      	mov	r7, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a1c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002a1e:	f7ff fcdd 	bl	80023dc <HAL_GetTick>
 8002a22:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	05da      	lsls	r2, r3, #23
 8002a28:	f53f af57 	bmi.w	80028da <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a2c:	f7ff fcd6 	bl	80023dc <HAL_GetTick>
 8002a30:	1b80      	subs	r0, r0, r6
 8002a32:	2864      	cmp	r0, #100	; 0x64
 8002a34:	d9f6      	bls.n	8002a24 <HAL_RCC_OscConfig+0x23c>
            return HAL_TIMEOUT;
 8002a36:	2003      	movs	r0, #3
}
 8002a38:	b002      	add	sp, #8
 8002a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a42:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002a46:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a48:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a4a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a56:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002a58:	f7ff fcc0 	bl	80023dc <HAL_GetTick>
 8002a5c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a5e:	e004      	b.n	8002a6a <HAL_RCC_OscConfig+0x282>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a60:	f7ff fcbc 	bl	80023dc <HAL_GetTick>
 8002a64:	1b40      	subs	r0, r0, r5
 8002a66:	2864      	cmp	r0, #100	; 0x64
 8002a68:	d8e5      	bhi.n	8002a36 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a6a:	6833      	ldr	r3, [r6, #0]
 8002a6c:	039b      	lsls	r3, r3, #14
 8002a6e:	d4f7      	bmi.n	8002a60 <HAL_RCC_OscConfig+0x278>
 8002a70:	e6f9      	b.n	8002866 <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a72:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a76:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002a7a:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a7c:	461f      	mov	r7, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a7e:	f022 0201 	bic.w	r2, r2, #1
 8002a82:	621a      	str	r2, [r3, #32]
 8002a84:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a86:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a8a:	f022 0204 	bic.w	r2, r2, #4
 8002a8e:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 8002a90:	f7ff fca4 	bl	80023dc <HAL_GetTick>
 8002a94:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a96:	e012      	b.n	8002abe <HAL_RCC_OscConfig+0x2d6>
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	42420000 	.word	0x42420000
 8002aa0:	40007000 	.word	0x40007000
 8002aa4:	42420480 	.word	0x42420480
 8002aa8:	20000010 	.word	0x20000010
 8002aac:	10624dd3 	.word	0x10624dd3
 8002ab0:	42420060 	.word	0x42420060
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab4:	f7ff fc92 	bl	80023dc <HAL_GetTick>
 8002ab8:	1b80      	subs	r0, r0, r6
 8002aba:	4540      	cmp	r0, r8
 8002abc:	d8bb      	bhi.n	8002a36 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	0798      	lsls	r0, r3, #30
 8002ac2:	d4f7      	bmi.n	8002ab4 <HAL_RCC_OscConfig+0x2cc>
    if (pwrclkchanged == SET)
 8002ac4:	2d00      	cmp	r5, #0
 8002ac6:	f43f af40 	beq.w	800294a <HAL_RCC_OscConfig+0x162>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aca:	4a44      	ldr	r2, [pc, #272]	; (8002bdc <HAL_RCC_OscConfig+0x3f4>)
 8002acc:	69d3      	ldr	r3, [r2, #28]
 8002ace:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ad2:	61d3      	str	r3, [r2, #28]
 8002ad4:	e739      	b.n	800294a <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8002ad6:	4a42      	ldr	r2, [pc, #264]	; (8002be0 <HAL_RCC_OscConfig+0x3f8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ad8:	4e40      	ldr	r6, [pc, #256]	; (8002bdc <HAL_RCC_OscConfig+0x3f4>)
        __HAL_RCC_HSI_DISABLE();
 8002ada:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002adc:	f7ff fc7e 	bl	80023dc <HAL_GetTick>
 8002ae0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae2:	e004      	b.n	8002aee <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ae4:	f7ff fc7a 	bl	80023dc <HAL_GetTick>
 8002ae8:	1b40      	subs	r0, r0, r5
 8002aea:	2802      	cmp	r0, #2
 8002aec:	d8a3      	bhi.n	8002a36 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aee:	6833      	ldr	r3, [r6, #0]
 8002af0:	0799      	lsls	r1, r3, #30
 8002af2:	d4f7      	bmi.n	8002ae4 <HAL_RCC_OscConfig+0x2fc>
 8002af4:	6823      	ldr	r3, [r4, #0]
 8002af6:	e6e2      	b.n	80028be <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002af8:	4a38      	ldr	r2, [pc, #224]	; (8002bdc <HAL_RCC_OscConfig+0x3f4>)
 8002afa:	6a13      	ldr	r3, [r2, #32]
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8002b02:	f7ff fc6b 	bl	80023dc <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b06:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002b0a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0c:	4f33      	ldr	r7, [pc, #204]	; (8002bdc <HAL_RCC_OscConfig+0x3f4>)
 8002b0e:	e004      	b.n	8002b1a <HAL_RCC_OscConfig+0x332>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b10:	f7ff fc64 	bl	80023dc <HAL_GetTick>
 8002b14:	1b80      	subs	r0, r0, r6
 8002b16:	4540      	cmp	r0, r8
 8002b18:	d88d      	bhi.n	8002a36 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	079b      	lsls	r3, r3, #30
 8002b1e:	d5f7      	bpl.n	8002b10 <HAL_RCC_OscConfig+0x328>
    if (pwrclkchanged == SET)
 8002b20:	2d00      	cmp	r5, #0
 8002b22:	f43f af12 	beq.w	800294a <HAL_RCC_OscConfig+0x162>
 8002b26:	e7d0      	b.n	8002aca <HAL_RCC_OscConfig+0x2e2>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b28:	2801      	cmp	r0, #1
 8002b2a:	f43f af2c 	beq.w	8002986 <HAL_RCC_OscConfig+0x19e>
        pll_config = RCC->CFGR;
 8002b2e:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b30:	6a22      	ldr	r2, [r4, #32]
 8002b32:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002b36:	4291      	cmp	r1, r2
 8002b38:	f47f af33 	bne.w	80029a2 <HAL_RCC_OscConfig+0x1ba>
 8002b3c:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b3e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 8002b42:	1a18      	subs	r0, r3, r0
 8002b44:	bf18      	it	ne
 8002b46:	2001      	movne	r0, #1
 8002b48:	e71d      	b.n	8002986 <HAL_RCC_OscConfig+0x19e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b4e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	e672      	b.n	800284a <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b64:	f042 0204 	orr.w	r2, r2, #4
 8002b68:	621a      	str	r2, [r3, #32]
 8002b6a:	6a1a      	ldr	r2, [r3, #32]
 8002b6c:	f042 0201 	orr.w	r2, r2, #1
 8002b70:	621a      	str	r2, [r3, #32]
 8002b72:	e7c6      	b.n	8002b02 <HAL_RCC_OscConfig+0x31a>
    return HAL_ERROR;
 8002b74:	2001      	movs	r0, #1
}
 8002b76:	4770      	bx	lr
        __HAL_RCC_PLL_DISABLE();
 8002b78:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8002b7a:	f7ff fc2f 	bl	80023dc <HAL_GetTick>
 8002b7e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b80:	e005      	b.n	8002b8e <HAL_RCC_OscConfig+0x3a6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b82:	f7ff fc2b 	bl	80023dc <HAL_GetTick>
 8002b86:	1b80      	subs	r0, r0, r6
 8002b88:	2802      	cmp	r0, #2
 8002b8a:	f63f af54 	bhi.w	8002a36 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b8e:	682b      	ldr	r3, [r5, #0]
 8002b90:	0199      	lsls	r1, r3, #6
 8002b92:	d4f6      	bmi.n	8002b82 <HAL_RCC_OscConfig+0x39a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b94:	6a23      	ldr	r3, [r4, #32]
 8002b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b9a:	d105      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x3c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b9c:	686a      	ldr	r2, [r5, #4]
 8002b9e:	68a1      	ldr	r1, [r4, #8]
 8002ba0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002ba8:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002baa:	4d0c      	ldr	r5, [pc, #48]	; (8002bdc <HAL_RCC_OscConfig+0x3f4>)
 8002bac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002bae:	686a      	ldr	r2, [r5, #4]
 8002bb0:	430b      	orrs	r3, r1
 8002bb2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8002bb6:	490b      	ldr	r1, [pc, #44]	; (8002be4 <HAL_RCC_OscConfig+0x3fc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002bbc:	6008      	str	r0, [r1, #0]
        tickstart = HAL_GetTick();
 8002bbe:	f7ff fc0d 	bl	80023dc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bc2:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8002bc4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bc6:	e005      	b.n	8002bd4 <HAL_RCC_OscConfig+0x3ec>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc8:	f7ff fc08 	bl	80023dc <HAL_GetTick>
 8002bcc:	1b40      	subs	r0, r0, r5
 8002bce:	2802      	cmp	r0, #2
 8002bd0:	f63f af31 	bhi.w	8002a36 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bd4:	6823      	ldr	r3, [r4, #0]
 8002bd6:	019a      	lsls	r2, r3, #6
 8002bd8:	d5f6      	bpl.n	8002bc8 <HAL_RCC_OscConfig+0x3e0>
 8002bda:	e6d3      	b.n	8002984 <HAL_RCC_OscConfig+0x19c>
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	42420000 	.word	0x42420000
 8002be4:	42420060 	.word	0x42420060

08002be8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002be8:	2800      	cmp	r0, #0
 8002bea:	f000 80af 	beq.w	8002d4c <HAL_RCC_ClockConfig+0x164>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bee:	4a5d      	ldr	r2, [pc, #372]	; (8002d64 <HAL_RCC_ClockConfig+0x17c>)
{
 8002bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bf4:	6813      	ldr	r3, [r2, #0]
 8002bf6:	4604      	mov	r4, r0
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	428b      	cmp	r3, r1
 8002bfe:	460d      	mov	r5, r1
{
 8002c00:	b086      	sub	sp, #24
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c02:	d20d      	bcs.n	8002c20 <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c04:	6813      	ldr	r3, [r2, #0]
 8002c06:	f023 0307 	bic.w	r3, r3, #7
 8002c0a:	430b      	orrs	r3, r1
 8002c0c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0e:	6813      	ldr	r3, [r2, #0]
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	428b      	cmp	r3, r1
 8002c16:	d003      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x38>
    return HAL_ERROR;
 8002c18:	2001      	movs	r0, #1
}
 8002c1a:	b006      	add	sp, #24
 8002c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c20:	6823      	ldr	r3, [r4, #0]
 8002c22:	0798      	lsls	r0, r3, #30
 8002c24:	d514      	bpl.n	8002c50 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c26:	0759      	lsls	r1, r3, #29
 8002c28:	d504      	bpl.n	8002c34 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c2a:	494f      	ldr	r1, [pc, #316]	; (8002d68 <HAL_RCC_ClockConfig+0x180>)
 8002c2c:	684a      	ldr	r2, [r1, #4]
 8002c2e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002c32:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c34:	071a      	lsls	r2, r3, #28
 8002c36:	d504      	bpl.n	8002c42 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c38:	494b      	ldr	r1, [pc, #300]	; (8002d68 <HAL_RCC_ClockConfig+0x180>)
 8002c3a:	684a      	ldr	r2, [r1, #4]
 8002c3c:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8002c40:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c42:	4949      	ldr	r1, [pc, #292]	; (8002d68 <HAL_RCC_ClockConfig+0x180>)
 8002c44:	68a0      	ldr	r0, [r4, #8]
 8002c46:	684a      	ldr	r2, [r1, #4]
 8002c48:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002c4c:	4302      	orrs	r2, r0
 8002c4e:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c50:	07db      	lsls	r3, r3, #31
 8002c52:	d520      	bpl.n	8002c96 <HAL_RCC_ClockConfig+0xae>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c54:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c56:	4b44      	ldr	r3, [pc, #272]	; (8002d68 <HAL_RCC_ClockConfig+0x180>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c58:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5a:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c5c:	d078      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x168>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c5e:	2a02      	cmp	r2, #2
 8002c60:	d071      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x15e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c62:	0798      	lsls	r0, r3, #30
 8002c64:	d5d8      	bpl.n	8002c18 <HAL_RCC_ClockConfig+0x30>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c66:	4e40      	ldr	r6, [pc, #256]	; (8002d68 <HAL_RCC_ClockConfig+0x180>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c68:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c6c:	6873      	ldr	r3, [r6, #4]
 8002c6e:	f023 0303 	bic.w	r3, r3, #3
 8002c72:	4313      	orrs	r3, r2
 8002c74:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002c76:	f7ff fbb1 	bl	80023dc <HAL_GetTick>
 8002c7a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7c:	e004      	b.n	8002c88 <HAL_RCC_ClockConfig+0xa0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c7e:	f7ff fbad 	bl	80023dc <HAL_GetTick>
 8002c82:	1bc0      	subs	r0, r0, r7
 8002c84:	4540      	cmp	r0, r8
 8002c86:	d866      	bhi.n	8002d56 <HAL_RCC_ClockConfig+0x16e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c88:	6873      	ldr	r3, [r6, #4]
 8002c8a:	6862      	ldr	r2, [r4, #4]
 8002c8c:	f003 030c 	and.w	r3, r3, #12
 8002c90:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002c94:	d1f3      	bne.n	8002c7e <HAL_RCC_ClockConfig+0x96>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c96:	4a33      	ldr	r2, [pc, #204]	; (8002d64 <HAL_RCC_ClockConfig+0x17c>)
 8002c98:	6813      	ldr	r3, [r2, #0]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	42ab      	cmp	r3, r5
 8002ca0:	d909      	bls.n	8002cb6 <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca2:	6813      	ldr	r3, [r2, #0]
 8002ca4:	f023 0307 	bic.w	r3, r3, #7
 8002ca8:	432b      	orrs	r3, r5
 8002caa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cac:	6813      	ldr	r3, [r2, #0]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	42ab      	cmp	r3, r5
 8002cb4:	d1b0      	bne.n	8002c18 <HAL_RCC_ClockConfig+0x30>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb6:	6823      	ldr	r3, [r4, #0]
 8002cb8:	0759      	lsls	r1, r3, #29
 8002cba:	d506      	bpl.n	8002cca <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cbc:	492a      	ldr	r1, [pc, #168]	; (8002d68 <HAL_RCC_ClockConfig+0x180>)
 8002cbe:	68e0      	ldr	r0, [r4, #12]
 8002cc0:	684a      	ldr	r2, [r1, #4]
 8002cc2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cc6:	4302      	orrs	r2, r0
 8002cc8:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cca:	071a      	lsls	r2, r3, #28
 8002ccc:	d507      	bpl.n	8002cde <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cce:	4a26      	ldr	r2, [pc, #152]	; (8002d68 <HAL_RCC_ClockConfig+0x180>)
 8002cd0:	6921      	ldr	r1, [r4, #16]
 8002cd2:	6853      	ldr	r3, [r2, #4]
 8002cd4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002cd8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002cdc:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002cde:	f240 2201 	movw	r2, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ce2:	4b22      	ldr	r3, [pc, #136]	; (8002d6c <HAL_RCC_ClockConfig+0x184>)
 8002ce4:	ac06      	add	r4, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ce6:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002cea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cec:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8002cf0:	491d      	ldr	r1, [pc, #116]	; (8002d68 <HAL_RCC_ClockConfig+0x180>)
 8002cf2:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002cf4:	f002 030c 	and.w	r3, r2, #12
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d011      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x138>
      sysclockfreq = HSE_VALUE;
 8002cfc:	4b1c      	ldr	r3, [pc, #112]	; (8002d70 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cfe:	4a1a      	ldr	r2, [pc, #104]	; (8002d68 <HAL_RCC_ClockConfig+0x180>)
 8002d00:	481c      	ldr	r0, [pc, #112]	; (8002d74 <HAL_RCC_ClockConfig+0x18c>)
 8002d02:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8002d04:	491c      	ldr	r1, [pc, #112]	; (8002d78 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d06:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002d0a:	5c80      	ldrb	r0, [r0, r2]
 8002d0c:	4a1b      	ldr	r2, [pc, #108]	; (8002d7c <HAL_RCC_ClockConfig+0x194>)
 8002d0e:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8002d10:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d12:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8002d14:	f7ff fb20 	bl	8002358 <HAL_InitTick>
  return HAL_OK;
 8002d18:	2000      	movs	r0, #0
}
 8002d1a:	b006      	add	sp, #24
 8002d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d20:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8002d24:	4423      	add	r3, r4
 8002d26:	f813 0c10 	ldrb.w	r0, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d2a:	03d3      	lsls	r3, r2, #15
 8002d2c:	d515      	bpl.n	8002d5a <HAL_RCC_ClockConfig+0x172>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d2e:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d30:	4b0f      	ldr	r3, [pc, #60]	; (8002d70 <HAL_RCC_ClockConfig+0x188>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d32:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d36:	fb03 f300 	mul.w	r3, r3, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d3a:	4422      	add	r2, r4
 8002d3c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d40:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d44:	e7db      	b.n	8002cfe <HAL_RCC_ClockConfig+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d46:	019e      	lsls	r6, r3, #6
 8002d48:	d48d      	bmi.n	8002c66 <HAL_RCC_ClockConfig+0x7e>
 8002d4a:	e765      	b.n	8002c18 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8002d4c:	2001      	movs	r0, #1
}
 8002d4e:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d50:	039f      	lsls	r7, r3, #14
 8002d52:	d488      	bmi.n	8002c66 <HAL_RCC_ClockConfig+0x7e>
 8002d54:	e760      	b.n	8002c18 <HAL_RCC_ClockConfig+0x30>
        return HAL_TIMEOUT;
 8002d56:	2003      	movs	r0, #3
 8002d58:	e75f      	b.n	8002c1a <HAL_RCC_ClockConfig+0x32>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d5a:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <HAL_RCC_ClockConfig+0x198>)
 8002d5c:	fb03 f300 	mul.w	r3, r3, r0
 8002d60:	e7cd      	b.n	8002cfe <HAL_RCC_ClockConfig+0x116>
 8002d62:	bf00      	nop
 8002d64:	40022000 	.word	0x40022000
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	08006d9c 	.word	0x08006d9c
 8002d70:	007a1200 	.word	0x007a1200
 8002d74:	08006d84 	.word	0x08006d84
 8002d78:	20000018 	.word	0x20000018
 8002d7c:	20000010 	.word	0x20000010
 8002d80:	003d0900 	.word	0x003d0900

08002d84 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d84:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002d86:	4905      	ldr	r1, [pc, #20]	; (8002d9c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002d88:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8002d8a:	4a05      	ldr	r2, [pc, #20]	; (8002da0 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d8c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002d90:	5ccb      	ldrb	r3, [r1, r3]
 8002d92:	6810      	ldr	r0, [r2, #0]
}
 8002d94:	40d8      	lsrs	r0, r3
 8002d96:	4770      	bx	lr
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	08006d94 	.word	0x08006d94
 8002da0:	20000010 	.word	0x20000010

08002da4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002da4:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002da6:	4905      	ldr	r1, [pc, #20]	; (8002dbc <HAL_RCC_GetPCLK2Freq+0x18>)
 8002da8:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8002daa:	4a05      	ldr	r2, [pc, #20]	; (8002dc0 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dac:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002db0:	5ccb      	ldrb	r3, [r1, r3]
 8002db2:	6810      	ldr	r0, [r2, #0]
}
 8002db4:	40d8      	lsrs	r0, r3
 8002db6:	4770      	bx	lr
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	08006d94 	.word	0x08006d94
 8002dc0:	20000010 	.word	0x20000010

08002dc4 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dc4:	2800      	cmp	r0, #0
 8002dc6:	d059      	beq.n	8002e7c <HAL_TIM_Base_Init+0xb8>
{
 8002dc8:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002dce:	4604      	mov	r4, r0
 8002dd0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d038      	beq.n	8002e4a <HAL_TIM_Base_Init+0x86>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd8:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dda:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ddc:	4928      	ldr	r1, [pc, #160]	; (8002e80 <HAL_TIM_Base_Init+0xbc>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002dde:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002de2:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8002de4:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002de6:	d035      	beq.n	8002e54 <HAL_TIM_Base_Init+0x90>
 8002de8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002dec:	d024      	beq.n	8002e38 <HAL_TIM_Base_Init+0x74>
 8002dee:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8002df2:	428a      	cmp	r2, r1
 8002df4:	d020      	beq.n	8002e38 <HAL_TIM_Base_Init+0x74>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002df6:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002df8:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dfa:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e00:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002e02:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e04:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002e06:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e0c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e10:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002e14:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002e18:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002e1c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e28:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002e2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002e30:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002e34:	2000      	movs	r0, #0
}
 8002e36:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8002e38:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002e3e:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e40:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e46:	430b      	orrs	r3, r1
 8002e48:	e7d5      	b.n	8002df6 <HAL_TIM_Base_Init+0x32>
    htim->Lock = HAL_UNLOCKED;
 8002e4a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002e4e:	f7ff f8df 	bl	8002010 <HAL_TIM_Base_MspInit>
 8002e52:	e7c1      	b.n	8002dd8 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8002e54:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002e5a:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e5c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e62:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e64:	69a1      	ldr	r1, [r4, #24]
 8002e66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e6a:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8002e6c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e6e:	68e3      	ldr	r3, [r4, #12]
 8002e70:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002e72:	6863      	ldr	r3, [r4, #4]
 8002e74:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002e76:	6963      	ldr	r3, [r4, #20]
 8002e78:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7a:	e7c5      	b.n	8002e08 <HAL_TIM_Base_Init+0x44>
    return HAL_ERROR;
 8002e7c:	2001      	movs	r0, #1
}
 8002e7e:	4770      	bx	lr
 8002e80:	40012c00 	.word	0x40012c00

08002e84 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002e84:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d116      	bne.n	8002eba <HAL_TIM_Base_Start_IT+0x36>
  htim->State = HAL_TIM_STATE_BUSY;
 8002e8c:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e8e:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002e90:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e94:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e96:	490d      	ldr	r1, [pc, #52]	; (8002ecc <HAL_TIM_Base_Start_IT+0x48>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e98:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e9c:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e9e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ea0:	d00d      	beq.n	8002ebe <HAL_TIM_Base_Start_IT+0x3a>
 8002ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea6:	d00a      	beq.n	8002ebe <HAL_TIM_Base_Start_IT+0x3a>
 8002ea8:	4a09      	ldr	r2, [pc, #36]	; (8002ed0 <HAL_TIM_Base_Start_IT+0x4c>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d007      	beq.n	8002ebe <HAL_TIM_Base_Start_IT+0x3a>
    __HAL_TIM_ENABLE(htim);
 8002eae:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8002eb0:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8002eb2:	f042 0201 	orr.w	r2, r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	4770      	bx	lr
    return HAL_ERROR;
 8002eba:	2001      	movs	r0, #1
 8002ebc:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ec4:	2a06      	cmp	r2, #6
 8002ec6:	d1f2      	bne.n	8002eae <HAL_TIM_Base_Start_IT+0x2a>
  return HAL_OK;
 8002ec8:	2000      	movs	r0, #0
}
 8002eca:	4770      	bx	lr
 8002ecc:	40012c00 	.word	0x40012c00
 8002ed0:	40000400 	.word	0x40000400

08002ed4 <HAL_TIM_PWM_MspInit>:
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop

08002ed8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002ed8:	2800      	cmp	r0, #0
 8002eda:	d059      	beq.n	8002f90 <HAL_TIM_PWM_Init+0xb8>
{
 8002edc:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8002ede:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002ee2:	4604      	mov	r4, r0
 8002ee4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d038      	beq.n	8002f5e <HAL_TIM_PWM_Init+0x86>
  htim->State = HAL_TIM_STATE_BUSY;
 8002eec:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eee:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ef0:	4928      	ldr	r1, [pc, #160]	; (8002f94 <HAL_TIM_PWM_Init+0xbc>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ef6:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8002ef8:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002efa:	d035      	beq.n	8002f68 <HAL_TIM_PWM_Init+0x90>
 8002efc:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002f00:	d024      	beq.n	8002f4c <HAL_TIM_PWM_Init+0x74>
 8002f02:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8002f06:	428a      	cmp	r2, r1
 8002f08:	d020      	beq.n	8002f4c <HAL_TIM_PWM_Init+0x74>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f0a:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f0c:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8002f0e:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f14:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002f16:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f18:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002f1a:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f20:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f24:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002f28:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002f2c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002f30:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f3c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002f40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002f44:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002f48:	2000      	movs	r0, #0
}
 8002f4a:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8002f4c:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002f52:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f54:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f5a:	430b      	orrs	r3, r1
 8002f5c:	e7d5      	b.n	8002f0a <HAL_TIM_PWM_Init+0x32>
    htim->Lock = HAL_UNLOCKED;
 8002f5e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002f62:	f7ff ffb7 	bl	8002ed4 <HAL_TIM_PWM_MspInit>
 8002f66:	e7c1      	b.n	8002eec <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8002f68:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002f6e:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f70:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f76:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f78:	69a1      	ldr	r1, [r4, #24]
 8002f7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f7e:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8002f80:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f82:	68e3      	ldr	r3, [r4, #12]
 8002f84:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002f86:	6863      	ldr	r3, [r4, #4]
 8002f88:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002f8a:	6963      	ldr	r3, [r4, #20]
 8002f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f8e:	e7c5      	b.n	8002f1c <HAL_TIM_PWM_Init+0x44>
    return HAL_ERROR;
 8002f90:	2001      	movs	r0, #1
}
 8002f92:	4770      	bx	lr
 8002f94:	40012c00 	.word	0x40012c00

08002f98 <HAL_TIM_PWM_Start>:
 8002f98:	bb11      	cbnz	r1, 8002fe0 <HAL_TIM_PWM_Start+0x48>
 8002f9a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d126      	bne.n	8002ff0 <HAL_TIM_PWM_Start+0x58>
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8002fa8:	2201      	movs	r2, #1
 8002faa:	6803      	ldr	r3, [r0, #0]
 8002fac:	f001 011f 	and.w	r1, r1, #31
 8002fb0:	6a18      	ldr	r0, [r3, #32]
 8002fb2:	fa02 f101 	lsl.w	r1, r2, r1
 8002fb6:	ea20 0001 	bic.w	r0, r0, r1
 8002fba:	6218      	str	r0, [r3, #32]
 8002fbc:	6a18      	ldr	r0, [r3, #32]
 8002fbe:	4a1d      	ldr	r2, [pc, #116]	; (8003034 <HAL_TIM_PWM_Start+0x9c>)
 8002fc0:	4301      	orrs	r1, r0
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	6219      	str	r1, [r3, #32]
 8002fc6:	d015      	beq.n	8002ff4 <HAL_TIM_PWM_Start+0x5c>
 8002fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fcc:	d016      	beq.n	8002ffc <HAL_TIM_PWM_Start+0x64>
 8002fce:	4a1a      	ldr	r2, [pc, #104]	; (8003038 <HAL_TIM_PWM_Start+0xa0>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d013      	beq.n	8002ffc <HAL_TIM_PWM_Start+0x64>
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	f042 0201 	orr.w	r2, r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	4770      	bx	lr
 8002fe0:	2904      	cmp	r1, #4
 8002fe2:	d016      	beq.n	8003012 <HAL_TIM_PWM_Start+0x7a>
 8002fe4:	2908      	cmp	r1, #8
 8002fe6:	d01c      	beq.n	8003022 <HAL_TIM_PWM_Start+0x8a>
 8002fe8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d00c      	beq.n	800300a <HAL_TIM_PWM_Start+0x72>
 8002ff0:	2001      	movs	r0, #1
 8002ff2:	4770      	bx	lr
 8002ff4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ff6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ffa:	645a      	str	r2, [r3, #68]	; 0x44
 8002ffc:	689a      	ldr	r2, [r3, #8]
 8002ffe:	f002 0207 	and.w	r2, r2, #7
 8003002:	2a06      	cmp	r2, #6
 8003004:	d1e6      	bne.n	8002fd4 <HAL_TIM_PWM_Start+0x3c>
 8003006:	2000      	movs	r0, #0
 8003008:	4770      	bx	lr
 800300a:	2302      	movs	r3, #2
 800300c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8003010:	e7ca      	b.n	8002fa8 <HAL_TIM_PWM_Start+0x10>
 8003012:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8003016:	2b01      	cmp	r3, #1
 8003018:	d1ea      	bne.n	8002ff0 <HAL_TIM_PWM_Start+0x58>
 800301a:	2302      	movs	r3, #2
 800301c:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8003020:	e7c2      	b.n	8002fa8 <HAL_TIM_PWM_Start+0x10>
 8003022:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003026:	2b01      	cmp	r3, #1
 8003028:	d1e2      	bne.n	8002ff0 <HAL_TIM_PWM_Start+0x58>
 800302a:	2302      	movs	r3, #2
 800302c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8003030:	e7ba      	b.n	8002fa8 <HAL_TIM_PWM_Start+0x10>
 8003032:	bf00      	nop
 8003034:	40012c00 	.word	0x40012c00
 8003038:	40000400 	.word	0x40000400

0800303c <HAL_TIM_IC_MspInit>:
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop

08003040 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8003040:	2800      	cmp	r0, #0
 8003042:	d059      	beq.n	80030f8 <HAL_TIM_IC_Init+0xb8>
{
 8003044:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003046:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800304a:	4604      	mov	r4, r0
 800304c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003050:	2b00      	cmp	r3, #0
 8003052:	d038      	beq.n	80030c6 <HAL_TIM_IC_Init+0x86>
  htim->State = HAL_TIM_STATE_BUSY;
 8003054:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003056:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003058:	4928      	ldr	r1, [pc, #160]	; (80030fc <HAL_TIM_IC_Init+0xbc>)
  htim->State = HAL_TIM_STATE_BUSY;
 800305a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800305e:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8003060:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003062:	d035      	beq.n	80030d0 <HAL_TIM_IC_Init+0x90>
 8003064:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003068:	d024      	beq.n	80030b4 <HAL_TIM_IC_Init+0x74>
 800306a:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800306e:	428a      	cmp	r2, r1
 8003070:	d020      	beq.n	80030b4 <HAL_TIM_IC_Init+0x74>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003072:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003074:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8003076:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003078:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800307c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800307e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003080:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003082:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003084:	2301      	movs	r3, #1
 8003086:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003088:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800308c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003090:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003094:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003098:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800309c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030a4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80030a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80030ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80030b0:	2000      	movs	r0, #0
}
 80030b2:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 80030b4:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80030ba:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030bc:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80030be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030c2:	430b      	orrs	r3, r1
 80030c4:	e7d5      	b.n	8003072 <HAL_TIM_IC_Init+0x32>
    htim->Lock = HAL_UNLOCKED;
 80030c6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 80030ca:	f7ff ffb7 	bl	800303c <HAL_TIM_IC_MspInit>
 80030ce:	e7c1      	b.n	8003054 <HAL_TIM_IC_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 80030d0:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80030d6:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030d8:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80030da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030de:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030e0:	69a1      	ldr	r1, [r4, #24]
 80030e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030e6:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80030e8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030ea:	68e3      	ldr	r3, [r4, #12]
 80030ec:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80030ee:	6863      	ldr	r3, [r4, #4]
 80030f0:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80030f2:	6963      	ldr	r3, [r4, #20]
 80030f4:	6313      	str	r3, [r2, #48]	; 0x30
 80030f6:	e7c5      	b.n	8003084 <HAL_TIM_IC_Init+0x44>
    return HAL_ERROR;
 80030f8:	2001      	movs	r0, #1
}
 80030fa:	4770      	bx	lr
 80030fc:	40012c00 	.word	0x40012c00

08003100 <HAL_TIM_IC_Start_IT>:
{
 8003100:	b410      	push	{r4}
 8003102:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003104:	2900      	cmp	r1, #0
 8003106:	d137      	bne.n	8003178 <HAL_TIM_IC_Start_IT+0x78>
 8003108:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800310c:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003110:	b2d8      	uxtb	r0, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003112:	b2d3      	uxtb	r3, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003114:	2801      	cmp	r0, #1
 8003116:	d103      	bne.n	8003120 <HAL_TIM_IC_Start_IT+0x20>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003118:	2b01      	cmp	r3, #1
 800311a:	d004      	beq.n	8003126 <HAL_TIM_IC_Start_IT+0x26>
}
 800311c:	bc10      	pop	{r4}
 800311e:	4770      	bx	lr
    return HAL_ERROR;
 8003120:	2001      	movs	r0, #1
}
 8003122:	bc10      	pop	{r4}
 8003124:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003126:	2900      	cmp	r1, #0
 8003128:	d135      	bne.n	8003196 <HAL_TIM_IC_Start_IT+0x96>
 800312a:	2302      	movs	r3, #2
 800312c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003130:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003134:	6823      	ldr	r3, [r4, #0]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	f042 0202 	orr.w	r2, r2, #2
 800313c:	60da      	str	r2, [r3, #12]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800313e:	2201      	movs	r2, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003140:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003142:	f001 011f 	and.w	r1, r1, #31
 8003146:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 800314a:	ea20 0001 	bic.w	r0, r0, r1
 800314e:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003150:	6a18      	ldr	r0, [r3, #32]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003152:	4a3b      	ldr	r2, [pc, #236]	; (8003240 <HAL_TIM_IC_Start_IT+0x140>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003154:	4301      	orrs	r1, r0
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003156:	4293      	cmp	r3, r2
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003158:	6219      	str	r1, [r3, #32]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800315a:	d05f      	beq.n	800321c <HAL_TIM_IC_Start_IT+0x11c>
 800315c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003160:	d05c      	beq.n	800321c <HAL_TIM_IC_Start_IT+0x11c>
 8003162:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003166:	4293      	cmp	r3, r2
 8003168:	d058      	beq.n	800321c <HAL_TIM_IC_Start_IT+0x11c>
    __HAL_TIM_ENABLE(htim);
 800316a:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 800316c:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800316e:	f042 0201 	orr.w	r2, r2, #1
}
 8003172:	bc10      	pop	{r4}
    __HAL_TIM_ENABLE(htim);
 8003174:	601a      	str	r2, [r3, #0]
}
 8003176:	4770      	bx	lr
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003178:	2904      	cmp	r1, #4
 800317a:	d048      	beq.n	800320e <HAL_TIM_IC_Start_IT+0x10e>
 800317c:	2908      	cmp	r1, #8
 800317e:	bf0b      	itete	eq
 8003180:	f890 3040 	ldrbeq.w	r3, [r0, #64]	; 0x40
 8003184:	f890 3041 	ldrbne.w	r3, [r0, #65]	; 0x41
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003188:	f890 2044 	ldrbeq.w	r2, [r0, #68]	; 0x44
 800318c:	f890 2045 	ldrbne.w	r2, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003190:	b2d8      	uxtb	r0, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003192:	b2d3      	uxtb	r3, r2
 8003194:	e7be      	b.n	8003114 <HAL_TIM_IC_Start_IT+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003196:	2904      	cmp	r1, #4
 8003198:	d028      	beq.n	80031ec <HAL_TIM_IC_Start_IT+0xec>
 800319a:	2908      	cmp	r1, #8
 800319c:	d045      	beq.n	800322a <HAL_TIM_IC_Start_IT+0x12a>
 800319e:	2302      	movs	r3, #2
 80031a0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  switch (Channel)
 80031a8:	290c      	cmp	r1, #12
 80031aa:	d81d      	bhi.n	80031e8 <HAL_TIM_IC_Start_IT+0xe8>
 80031ac:	a301      	add	r3, pc, #4	; (adr r3, 80031b4 <HAL_TIM_IC_Start_IT+0xb4>)
 80031ae:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80031b2:	bf00      	nop
 80031b4:	08003135 	.word	0x08003135
 80031b8:	080031e9 	.word	0x080031e9
 80031bc:	080031e9 	.word	0x080031e9
 80031c0:	080031e9 	.word	0x080031e9
 80031c4:	080031f7 	.word	0x080031f7
 80031c8:	080031e9 	.word	0x080031e9
 80031cc:	080031e9 	.word	0x080031e9
 80031d0:	080031e9 	.word	0x080031e9
 80031d4:	080031e9 	.word	0x080031e9
 80031d8:	080031e9 	.word	0x080031e9
 80031dc:	080031e9 	.word	0x080031e9
 80031e0:	080031e9 	.word	0x080031e9
 80031e4:	08003203 	.word	0x08003203
 80031e8:	6823      	ldr	r3, [r4, #0]
 80031ea:	e7a8      	b.n	800313e <HAL_TIM_IC_Start_IT+0x3e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031ec:	2302      	movs	r3, #2
 80031ee:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80031f6:	6823      	ldr	r3, [r4, #0]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	f042 0204 	orr.w	r2, r2, #4
 80031fe:	60da      	str	r2, [r3, #12]
      break;
 8003200:	e79d      	b.n	800313e <HAL_TIM_IC_Start_IT+0x3e>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003202:	6823      	ldr	r3, [r4, #0]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	f042 0210 	orr.w	r2, r2, #16
 800320a:	60da      	str	r2, [r3, #12]
      break;
 800320c:	e797      	b.n	800313e <HAL_TIM_IC_Start_IT+0x3e>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800320e:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003212:	f890 2043 	ldrb.w	r2, [r0, #67]	; 0x43
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003216:	b2d8      	uxtb	r0, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003218:	b2d3      	uxtb	r3, r2
 800321a:	e77b      	b.n	8003114 <HAL_TIM_IC_Start_IT+0x14>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003222:	2a06      	cmp	r2, #6
 8003224:	d1a1      	bne.n	800316a <HAL_TIM_IC_Start_IT+0x6a>
  return HAL_OK;
 8003226:	2000      	movs	r0, #0
 8003228:	e778      	b.n	800311c <HAL_TIM_IC_Start_IT+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800322a:	2202      	movs	r2, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800322c:	6823      	ldr	r3, [r4, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800322e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003232:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003236:	68da      	ldr	r2, [r3, #12]
 8003238:	f042 0208 	orr.w	r2, r2, #8
 800323c:	60da      	str	r2, [r3, #12]
      break;
 800323e:	e77e      	b.n	800313e <HAL_TIM_IC_Start_IT+0x3e>
 8003240:	40012c00 	.word	0x40012c00

08003244 <HAL_TIM_IC_ConfigChannel>:
  __HAL_LOCK(htim);
 8003244:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003248:	2b01      	cmp	r3, #1
 800324a:	f000 80b6 	beq.w	80033ba <HAL_TIM_IC_ConfigChannel+0x176>
 800324e:	2301      	movs	r3, #1
{
 8003250:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8003252:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    TIM_TI1_SetConfig(htim->Instance,
 8003256:	6803      	ldr	r3, [r0, #0]
  if (Channel == TIM_CHANNEL_1)
 8003258:	b36a      	cbz	r2, 80032b6 <HAL_TIM_IC_ConfigChannel+0x72>
  else if (Channel == TIM_CHANNEL_2)
 800325a:	2a04      	cmp	r2, #4
 800325c:	d05b      	beq.n	8003316 <HAL_TIM_IC_ConfigChannel+0xd2>
  else if (Channel == TIM_CHANNEL_3)
 800325e:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003260:	6a1e      	ldr	r6, [r3, #32]
    TIM_TI3_SetConfig(htim->Instance,
 8003262:	680a      	ldr	r2, [r1, #0]
  else if (Channel == TIM_CHANNEL_3)
 8003264:	f000 8084 	beq.w	8003370 <HAL_TIM_IC_ConfigChannel+0x12c>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003268:	f426 5680 	bic.w	r6, r6, #4096	; 0x1000
    TIM_TI4_SetConfig(htim->Instance,
 800326c:	684f      	ldr	r7, [r1, #4]
 800326e:	68cc      	ldr	r4, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003270:	621e      	str	r6, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003272:	69dd      	ldr	r5, [r3, #28]
  tmpccer = TIMx->CCER;
 8003274:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003276:	f425 7540 	bic.w	r5, r5, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800327a:	ea45 2507 	orr.w	r5, r5, r7, lsl #8
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800327e:	0312      	lsls	r2, r2, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003280:	0324      	lsls	r4, r4, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003282:	f425 4570 	bic.w	r5, r5, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC4P);
 8003286:	f426 5600 	bic.w	r6, r6, #8192	; 0x2000
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800328a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800328e:	b2a4      	uxth	r4, r4
 8003290:	432c      	orrs	r4, r5
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003292:	4332      	orrs	r2, r6
  TIMx->CCMR2 = tmpccmr2;
 8003294:	61dc      	str	r4, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003296:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003298:	69dc      	ldr	r4, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800329a:	688d      	ldr	r5, [r1, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800329c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
 80032a0:	61dc      	str	r4, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80032a2:	69da      	ldr	r2, [r3, #28]
 80032a4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80032a8:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80032aa:	2300      	movs	r3, #0
 80032ac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80032b0:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80032b2:	4618      	mov	r0, r3
}
 80032b4:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032b6:	6a1e      	ldr	r6, [r3, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80032b8:	f8df c104 	ldr.w	ip, [pc, #260]	; 80033c0 <HAL_TIM_IC_ConfigChannel+0x17c>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032bc:	f026 0601 	bic.w	r6, r6, #1
    TIM_TI1_SetConfig(htim->Instance,
 80032c0:	680c      	ldr	r4, [r1, #0]
 80032c2:	684d      	ldr	r5, [r1, #4]
 80032c4:	68ca      	ldr	r2, [r1, #12]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80032c6:	4563      	cmp	r3, ip
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032c8:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032ca:	699f      	ldr	r7, [r3, #24]
  tmpccer = TIMx->CCER;
 80032cc:	6a1e      	ldr	r6, [r3, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80032ce:	d04b      	beq.n	8003368 <HAL_TIM_IC_ConfigChannel+0x124>
 80032d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d4:	d048      	beq.n	8003368 <HAL_TIM_IC_ConfigChannel+0x124>
 80032d6:	f5ac 3c94 	sub.w	ip, ip, #75776	; 0x12800
 80032da:	4563      	cmp	r3, ip
 80032dc:	d044      	beq.n	8003368 <HAL_TIM_IC_ConfigChannel+0x124>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80032de:	f047 0501 	orr.w	r5, r7, #1
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80032e2:	0112      	lsls	r2, r2, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032e4:	f025 05f0 	bic.w	r5, r5, #240	; 0xf0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032e8:	f026 060a 	bic.w	r6, r6, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80032ec:	b2d2      	uxtb	r2, r2
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80032ee:	f004 040a 	and.w	r4, r4, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80032f2:	432a      	orrs	r2, r5
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80032f4:	4334      	orrs	r4, r6
  TIMx->CCMR1 = tmpccmr1;
 80032f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032f8:	621c      	str	r4, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80032fa:	699c      	ldr	r4, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80032fc:	688d      	ldr	r5, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80032fe:	f024 040c 	bic.w	r4, r4, #12
 8003302:	619c      	str	r4, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	432a      	orrs	r2, r5
 8003308:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800330a:	2300      	movs	r3, #0
 800330c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8003310:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8003312:	4618      	mov	r0, r3
}
 8003314:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003316:	6a1e      	ldr	r6, [r3, #32]
    TIM_TI2_SetConfig(htim->Instance,
 8003318:	684f      	ldr	r7, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800331a:	f026 0610 	bic.w	r6, r6, #16
    TIM_TI2_SetConfig(htim->Instance,
 800331e:	680a      	ldr	r2, [r1, #0]
 8003320:	68cc      	ldr	r4, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003322:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003324:	699d      	ldr	r5, [r3, #24]
  tmpccer = TIMx->CCER;
 8003326:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003328:	f425 7540 	bic.w	r5, r5, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800332c:	ea45 2507 	orr.w	r5, r5, r7, lsl #8
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003330:	0112      	lsls	r2, r2, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003332:	0324      	lsls	r4, r4, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003334:	f425 4570 	bic.w	r5, r5, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003338:	f026 06a0 	bic.w	r6, r6, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800333c:	f002 02a0 	and.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003340:	b2a4      	uxth	r4, r4
 8003342:	432c      	orrs	r4, r5
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003344:	4332      	orrs	r2, r6
  TIMx->CCMR1 = tmpccmr1 ;
 8003346:	619c      	str	r4, [r3, #24]
  TIMx->CCER = tmpccer;
 8003348:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800334a:	699c      	ldr	r4, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800334c:	688d      	ldr	r5, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800334e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
 8003352:	619c      	str	r4, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003354:	699a      	ldr	r2, [r3, #24]
 8003356:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800335a:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800335c:	2300      	movs	r3, #0
 800335e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8003362:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8003364:	4618      	mov	r0, r3
}
 8003366:	4770      	bx	lr
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003368:	f027 0703 	bic.w	r7, r7, #3
    tmpccmr1 |= TIM_ICSelection;
 800336c:	433d      	orrs	r5, r7
 800336e:	e7b8      	b.n	80032e2 <HAL_TIM_IC_ConfigChannel+0x9e>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003370:	f426 7680 	bic.w	r6, r6, #256	; 0x100
    TIM_TI3_SetConfig(htim->Instance,
 8003374:	684d      	ldr	r5, [r1, #4]
 8003376:	68cc      	ldr	r4, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003378:	621e      	str	r6, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800337a:	69df      	ldr	r7, [r3, #28]
  tmpccer = TIMx->CCER;
 800337c:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800337e:	f027 0703 	bic.w	r7, r7, #3
  tmpccmr2 |= TIM_ICSelection;
 8003382:	433d      	orrs	r5, r7
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003384:	0212      	lsls	r2, r2, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003386:	0124      	lsls	r4, r4, #4
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003388:	f025 05f0 	bic.w	r5, r5, #240	; 0xf0
  tmpccer &= ~(TIM_CCER_CC3P);
 800338c:	f426 7600 	bic.w	r6, r6, #512	; 0x200
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003390:	f402 7200 	and.w	r2, r2, #512	; 0x200
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003394:	b2e4      	uxtb	r4, r4
 8003396:	432c      	orrs	r4, r5
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003398:	4332      	orrs	r2, r6
  TIMx->CCMR2 = tmpccmr2;
 800339a:	61dc      	str	r4, [r3, #28]
  TIMx->CCER = tmpccer;
 800339c:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800339e:	69dc      	ldr	r4, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80033a0:	688d      	ldr	r5, [r1, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80033a2:	f024 040c 	bic.w	r4, r4, #12
 80033a6:	61dc      	str	r4, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80033a8:	69da      	ldr	r2, [r3, #28]
 80033aa:	432a      	orrs	r2, r5
 80033ac:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80033ae:	2300      	movs	r3, #0
 80033b0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80033b4:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80033b6:	4618      	mov	r0, r3
}
 80033b8:	4770      	bx	lr
  __HAL_LOCK(htim);
 80033ba:	2002      	movs	r0, #2
}
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40012c00 	.word	0x40012c00

080033c4 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80033c4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	f000 80cb 	beq.w	8003564 <HAL_TIM_PWM_ConfigChannel+0x1a0>
 80033ce:	2301      	movs	r3, #1
{
 80033d0:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 80033d2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80033d6:	2a0c      	cmp	r2, #12
 80033d8:	d831      	bhi.n	800343e <HAL_TIM_PWM_ConfigChannel+0x7a>
 80033da:	e8df f002 	tbb	[pc, r2]
 80033de:	3007      	.short	0x3007
 80033e0:	30663030 	.word	0x30663030
 80033e4:	30953030 	.word	0x30953030
 80033e8:	3030      	.short	0x3030
 80033ea:	36          	.byte	0x36
 80033eb:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033ec:	6803      	ldr	r3, [r0, #0]
  tmpccer |= OC_Config->OCPolarity;
 80033ee:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033f0:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 80033f2:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033f4:	f025 0501 	bic.w	r5, r5, #1
 80033f8:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80033fa:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033fc:	4d73      	ldr	r5, [pc, #460]	; (80035cc <HAL_TIM_PWM_ConfigChannel+0x208>)
  tmpcr2 =  TIMx->CR2;
 80033fe:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8003402:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8003404:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003408:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800340c:	42ab      	cmp	r3, r5
  tmpccer |= OC_Config->OCPolarity;
 800340e:	ea42 0207 	orr.w	r2, r2, r7
  tmpccmrx |= OC_Config->OCMode;
 8003412:	ea44 0406 	orr.w	r4, r4, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003416:	f000 80a7 	beq.w	8003568 <HAL_TIM_PWM_ConfigChannel+0x1a4>
  TIMx->CCR1 = OC_Config->Pulse;
 800341a:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800341c:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003420:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003422:	635d      	str	r5, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8003424:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003426:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003428:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800342a:	f044 0408 	orr.w	r4, r4, #8
 800342e:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003430:	6999      	ldr	r1, [r3, #24]
 8003432:	f021 0104 	bic.w	r1, r1, #4
 8003436:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	432a      	orrs	r2, r5
 800343c:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800343e:	2300      	movs	r3, #0
 8003440:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8003444:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8003446:	4618      	mov	r0, r3
}
 8003448:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800344a:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800344c:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800344e:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003450:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003452:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8003456:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8003458:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800345a:	4d5c      	ldr	r5, [pc, #368]	; (80035cc <HAL_TIM_PWM_ConfigChannel+0x208>)
  tmpcr2 =  TIMx->CR2;
 800345c:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8003460:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8003462:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003466:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800346a:	42ab      	cmp	r3, r5
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800346c:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003470:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003474:	f000 8095 	beq.w	80035a2 <HAL_TIM_PWM_ConfigChannel+0x1de>
  TIMx->CCR4 = OC_Config->Pulse;
 8003478:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800347a:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800347e:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8003480:	641d      	str	r5, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8003482:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003484:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003486:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003488:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 800348c:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800348e:	69d9      	ldr	r1, [r3, #28]
 8003490:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003494:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003496:	69da      	ldr	r2, [r3, #28]
 8003498:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800349c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 800349e:	2300      	movs	r3, #0
 80034a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80034a4:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80034a6:	4618      	mov	r0, r3
}
 80034a8:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034aa:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034ac:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034ae:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034b0:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034b2:	f025 0510 	bic.w	r5, r5, #16
 80034b6:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80034b8:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034ba:	4d44      	ldr	r5, [pc, #272]	; (80035cc <HAL_TIM_PWM_ConfigChannel+0x208>)
  tmpcr2 =  TIMx->CR2;
 80034bc:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80034c0:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 80034c2:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034c6:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034ca:	42ab      	cmp	r3, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034cc:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034d0:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034d4:	d056      	beq.n	8003584 <HAL_TIM_PWM_ConfigChannel+0x1c0>
  TIMx->CCR2 = OC_Config->Pulse;
 80034d6:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80034d8:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80034dc:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80034de:	639d      	str	r5, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80034e0:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034e2:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034e4:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034e6:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 80034ea:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034ec:	6999      	ldr	r1, [r3, #24]
 80034ee:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80034f2:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034f4:	699a      	ldr	r2, [r3, #24]
 80034f6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80034fa:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80034fc:	2300      	movs	r3, #0
 80034fe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8003502:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8003504:	4618      	mov	r0, r3
}
 8003506:	4770      	bx	lr
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003508:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800350a:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800350c:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800350e:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003510:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8003514:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8003516:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003518:	4d2c      	ldr	r5, [pc, #176]	; (80035cc <HAL_TIM_PWM_ConfigChannel+0x208>)
  tmpcr2 =  TIMx->CR2;
 800351a:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800351e:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8003520:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003524:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003528:	42ab      	cmp	r3, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800352a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 800352e:	ea44 0406 	orr.w	r4, r4, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003532:	d03c      	beq.n	80035ae <HAL_TIM_PWM_ConfigChannel+0x1ea>
  TIMx->CCR3 = OC_Config->Pulse;
 8003534:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003536:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800353a:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800353c:	63dd      	str	r5, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800353e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003540:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003542:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003544:	f044 0408 	orr.w	r4, r4, #8
 8003548:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800354a:	69d9      	ldr	r1, [r3, #28]
 800354c:	f021 0104 	bic.w	r1, r1, #4
 8003550:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003552:	69da      	ldr	r2, [r3, #28]
 8003554:	432a      	orrs	r2, r5
 8003556:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8003558:	2300      	movs	r3, #0
 800355a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 800355e:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8003560:	4618      	mov	r0, r3
}
 8003562:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003564:	2002      	movs	r0, #2
}
 8003566:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8003568:	68cf      	ldr	r7, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800356a:	f022 0208 	bic.w	r2, r2, #8
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800356e:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 8003572:	433a      	orrs	r2, r7
    tmpcr2 |= OC_Config->OCNIdleState;
 8003574:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8003578:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800357a:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800357e:	ea45 0c0c 	orr.w	ip, r5, ip
 8003582:	e74a      	b.n	800341a <HAL_TIM_PWM_ConfigChannel+0x56>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003584:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003586:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800358a:	f42c 6c40 	bic.w	ip, ip, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800358e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003592:	e9d1 7505 	ldrd	r7, r5, [r1, #20]
 8003596:	433d      	orrs	r5, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8003598:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800359c:	ea4c 0c85 	orr.w	ip, ip, r5, lsl #2
 80035a0:	e799      	b.n	80034d6 <HAL_TIM_PWM_ConfigChannel+0x112>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035a2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035a4:	f42c 4c80 	bic.w	ip, ip, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035a8:	ea4c 1c85 	orr.w	ip, ip, r5, lsl #6
 80035ac:	e764      	b.n	8003478 <HAL_TIM_PWM_ConfigChannel+0xb4>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035ae:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80035b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035b4:	f42c 5c40 	bic.w	ip, ip, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035b8:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035bc:	e9d1 7505 	ldrd	r7, r5, [r1, #20]
 80035c0:	433d      	orrs	r5, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 80035c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035c6:	ea4c 1c05 	orr.w	ip, ip, r5, lsl #4
 80035ca:	e7b3      	b.n	8003534 <HAL_TIM_PWM_ConfigChannel+0x170>
 80035cc:	40012c00 	.word	0x40012c00

080035d0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80035d0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d074      	beq.n	80036c2 <HAL_TIM_ConfigClockSource+0xf2>
{
 80035d8:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 80035da:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80035dc:	2401      	movs	r4, #1
  tmpsmcr = htim->Instance->SMCR;
 80035de:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 80035e0:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80035e4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80035e8:	6894      	ldr	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80035ea:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035ec:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 80035f0:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 80035f4:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 80035f6:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80035f8:	d065      	beq.n	80036c6 <HAL_TIM_ConfigClockSource+0xf6>
 80035fa:	d831      	bhi.n	8003660 <HAL_TIM_ConfigClockSource+0x90>
 80035fc:	2b40      	cmp	r3, #64	; 0x40
 80035fe:	d048      	beq.n	8003692 <HAL_TIM_ConfigClockSource+0xc2>
 8003600:	d921      	bls.n	8003646 <HAL_TIM_ConfigClockSource+0x76>
 8003602:	2b50      	cmp	r3, #80	; 0x50
 8003604:	d116      	bne.n	8003634 <HAL_TIM_ConfigClockSource+0x64>
  tmpccer = TIMx->CCER;
 8003606:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003608:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800360a:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800360c:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003610:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003612:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003614:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003616:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800361a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800361e:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003622:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8003624:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8003626:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8003628:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800362a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800362e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8003632:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 8003634:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003636:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8003638:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 800363c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
}
 8003640:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8003642:	4618      	mov	r0, r3
}
 8003644:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003646:	2b20      	cmp	r3, #32
 8003648:	d002      	beq.n	8003650 <HAL_TIM_ConfigClockSource+0x80>
 800364a:	d91e      	bls.n	800368a <HAL_TIM_ConfigClockSource+0xba>
 800364c:	2b30      	cmp	r3, #48	; 0x30
 800364e:	d1f1      	bne.n	8003634 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 8003650:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003652:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003656:	430b      	orrs	r3, r1
 8003658:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800365c:	6093      	str	r3, [r2, #8]
}
 800365e:	e7e9      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8003660:	2b70      	cmp	r3, #112	; 0x70
 8003662:	d049      	beq.n	80036f8 <HAL_TIM_ConfigClockSource+0x128>
 8003664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003668:	d1e4      	bne.n	8003634 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800366a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 800366e:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8003670:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003672:	432b      	orrs	r3, r5
 8003674:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003678:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800367c:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800367e:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003680:	6893      	ldr	r3, [r2, #8]
 8003682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003686:	6093      	str	r3, [r2, #8]
      break;
 8003688:	e7d4      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 800368a:	f033 0110 	bics.w	r1, r3, #16
 800368e:	d1d1      	bne.n	8003634 <HAL_TIM_ConfigClockSource+0x64>
 8003690:	e7de      	b.n	8003650 <HAL_TIM_ConfigClockSource+0x80>
  tmpccer = TIMx->CCER;
 8003692:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003694:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003696:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003698:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800369c:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800369e:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036a0:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036a2:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036aa:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80036ae:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80036b0:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 80036b2:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80036b4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80036b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036ba:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80036be:	6093      	str	r3, [r2, #8]
}
 80036c0:	e7b8      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x64>
  __HAL_LOCK(htim);
 80036c2:	2002      	movs	r0, #2
}
 80036c4:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036c6:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036c8:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036ca:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036ce:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036d0:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036d2:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 80036d4:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036d6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80036de:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036e2:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80036e6:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 80036e8:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80036ea:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80036ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036f0:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80036f4:	6093      	str	r3, [r2, #8]
}
 80036f6:	e79d      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036f8:	68cc      	ldr	r4, [r1, #12]
 80036fa:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80036fe:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003700:	432b      	orrs	r3, r5
 8003702:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003706:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800370a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800370c:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 800370e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003710:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003714:	6093      	str	r3, [r2, #8]
      break;
 8003716:	e78d      	b.n	8003634 <HAL_TIM_ConfigClockSource+0x64>

08003718 <HAL_TIM_ConfigTI1Input>:
  tmpcr2 = htim->Instance->CR2;
 8003718:	6802      	ldr	r2, [r0, #0]
}
 800371a:	2000      	movs	r0, #0
  tmpcr2 = htim->Instance->CR2;
 800371c:	6853      	ldr	r3, [r2, #4]
  tmpcr2 &= ~TIM_CR2_TI1S;
 800371e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr2 |= TI1_Selection;
 8003722:	430b      	orrs	r3, r1
  htim->Instance->CR2 = tmpcr2;
 8003724:	6053      	str	r3, [r2, #4]
}
 8003726:	4770      	bx	lr

08003728 <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 8003728:	290c      	cmp	r1, #12
 800372a:	d808      	bhi.n	800373e <HAL_TIM_ReadCapturedValue+0x16>
 800372c:	e8df f001 	tbb	[pc, r1]
 8003730:	0707070c 	.word	0x0707070c
 8003734:	0707070f 	.word	0x0707070f
 8003738:	07070712 	.word	0x07070712
 800373c:	09          	.byte	0x09
 800373d:	00          	.byte	0x00
{
 800373e:	2000      	movs	r0, #0
}
 8003740:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR4;
 8003742:	6803      	ldr	r3, [r0, #0]
 8003744:	6c18      	ldr	r0, [r3, #64]	; 0x40
      break;
 8003746:	4770      	bx	lr
      tmpreg =  htim->Instance->CCR1;
 8003748:	6803      	ldr	r3, [r0, #0]
 800374a:	6b58      	ldr	r0, [r3, #52]	; 0x34
      break;
 800374c:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 800374e:	6803      	ldr	r3, [r0, #0]
 8003750:	6b98      	ldr	r0, [r3, #56]	; 0x38
      break;
 8003752:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 8003754:	6803      	ldr	r3, [r0, #0]
 8003756:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      break;
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop

0800375c <HAL_TIM_OC_DelayElapsedCallback>:
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop

08003760 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop

08003764 <HAL_TIM_TriggerCallback>:
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop

08003768 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003768:	6803      	ldr	r3, [r0, #0]
{
 800376a:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800376c:	691a      	ldr	r2, [r3, #16]
{
 800376e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003770:	0791      	lsls	r1, r2, #30
 8003772:	d502      	bpl.n	800377a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003774:	68da      	ldr	r2, [r3, #12]
 8003776:	0792      	lsls	r2, r2, #30
 8003778:	d45f      	bmi.n	800383a <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800377a:	691a      	ldr	r2, [r3, #16]
 800377c:	0750      	lsls	r0, r2, #29
 800377e:	d502      	bpl.n	8003786 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	0751      	lsls	r1, r2, #29
 8003784:	d446      	bmi.n	8003814 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003786:	691a      	ldr	r2, [r3, #16]
 8003788:	0712      	lsls	r2, r2, #28
 800378a:	d502      	bpl.n	8003792 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	0710      	lsls	r0, r2, #28
 8003790:	d42e      	bmi.n	80037f0 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	06d2      	lsls	r2, r2, #27
 8003796:	d502      	bpl.n	800379e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	06d0      	lsls	r0, r2, #27
 800379c:	d418      	bmi.n	80037d0 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800379e:	691a      	ldr	r2, [r3, #16]
 80037a0:	07d1      	lsls	r1, r2, #31
 80037a2:	d502      	bpl.n	80037aa <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	07d2      	lsls	r2, r2, #31
 80037a8:	d45d      	bmi.n	8003866 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037aa:	691a      	ldr	r2, [r3, #16]
 80037ac:	0610      	lsls	r0, r2, #24
 80037ae:	d502      	bpl.n	80037b6 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037b0:	68da      	ldr	r2, [r3, #12]
 80037b2:	0611      	lsls	r1, r2, #24
 80037b4:	d45f      	bmi.n	8003876 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037b6:	691a      	ldr	r2, [r3, #16]
 80037b8:	0652      	lsls	r2, r2, #25
 80037ba:	d502      	bpl.n	80037c2 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	0650      	lsls	r0, r2, #25
 80037c0:	d461      	bmi.n	8003886 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037c2:	691a      	ldr	r2, [r3, #16]
 80037c4:	0691      	lsls	r1, r2, #26
 80037c6:	d502      	bpl.n	80037ce <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	0692      	lsls	r2, r2, #26
 80037cc:	d443      	bmi.n	8003856 <HAL_TIM_IRQHandler+0xee>
}
 80037ce:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037d0:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037d4:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037d6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037d8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037da:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80037dc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037de:	f413 7f40 	tst.w	r3, #768	; 0x300
 80037e2:	d064      	beq.n	80038ae <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80037e4:	f7fd ff96 	bl	8001714 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e8:	2200      	movs	r2, #0
 80037ea:	6823      	ldr	r3, [r4, #0]
 80037ec:	7722      	strb	r2, [r4, #28]
 80037ee:	e7d6      	b.n	800379e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037f0:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037f4:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037f6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037f8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037fa:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80037fc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037fe:	0799      	lsls	r1, r3, #30
 8003800:	d152      	bne.n	80038a8 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003802:	f7ff ffab 	bl	800375c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003806:	4620      	mov	r0, r4
 8003808:	f7ff ffaa 	bl	8003760 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380c:	2200      	movs	r2, #0
 800380e:	6823      	ldr	r3, [r4, #0]
 8003810:	7722      	strb	r2, [r4, #28]
 8003812:	e7be      	b.n	8003792 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003814:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003818:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800381a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800381c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800381e:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8003820:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003822:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003826:	d13c      	bne.n	80038a2 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003828:	f7ff ff98 	bl	800375c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800382c:	4620      	mov	r0, r4
 800382e:	f7ff ff97 	bl	8003760 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003832:	2200      	movs	r2, #0
 8003834:	6823      	ldr	r3, [r4, #0]
 8003836:	7722      	strb	r2, [r4, #28]
 8003838:	e7a5      	b.n	8003786 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800383a:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800383e:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003840:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003842:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	079b      	lsls	r3, r3, #30
 8003848:	d025      	beq.n	8003896 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800384a:	f7fd ff63 	bl	8001714 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800384e:	2200      	movs	r2, #0
 8003850:	6823      	ldr	r3, [r4, #0]
 8003852:	7722      	strb	r2, [r4, #28]
 8003854:	e791      	b.n	800377a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003856:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800385a:	4620      	mov	r0, r4
}
 800385c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003860:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003862:	f000 b859 	b.w	8003918 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003866:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800386a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800386c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800386e:	f7fd fe3d 	bl	80014ec <HAL_TIM_PeriodElapsedCallback>
 8003872:	6823      	ldr	r3, [r4, #0]
 8003874:	e799      	b.n	80037aa <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003876:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800387a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800387c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800387e:	f000 f84d 	bl	800391c <HAL_TIMEx_BreakCallback>
 8003882:	6823      	ldr	r3, [r4, #0]
 8003884:	e797      	b.n	80037b6 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003886:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800388a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800388c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800388e:	f7ff ff69 	bl	8003764 <HAL_TIM_TriggerCallback>
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	e795      	b.n	80037c2 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003896:	f7ff ff61 	bl	800375c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800389a:	4620      	mov	r0, r4
 800389c:	f7ff ff60 	bl	8003760 <HAL_TIM_PWM_PulseFinishedCallback>
 80038a0:	e7d5      	b.n	800384e <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 80038a2:	f7fd ff37 	bl	8001714 <HAL_TIM_IC_CaptureCallback>
 80038a6:	e7c4      	b.n	8003832 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 80038a8:	f7fd ff34 	bl	8001714 <HAL_TIM_IC_CaptureCallback>
 80038ac:	e7ae      	b.n	800380c <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ae:	f7ff ff55 	bl	800375c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b2:	4620      	mov	r0, r4
 80038b4:	f7ff ff54 	bl	8003760 <HAL_TIM_PWM_PulseFinishedCallback>
 80038b8:	e796      	b.n	80037e8 <HAL_TIM_IRQHandler+0x80>
 80038ba:	bf00      	nop

080038bc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038bc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d022      	beq.n	800390a <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c4:	2202      	movs	r2, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038c6:	6803      	ldr	r3, [r0, #0]
{
 80038c8:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80038ca:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80038ce:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038d0:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038d2:	4d0f      	ldr	r5, [pc, #60]	; (8003910 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  tmpcr2 &= ~TIM_CR2_MMS;
 80038d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038d8:	4322      	orrs	r2, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038da:	42ab      	cmp	r3, r5
  tmpsmcr = htim->Instance->SMCR;
 80038dc:	689c      	ldr	r4, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 80038de:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038e0:	d005      	beq.n	80038ee <HAL_TIMEx_MasterConfigSynchronization+0x32>
 80038e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e6:	d002      	beq.n	80038ee <HAL_TIMEx_MasterConfigSynchronization+0x32>
 80038e8:	4a0a      	ldr	r2, [pc, #40]	; (8003914 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d104      	bne.n	80038f8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038ee:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038f0:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038f4:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038f6:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80038f8:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80038fa:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 80038fc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8003900:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  return HAL_OK;
}
 8003904:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8003906:	4618      	mov	r0, r3
}
 8003908:	4770      	bx	lr
  __HAL_LOCK(htim);
 800390a:	2002      	movs	r0, #2
}
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	40012c00 	.word	0x40012c00
 8003914:	40000400 	.word	0x40000400

08003918 <HAL_TIMEx_CommutCallback>:
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop

0800391c <HAL_TIMEx_BreakCallback>:
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop

08003920 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003920:	2800      	cmp	r0, #0
 8003922:	d061      	beq.n	80039e8 <HAL_UART_Init+0xc8>
{
 8003924:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003926:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800392a:	4604      	mov	r4, r0
 800392c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003930:	2b00      	cmp	r3, #0
 8003932:	d051      	beq.n	80039d8 <HAL_UART_Init+0xb8>
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003934:	2224      	movs	r2, #36	; 0x24

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003936:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003938:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800393c:	68da      	ldr	r2, [r3, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800393e:	68e0      	ldr	r0, [r4, #12]
  __HAL_UART_DISABLE(huart);
 8003940:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003944:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003946:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003948:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800394a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800394e:	4301      	orrs	r1, r0
 8003950:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003952:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003954:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003958:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800395c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 800395e:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003962:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8003964:	430a      	orrs	r2, r1
 8003966:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003968:	695a      	ldr	r2, [r3, #20]
 800396a:	69a0      	ldr	r0, [r4, #24]


  if(huart->Instance == USART1)
 800396c:	491f      	ldr	r1, [pc, #124]	; (80039ec <HAL_UART_Init+0xcc>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800396e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003972:	4302      	orrs	r2, r0
  if(huart->Instance == USART1)
 8003974:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003976:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 8003978:	d033      	beq.n	80039e2 <HAL_UART_Init+0xc2>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800397a:	f7ff fa03 	bl	8002d84 <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800397e:	6863      	ldr	r3, [r4, #4]
 8003980:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003984:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	fbb0 f3f3 	udiv	r3, r0, r3
 800398e:	2264      	movs	r2, #100	; 0x64
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003990:	2600      	movs	r6, #0
  huart->gState = HAL_UART_STATE_READY;
 8003992:	2520      	movs	r5, #32
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003994:	4816      	ldr	r0, [pc, #88]	; (80039f0 <HAL_UART_Init+0xd0>)
 8003996:	fba0 c103 	umull	ip, r1, r0, r3
 800399a:	0949      	lsrs	r1, r1, #5
 800399c:	fb02 3311 	mls	r3, r2, r1, r3
 80039a0:	011b      	lsls	r3, r3, #4
 80039a2:	3332      	adds	r3, #50	; 0x32
 80039a4:	fba0 2303 	umull	r2, r3, r0, r3
 80039a8:	0109      	lsls	r1, r1, #4
 80039aa:	6822      	ldr	r2, [r4, #0]
 80039ac:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 80039b0:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039b2:	6913      	ldr	r3, [r2, #16]
  return HAL_OK;
 80039b4:	4630      	mov	r0, r6
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039b6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80039ba:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039bc:	6953      	ldr	r3, [r2, #20]
 80039be:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80039c2:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80039c4:	68d3      	ldr	r3, [r2, #12]
 80039c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80039ca:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039cc:	6426      	str	r6, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039ce:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039d2:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 80039d6:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 80039d8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80039dc:	f7fe fbb8 	bl	8002150 <HAL_UART_MspInit>
 80039e0:	e7a8      	b.n	8003934 <HAL_UART_Init+0x14>
    pclk = HAL_RCC_GetPCLK2Freq();
 80039e2:	f7ff f9df 	bl	8002da4 <HAL_RCC_GetPCLK2Freq>
 80039e6:	e7ca      	b.n	800397e <HAL_UART_Init+0x5e>
    return HAL_ERROR;
 80039e8:	2001      	movs	r0, #1
}
 80039ea:	4770      	bx	lr
 80039ec:	40013800 	.word	0x40013800
 80039f0:	51eb851f 	.word	0x51eb851f

080039f4 <HAL_UART_Transmit>:
{
 80039f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039f8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80039fa:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 80039fe:	2820      	cmp	r0, #32
 8003a00:	d168      	bne.n	8003ad4 <HAL_UART_Transmit+0xe0>
    if ((pData == NULL) || (Size == 0U))
 8003a02:	4688      	mov	r8, r1
 8003a04:	2900      	cmp	r1, #0
 8003a06:	d040      	beq.n	8003a8a <HAL_UART_Transmit+0x96>
 8003a08:	4617      	mov	r7, r2
 8003a0a:	2a00      	cmp	r2, #0
 8003a0c:	d03d      	beq.n	8003a8a <HAL_UART_Transmit+0x96>
 8003a0e:	461d      	mov	r5, r3
    __HAL_LOCK(huart);
 8003a10:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d05d      	beq.n	8003ad4 <HAL_UART_Transmit+0xe0>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a18:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8003a1a:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a1c:	f04f 0900 	mov.w	r9, #0
    __HAL_LOCK(huart);
 8003a20:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a24:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a28:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8003a2c:	f7fe fcd6 	bl	80023dc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a30:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8003a32:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8003a38:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a3a:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a3c:	d04d      	beq.n	8003ada <HAL_UART_Transmit+0xe6>
    __HAL_UNLOCK(huart);
 8003a3e:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8003a40:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8003a42:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d058      	beq.n	8003afe <HAL_UART_Transmit+0x10a>
 8003a4c:	6822      	ldr	r2, [r4, #0]
 8003a4e:	1c69      	adds	r1, r5, #1
 8003a50:	d11e      	bne.n	8003a90 <HAL_UART_Transmit+0x9c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a52:	6813      	ldr	r3, [r2, #0]
 8003a54:	061b      	lsls	r3, r3, #24
 8003a56:	d5fc      	bpl.n	8003a52 <HAL_UART_Transmit+0x5e>
      if (pdata8bits == NULL)
 8003a58:	f1b8 0f00 	cmp.w	r8, #0
 8003a5c:	d035      	beq.n	8003aca <HAL_UART_Transmit+0xd6>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a5e:	f818 3b01 	ldrb.w	r3, [r8], #1
 8003a62:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8003a64:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	84e3      	strh	r3, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a6c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1ec      	bne.n	8003a4e <HAL_UART_Transmit+0x5a>
 8003a74:	1c68      	adds	r0, r5, #1
 8003a76:	d136      	bne.n	8003ae6 <HAL_UART_Transmit+0xf2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a78:	6813      	ldr	r3, [r2, #0]
 8003a7a:	0659      	lsls	r1, r3, #25
 8003a7c:	d5fc      	bpl.n	8003a78 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8003a7e:	2320      	movs	r3, #32
 8003a80:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8003a84:	2000      	movs	r0, #0
}
 8003a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8003a8a:	2001      	movs	r0, #1
}
 8003a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a90:	6813      	ldr	r3, [r2, #0]
 8003a92:	061f      	lsls	r7, r3, #24
 8003a94:	d4e0      	bmi.n	8003a58 <HAL_UART_Transmit+0x64>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a96:	b12d      	cbz	r5, 8003aa4 <HAL_UART_Transmit+0xb0>
 8003a98:	f7fe fca0 	bl	80023dc <HAL_GetTick>
 8003a9c:	1b80      	subs	r0, r0, r6
 8003a9e:	4285      	cmp	r5, r0
 8003aa0:	6822      	ldr	r2, [r4, #0]
 8003aa2:	d2d4      	bcs.n	8003a4e <HAL_UART_Transmit+0x5a>
        huart->gState  = HAL_UART_STATE_READY;
 8003aa4:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8003aa6:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003aa8:	68d3      	ldr	r3, [r2, #12]
      return HAL_TIMEOUT;
 8003aaa:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003aac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ab0:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab2:	6953      	ldr	r3, [r2, #20]
 8003ab4:	f023 0301 	bic.w	r3, r3, #1
 8003ab8:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8003aba:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8003abe:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8003ac2:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
}
 8003ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003aca:	f839 3b02 	ldrh.w	r3, [r9], #2
 8003ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ad2:	e7c6      	b.n	8003a62 <HAL_UART_Transmit+0x6e>
    return HAL_BUSY;
 8003ad4:	2002      	movs	r0, #2
}
 8003ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ada:	6923      	ldr	r3, [r4, #16]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1ae      	bne.n	8003a3e <HAL_UART_Transmit+0x4a>
 8003ae0:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 8003ae2:	4698      	mov	r8, r3
 8003ae4:	e7ab      	b.n	8003a3e <HAL_UART_Transmit+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ae6:	6813      	ldr	r3, [r2, #0]
 8003ae8:	065b      	lsls	r3, r3, #25
 8003aea:	d4c8      	bmi.n	8003a7e <HAL_UART_Transmit+0x8a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003aec:	2d00      	cmp	r5, #0
 8003aee:	d0d9      	beq.n	8003aa4 <HAL_UART_Transmit+0xb0>
 8003af0:	f7fe fc74 	bl	80023dc <HAL_GetTick>
 8003af4:	1b80      	subs	r0, r0, r6
 8003af6:	4285      	cmp	r5, r0
 8003af8:	6822      	ldr	r2, [r4, #0]
 8003afa:	d2bb      	bcs.n	8003a74 <HAL_UART_Transmit+0x80>
 8003afc:	e7d2      	b.n	8003aa4 <HAL_UART_Transmit+0xb0>
 8003afe:	6822      	ldr	r2, [r4, #0]
 8003b00:	e7b8      	b.n	8003a74 <HAL_UART_Transmit+0x80>
 8003b02:	bf00      	nop

08003b04 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b04:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003b08:	2b20      	cmp	r3, #32
 8003b0a:	d123      	bne.n	8003b54 <HAL_UART_Receive_IT+0x50>
    if ((pData == NULL) || (Size == 0U))
 8003b0c:	b301      	cbz	r1, 8003b50 <HAL_UART_Receive_IT+0x4c>
 8003b0e:	b1fa      	cbz	r2, 8003b50 <HAL_UART_Receive_IT+0x4c>
    __HAL_LOCK(huart);
 8003b10:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d01d      	beq.n	8003b54 <HAL_UART_Receive_IT+0x50>
{
 8003b18:	b430      	push	{r4, r5}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b1a:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b1c:	2522      	movs	r5, #34	; 0x22
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b1e:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b20:	6303      	str	r3, [r0, #48]	; 0x30
  __HAL_UNLOCK(huart);
 8003b22:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  huart->RxXferCount = Size;
 8003b26:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b28:	6403      	str	r3, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b2a:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b2e:	68e5      	ldr	r5, [r4, #12]
  huart->RxXferSize = Size;
 8003b30:	8582      	strh	r2, [r0, #44]	; 0x2c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b32:	f445 7580 	orr.w	r5, r5, #256	; 0x100
  huart->pRxBuffPtr = pData;
 8003b36:	6281      	str	r1, [r0, #40]	; 0x28
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b38:	60e5      	str	r5, [r4, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b3a:	6962      	ldr	r2, [r4, #20]
    return(UART_Start_Receive_IT(huart, pData, Size));
 8003b3c:	4618      	mov	r0, r3
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b3e:	f042 0201 	orr.w	r2, r2, #1
 8003b42:	6162      	str	r2, [r4, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b44:	68e3      	ldr	r3, [r4, #12]
 8003b46:	f043 0320 	orr.w	r3, r3, #32
 8003b4a:	60e3      	str	r3, [r4, #12]
}
 8003b4c:	bc30      	pop	{r4, r5}
 8003b4e:	4770      	bx	lr
      return HAL_ERROR;
 8003b50:	2001      	movs	r0, #1
 8003b52:	4770      	bx	lr
    return HAL_BUSY;
 8003b54:	2002      	movs	r0, #2
}
 8003b56:	4770      	bx	lr

08003b58 <HAL_UART_TxCpltCallback>:
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop

08003b5c <HAL_UART_ErrorCallback>:
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop

08003b60 <UART_DMAAbortOnError>:
{
 8003b60:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8003b62:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b64:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8003b66:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b68:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003b6a:	f7ff fff7 	bl	8003b5c <HAL_UART_ErrorCallback>
}
 8003b6e:	bd08      	pop	{r3, pc}

08003b70 <HAL_UARTEx_RxEventCallback>:
}
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop

08003b74 <UART_Receive_IT.part.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b74:	6883      	ldr	r3, [r0, #8]
 8003b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b7a:	d03b      	beq.n	8003bf4 <UART_Receive_IT.part.0+0x80>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b7c:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d02f      	beq.n	8003be2 <UART_Receive_IT.part.0+0x6e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b82:	6803      	ldr	r3, [r0, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b8a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8003b8c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003b8e:	3301      	adds	r3, #1
 8003b90:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8003b92:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8003b94:	3b01      	subs	r3, #1
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8003b9a:	bb4b      	cbnz	r3, 8003bf0 <UART_Receive_IT.part.0+0x7c>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8003b9c:	b510      	push	{r4, lr}
      huart->RxState = HAL_UART_STATE_READY;
 8003b9e:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ba0:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8003ba2:	b082      	sub	sp, #8
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ba4:	68d1      	ldr	r1, [r2, #12]
 8003ba6:	f021 0120 	bic.w	r1, r1, #32
 8003baa:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003bac:	68d1      	ldr	r1, [r2, #12]
 8003bae:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003bb2:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003bb4:	6951      	ldr	r1, [r2, #20]
 8003bb6:	f021 0101 	bic.w	r1, r1, #1
 8003bba:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003bbc:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bc0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8003bc2:	2901      	cmp	r1, #1
 8003bc4:	d121      	bne.n	8003c0a <UART_Receive_IT.part.0+0x96>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc6:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bc8:	68d1      	ldr	r1, [r2, #12]
 8003bca:	f021 0110 	bic.w	r1, r1, #16
 8003bce:	60d1      	str	r1, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003bd0:	6811      	ldr	r1, [r2, #0]
 8003bd2:	06c9      	lsls	r1, r1, #27
 8003bd4:	d423      	bmi.n	8003c1e <UART_Receive_IT.part.0+0xaa>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bd6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8003bd8:	f7ff ffca 	bl	8003b70 <HAL_UARTEx_RxEventCallback>
}
 8003bdc:	2000      	movs	r0, #0
 8003bde:	b002      	add	sp, #8
 8003be0:	bd10      	pop	{r4, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003be2:	6903      	ldr	r3, [r0, #16]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1cc      	bne.n	8003b82 <UART_Receive_IT.part.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003be8:	6803      	ldr	r3, [r0, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	7013      	strb	r3, [r2, #0]
 8003bee:	e7cd      	b.n	8003b8c <UART_Receive_IT.part.0+0x18>
}
 8003bf0:	2000      	movs	r0, #0
 8003bf2:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bf4:	6903      	ldr	r3, [r0, #16]
 8003bf6:	b96b      	cbnz	r3, 8003c14 <UART_Receive_IT.part.0+0xa0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003bf8:	6802      	ldr	r2, [r0, #0]
 8003bfa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003bfc:	6852      	ldr	r2, [r2, #4]
 8003bfe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c02:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8003c06:	6283      	str	r3, [r0, #40]	; 0x28
 8003c08:	e7c3      	b.n	8003b92 <UART_Receive_IT.part.0+0x1e>
       HAL_UART_RxCpltCallback(huart);
 8003c0a:	f7fd fd51 	bl	80016b0 <HAL_UART_RxCpltCallback>
}
 8003c0e:	2000      	movs	r0, #0
 8003c10:	b002      	add	sp, #8
 8003c12:	bd10      	pop	{r4, pc}
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c14:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c16:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	7013      	strb	r3, [r2, #0]
 8003c1c:	e7b6      	b.n	8003b8c <UART_Receive_IT.part.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c1e:	9301      	str	r3, [sp, #4]
 8003c20:	6813      	ldr	r3, [r2, #0]
 8003c22:	9301      	str	r3, [sp, #4]
 8003c24:	6853      	ldr	r3, [r2, #4]
 8003c26:	9301      	str	r3, [sp, #4]
 8003c28:	9b01      	ldr	r3, [sp, #4]
 8003c2a:	e7d4      	b.n	8003bd6 <UART_Receive_IT.part.0+0x62>

08003c2c <HAL_UART_IRQHandler>:
{
 8003c2c:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c2e:	6803      	ldr	r3, [r0, #0]
{
 8003c30:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c32:	681a      	ldr	r2, [r3, #0]
{
 8003c34:	b082      	sub	sp, #8
  if (errorflags == RESET)
 8003c36:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c38:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c3a:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8003c3c:	d14e      	bne.n	8003cdc <HAL_UART_IRQHandler+0xb0>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c3e:	0696      	lsls	r6, r2, #26
 8003c40:	d502      	bpl.n	8003c48 <HAL_UART_IRQHandler+0x1c>
 8003c42:	068d      	lsls	r5, r1, #26
 8003c44:	f100 8090 	bmi.w	8003d68 <HAL_UART_IRQHandler+0x13c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c48:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003c4a:	2801      	cmp	r0, #1
 8003c4c:	d00b      	beq.n	8003c66 <HAL_UART_IRQHandler+0x3a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c4e:	0616      	lsls	r6, r2, #24
 8003c50:	d502      	bpl.n	8003c58 <HAL_UART_IRQHandler+0x2c>
 8003c52:	060d      	lsls	r5, r1, #24
 8003c54:	f100 8092 	bmi.w	8003d7c <HAL_UART_IRQHandler+0x150>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c58:	0650      	lsls	r0, r2, #25
 8003c5a:	d502      	bpl.n	8003c62 <HAL_UART_IRQHandler+0x36>
 8003c5c:	064a      	lsls	r2, r1, #25
 8003c5e:	f100 80ab 	bmi.w	8003db8 <HAL_UART_IRQHandler+0x18c>
}
 8003c62:	b002      	add	sp, #8
 8003c64:	bd70      	pop	{r4, r5, r6, pc}
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003c66:	06d5      	lsls	r5, r2, #27
 8003c68:	d5f1      	bpl.n	8003c4e <HAL_UART_IRQHandler+0x22>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003c6a:	06c8      	lsls	r0, r1, #27
 8003c6c:	d5ef      	bpl.n	8003c4e <HAL_UART_IRQHandler+0x22>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c6e:	2100      	movs	r1, #0
 8003c70:	9101      	str	r1, [sp, #4]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	9201      	str	r2, [sp, #4]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	9201      	str	r2, [sp, #4]
 8003c7a:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c7c:	695a      	ldr	r2, [r3, #20]
 8003c7e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8003c82:	f000 80d2 	beq.w	8003e2a <HAL_UART_IRQHandler+0x1fe>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c86:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003c88:	6802      	ldr	r2, [r0, #0]
 8003c8a:	6852      	ldr	r2, [r2, #4]
 8003c8c:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 8003c8e:	2a00      	cmp	r2, #0
 8003c90:	d0e7      	beq.n	8003c62 <HAL_UART_IRQHandler+0x36>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003c92:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8003c94:	4295      	cmp	r5, r2
 8003c96:	d9e4      	bls.n	8003c62 <HAL_UART_IRQHandler+0x36>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c98:	6986      	ldr	r6, [r0, #24]
        huart->RxXferCount = nb_remaining_rx_data;
 8003c9a:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c9c:	2e20      	cmp	r6, #32
 8003c9e:	d016      	beq.n	8003cce <HAL_UART_IRQHandler+0xa2>
          huart->RxState = HAL_UART_STATE_READY;
 8003ca0:	2520      	movs	r5, #32
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ca2:	68da      	ldr	r2, [r3, #12]
 8003ca4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ca8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003caa:	695a      	ldr	r2, [r3, #20]
 8003cac:	f022 0201 	bic.w	r2, r2, #1
 8003cb0:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cb2:	695a      	ldr	r2, [r3, #20]
 8003cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cb8:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8003cba:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cbe:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	f022 0210 	bic.w	r2, r2, #16
 8003cc6:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cc8:	f7fe fc10 	bl	80024ec <HAL_DMA_Abort>
 8003ccc:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cce:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	1a69      	subs	r1, r5, r1
 8003cd4:	b289      	uxth	r1, r1
 8003cd6:	f7ff ff4b 	bl	8003b70 <HAL_UARTEx_RxEventCallback>
 8003cda:	e7c2      	b.n	8003c62 <HAL_UART_IRQHandler+0x36>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003cdc:	f005 0501 	and.w	r5, r5, #1
 8003ce0:	f401 7090 	and.w	r0, r1, #288	; 0x120
 8003ce4:	4328      	orrs	r0, r5
 8003ce6:	d0af      	beq.n	8003c48 <HAL_UART_IRQHandler+0x1c>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ce8:	07d0      	lsls	r0, r2, #31
 8003cea:	d505      	bpl.n	8003cf8 <HAL_UART_IRQHandler+0xcc>
 8003cec:	05ce      	lsls	r6, r1, #23
 8003cee:	d503      	bpl.n	8003cf8 <HAL_UART_IRQHandler+0xcc>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cf0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003cf2:	f040 0001 	orr.w	r0, r0, #1
 8003cf6:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cf8:	0750      	lsls	r0, r2, #29
 8003cfa:	d52c      	bpl.n	8003d56 <HAL_UART_IRQHandler+0x12a>
 8003cfc:	b12d      	cbz	r5, 8003d0a <HAL_UART_IRQHandler+0xde>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cfe:	6c20      	ldr	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d00:	0796      	lsls	r6, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d02:	f040 0002 	orr.w	r0, r0, #2
 8003d06:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d08:	d429      	bmi.n	8003d5e <HAL_UART_IRQHandler+0x132>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d0a:	0716      	lsls	r6, r2, #28
 8003d0c:	d507      	bpl.n	8003d1e <HAL_UART_IRQHandler+0xf2>
 8003d0e:	f001 0020 	and.w	r0, r1, #32
 8003d12:	4328      	orrs	r0, r5
 8003d14:	d003      	beq.n	8003d1e <HAL_UART_IRQHandler+0xf2>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d16:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003d18:	f040 0008 	orr.w	r0, r0, #8
 8003d1c:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d1e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003d20:	2800      	cmp	r0, #0
 8003d22:	d09e      	beq.n	8003c62 <HAL_UART_IRQHandler+0x36>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d24:	0690      	lsls	r0, r2, #26
 8003d26:	d509      	bpl.n	8003d3c <HAL_UART_IRQHandler+0x110>
 8003d28:	068a      	lsls	r2, r1, #26
 8003d2a:	d507      	bpl.n	8003d3c <HAL_UART_IRQHandler+0x110>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d2c:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8003d30:	2a22      	cmp	r2, #34	; 0x22
 8003d32:	d103      	bne.n	8003d3c <HAL_UART_IRQHandler+0x110>
 8003d34:	4620      	mov	r0, r4
 8003d36:	f7ff ff1d 	bl	8003b74 <UART_Receive_IT.part.0>
 8003d3a:	6823      	ldr	r3, [r4, #0]
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d3c:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d3e:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d40:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d44:	f005 0508 	and.w	r5, r5, #8
 8003d48:	4315      	orrs	r5, r2
 8003d4a:	d140      	bne.n	8003dce <HAL_UART_IRQHandler+0x1a2>
        HAL_UART_ErrorCallback(huart);
 8003d4c:	4620      	mov	r0, r4
 8003d4e:	f7ff ff05 	bl	8003b5c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d52:	6425      	str	r5, [r4, #64]	; 0x40
 8003d54:	e785      	b.n	8003c62 <HAL_UART_IRQHandler+0x36>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d56:	0790      	lsls	r0, r2, #30
 8003d58:	d5d7      	bpl.n	8003d0a <HAL_UART_IRQHandler+0xde>
 8003d5a:	2d00      	cmp	r5, #0
 8003d5c:	d0d5      	beq.n	8003d0a <HAL_UART_IRQHandler+0xde>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d5e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003d60:	f040 0004 	orr.w	r0, r0, #4
 8003d64:	6420      	str	r0, [r4, #64]	; 0x40
 8003d66:	e7d0      	b.n	8003d0a <HAL_UART_IRQHandler+0xde>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d68:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003d6c:	2b22      	cmp	r3, #34	; 0x22
 8003d6e:	f47f af78 	bne.w	8003c62 <HAL_UART_IRQHandler+0x36>
}
 8003d72:	b002      	add	sp, #8
 8003d74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003d78:	f7ff befc 	b.w	8003b74 <UART_Receive_IT.part.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d7c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003d80:	2a21      	cmp	r2, #33	; 0x21
 8003d82:	f47f af6e 	bne.w	8003c62 <HAL_UART_IRQHandler+0x36>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d86:	68a2      	ldr	r2, [r4, #8]
 8003d88:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003d8c:	d06e      	beq.n	8003e6c <HAL_UART_IRQHandler+0x240>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d8e:	6a22      	ldr	r2, [r4, #32]
 8003d90:	1c51      	adds	r1, r2, #1
 8003d92:	6221      	str	r1, [r4, #32]
 8003d94:	7812      	ldrb	r2, [r2, #0]
 8003d96:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8003d98:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8003d9a:	3a01      	subs	r2, #1
 8003d9c:	b292      	uxth	r2, r2
 8003d9e:	84e2      	strh	r2, [r4, #38]	; 0x26
 8003da0:	2a00      	cmp	r2, #0
 8003da2:	f47f af5e 	bne.w	8003c62 <HAL_UART_IRQHandler+0x36>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dac:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003db4:	60da      	str	r2, [r3, #12]
 8003db6:	e754      	b.n	8003c62 <HAL_UART_IRQHandler+0x36>
  huart->gState = HAL_UART_STATE_READY;
 8003db8:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003dba:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8003dbc:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003dbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dc2:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003dc4:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8003dc8:	f7ff fec6 	bl	8003b58 <HAL_UART_TxCpltCallback>
    return;
 8003dcc:	e749      	b.n	8003c62 <HAL_UART_IRQHandler+0x36>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003dd4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd6:	695a      	ldr	r2, [r3, #20]
 8003dd8:	f022 0201 	bic.w	r2, r2, #1
 8003ddc:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dde:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003de0:	2a01      	cmp	r2, #1
 8003de2:	d103      	bne.n	8003dec <HAL_UART_IRQHandler+0x1c0>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	f022 0210 	bic.w	r2, r2, #16
 8003dea:	60da      	str	r2, [r3, #12]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dec:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8003dee:	2120      	movs	r1, #32
 8003df0:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df4:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df6:	695a      	ldr	r2, [r3, #20]
 8003df8:	0656      	lsls	r6, r2, #25
 8003dfa:	d512      	bpl.n	8003e22 <HAL_UART_IRQHandler+0x1f6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dfc:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8003dfe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e04:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8003e06:	b160      	cbz	r0, 8003e22 <HAL_UART_IRQHandler+0x1f6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e08:	4b1e      	ldr	r3, [pc, #120]	; (8003e84 <HAL_UART_IRQHandler+0x258>)
 8003e0a:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e0c:	f7fe fb90 	bl	8002530 <HAL_DMA_Abort_IT>
 8003e10:	2800      	cmp	r0, #0
 8003e12:	f43f af26 	beq.w	8003c62 <HAL_UART_IRQHandler+0x36>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e16:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003e18:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8003e1a:	b002      	add	sp, #8
 8003e1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e20:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8003e22:	4620      	mov	r0, r4
 8003e24:	f7ff fe9a 	bl	8003b5c <HAL_UART_ErrorCallback>
 8003e28:	e71b      	b.n	8003c62 <HAL_UART_IRQHandler+0x36>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e2a:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      if (  (huart->RxXferCount > 0U)
 8003e2c:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e2e:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 8003e30:	b289      	uxth	r1, r1
 8003e32:	2900      	cmp	r1, #0
 8003e34:	f43f af15 	beq.w	8003c62 <HAL_UART_IRQHandler+0x36>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e38:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8003e3a:	1a08      	subs	r0, r1, r0
 8003e3c:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 8003e3e:	2900      	cmp	r1, #0
 8003e40:	f43f af0f 	beq.w	8003c62 <HAL_UART_IRQHandler+0x36>
        huart->RxState = HAL_UART_STATE_READY;
 8003e44:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e46:	68d8      	ldr	r0, [r3, #12]
 8003e48:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 8003e4c:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e4e:	6958      	ldr	r0, [r3, #20]
 8003e50:	f020 0001 	bic.w	r0, r0, #1
 8003e54:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8003e56:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e5a:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e5c:	68da      	ldr	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e5e:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e60:	f022 0210 	bic.w	r2, r2, #16
 8003e64:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e66:	f7ff fe83 	bl	8003b70 <HAL_UARTEx_RxEventCallback>
 8003e6a:	e6fa      	b.n	8003c62 <HAL_UART_IRQHandler+0x36>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e6c:	6922      	ldr	r2, [r4, #16]
 8003e6e:	2a00      	cmp	r2, #0
 8003e70:	d18d      	bne.n	8003d8e <HAL_UART_IRQHandler+0x162>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e72:	6a22      	ldr	r2, [r4, #32]
 8003e74:	f832 1b02 	ldrh.w	r1, [r2], #2
 8003e78:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003e7c:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e7e:	6222      	str	r2, [r4, #32]
 8003e80:	e78a      	b.n	8003d98 <HAL_UART_IRQHandler+0x16c>
 8003e82:	bf00      	nop
 8003e84:	08003b61 	.word	0x08003b61

08003e88 <atoi>:
 8003e88:	220a      	movs	r2, #10
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	f000 bd38 	b.w	8004900 <strtol>

08003e90 <__errno>:
 8003e90:	4b01      	ldr	r3, [pc, #4]	; (8003e98 <__errno+0x8>)
 8003e92:	6818      	ldr	r0, [r3, #0]
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	2000001c 	.word	0x2000001c

08003e9c <__libc_init_array>:
 8003e9c:	b570      	push	{r4, r5, r6, lr}
 8003e9e:	2600      	movs	r6, #0
 8003ea0:	4d0c      	ldr	r5, [pc, #48]	; (8003ed4 <__libc_init_array+0x38>)
 8003ea2:	4c0d      	ldr	r4, [pc, #52]	; (8003ed8 <__libc_init_array+0x3c>)
 8003ea4:	1b64      	subs	r4, r4, r5
 8003ea6:	10a4      	asrs	r4, r4, #2
 8003ea8:	42a6      	cmp	r6, r4
 8003eaa:	d109      	bne.n	8003ec0 <__libc_init_array+0x24>
 8003eac:	f002 ff4a 	bl	8006d44 <_init>
 8003eb0:	2600      	movs	r6, #0
 8003eb2:	4d0a      	ldr	r5, [pc, #40]	; (8003edc <__libc_init_array+0x40>)
 8003eb4:	4c0a      	ldr	r4, [pc, #40]	; (8003ee0 <__libc_init_array+0x44>)
 8003eb6:	1b64      	subs	r4, r4, r5
 8003eb8:	10a4      	asrs	r4, r4, #2
 8003eba:	42a6      	cmp	r6, r4
 8003ebc:	d105      	bne.n	8003eca <__libc_init_array+0x2e>
 8003ebe:	bd70      	pop	{r4, r5, r6, pc}
 8003ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ec4:	4798      	blx	r3
 8003ec6:	3601      	adds	r6, #1
 8003ec8:	e7ee      	b.n	8003ea8 <__libc_init_array+0xc>
 8003eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ece:	4798      	blx	r3
 8003ed0:	3601      	adds	r6, #1
 8003ed2:	e7f2      	b.n	8003eba <__libc_init_array+0x1e>
 8003ed4:	08007194 	.word	0x08007194
 8003ed8:	08007194 	.word	0x08007194
 8003edc:	08007194 	.word	0x08007194
 8003ee0:	08007198 	.word	0x08007198

08003ee4 <memset>:
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	4402      	add	r2, r0
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d100      	bne.n	8003eee <memset+0xa>
 8003eec:	4770      	bx	lr
 8003eee:	f803 1b01 	strb.w	r1, [r3], #1
 8003ef2:	e7f9      	b.n	8003ee8 <memset+0x4>

08003ef4 <__cvt>:
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003efa:	461f      	mov	r7, r3
 8003efc:	bfbb      	ittet	lt
 8003efe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003f02:	461f      	movlt	r7, r3
 8003f04:	2300      	movge	r3, #0
 8003f06:	232d      	movlt	r3, #45	; 0x2d
 8003f08:	b088      	sub	sp, #32
 8003f0a:	4614      	mov	r4, r2
 8003f0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003f0e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003f10:	7013      	strb	r3, [r2, #0]
 8003f12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003f14:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003f18:	f023 0820 	bic.w	r8, r3, #32
 8003f1c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003f20:	d005      	beq.n	8003f2e <__cvt+0x3a>
 8003f22:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003f26:	d100      	bne.n	8003f2a <__cvt+0x36>
 8003f28:	3501      	adds	r5, #1
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	e000      	b.n	8003f30 <__cvt+0x3c>
 8003f2e:	2303      	movs	r3, #3
 8003f30:	aa07      	add	r2, sp, #28
 8003f32:	9204      	str	r2, [sp, #16]
 8003f34:	aa06      	add	r2, sp, #24
 8003f36:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003f3a:	e9cd 3500 	strd	r3, r5, [sp]
 8003f3e:	4622      	mov	r2, r4
 8003f40:	463b      	mov	r3, r7
 8003f42:	f000 fd75 	bl	8004a30 <_dtoa_r>
 8003f46:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003f4a:	4606      	mov	r6, r0
 8003f4c:	d102      	bne.n	8003f54 <__cvt+0x60>
 8003f4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003f50:	07db      	lsls	r3, r3, #31
 8003f52:	d522      	bpl.n	8003f9a <__cvt+0xa6>
 8003f54:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003f58:	eb06 0905 	add.w	r9, r6, r5
 8003f5c:	d110      	bne.n	8003f80 <__cvt+0x8c>
 8003f5e:	7833      	ldrb	r3, [r6, #0]
 8003f60:	2b30      	cmp	r3, #48	; 0x30
 8003f62:	d10a      	bne.n	8003f7a <__cvt+0x86>
 8003f64:	2200      	movs	r2, #0
 8003f66:	2300      	movs	r3, #0
 8003f68:	4620      	mov	r0, r4
 8003f6a:	4639      	mov	r1, r7
 8003f6c:	f7fc fd1c 	bl	80009a8 <__aeabi_dcmpeq>
 8003f70:	b918      	cbnz	r0, 8003f7a <__cvt+0x86>
 8003f72:	f1c5 0501 	rsb	r5, r5, #1
 8003f76:	f8ca 5000 	str.w	r5, [sl]
 8003f7a:	f8da 3000 	ldr.w	r3, [sl]
 8003f7e:	4499      	add	r9, r3
 8003f80:	2200      	movs	r2, #0
 8003f82:	2300      	movs	r3, #0
 8003f84:	4620      	mov	r0, r4
 8003f86:	4639      	mov	r1, r7
 8003f88:	f7fc fd0e 	bl	80009a8 <__aeabi_dcmpeq>
 8003f8c:	b108      	cbz	r0, 8003f92 <__cvt+0x9e>
 8003f8e:	f8cd 901c 	str.w	r9, [sp, #28]
 8003f92:	2230      	movs	r2, #48	; 0x30
 8003f94:	9b07      	ldr	r3, [sp, #28]
 8003f96:	454b      	cmp	r3, r9
 8003f98:	d307      	bcc.n	8003faa <__cvt+0xb6>
 8003f9a:	4630      	mov	r0, r6
 8003f9c:	9b07      	ldr	r3, [sp, #28]
 8003f9e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003fa0:	1b9b      	subs	r3, r3, r6
 8003fa2:	6013      	str	r3, [r2, #0]
 8003fa4:	b008      	add	sp, #32
 8003fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003faa:	1c59      	adds	r1, r3, #1
 8003fac:	9107      	str	r1, [sp, #28]
 8003fae:	701a      	strb	r2, [r3, #0]
 8003fb0:	e7f0      	b.n	8003f94 <__cvt+0xa0>

08003fb2 <__exponent>:
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fb6:	2900      	cmp	r1, #0
 8003fb8:	f803 2b02 	strb.w	r2, [r3], #2
 8003fbc:	bfb6      	itet	lt
 8003fbe:	222d      	movlt	r2, #45	; 0x2d
 8003fc0:	222b      	movge	r2, #43	; 0x2b
 8003fc2:	4249      	neglt	r1, r1
 8003fc4:	2909      	cmp	r1, #9
 8003fc6:	7042      	strb	r2, [r0, #1]
 8003fc8:	dd2b      	ble.n	8004022 <__exponent+0x70>
 8003fca:	f10d 0407 	add.w	r4, sp, #7
 8003fce:	46a4      	mov	ip, r4
 8003fd0:	270a      	movs	r7, #10
 8003fd2:	fb91 f6f7 	sdiv	r6, r1, r7
 8003fd6:	460a      	mov	r2, r1
 8003fd8:	46a6      	mov	lr, r4
 8003fda:	fb07 1516 	mls	r5, r7, r6, r1
 8003fde:	2a63      	cmp	r2, #99	; 0x63
 8003fe0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003fe4:	4631      	mov	r1, r6
 8003fe6:	f104 34ff 	add.w	r4, r4, #4294967295
 8003fea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003fee:	dcf0      	bgt.n	8003fd2 <__exponent+0x20>
 8003ff0:	3130      	adds	r1, #48	; 0x30
 8003ff2:	f1ae 0502 	sub.w	r5, lr, #2
 8003ff6:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003ffa:	4629      	mov	r1, r5
 8003ffc:	1c44      	adds	r4, r0, #1
 8003ffe:	4561      	cmp	r1, ip
 8004000:	d30a      	bcc.n	8004018 <__exponent+0x66>
 8004002:	f10d 0209 	add.w	r2, sp, #9
 8004006:	eba2 020e 	sub.w	r2, r2, lr
 800400a:	4565      	cmp	r5, ip
 800400c:	bf88      	it	hi
 800400e:	2200      	movhi	r2, #0
 8004010:	4413      	add	r3, r2
 8004012:	1a18      	subs	r0, r3, r0
 8004014:	b003      	add	sp, #12
 8004016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004018:	f811 2b01 	ldrb.w	r2, [r1], #1
 800401c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004020:	e7ed      	b.n	8003ffe <__exponent+0x4c>
 8004022:	2330      	movs	r3, #48	; 0x30
 8004024:	3130      	adds	r1, #48	; 0x30
 8004026:	7083      	strb	r3, [r0, #2]
 8004028:	70c1      	strb	r1, [r0, #3]
 800402a:	1d03      	adds	r3, r0, #4
 800402c:	e7f1      	b.n	8004012 <__exponent+0x60>
	...

08004030 <_printf_float>:
 8004030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004034:	b091      	sub	sp, #68	; 0x44
 8004036:	460c      	mov	r4, r1
 8004038:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800403c:	4616      	mov	r6, r2
 800403e:	461f      	mov	r7, r3
 8004040:	4605      	mov	r5, r0
 8004042:	f001 fae3 	bl	800560c <_localeconv_r>
 8004046:	6803      	ldr	r3, [r0, #0]
 8004048:	4618      	mov	r0, r3
 800404a:	9309      	str	r3, [sp, #36]	; 0x24
 800404c:	f7fc f880 	bl	8000150 <strlen>
 8004050:	2300      	movs	r3, #0
 8004052:	930e      	str	r3, [sp, #56]	; 0x38
 8004054:	f8d8 3000 	ldr.w	r3, [r8]
 8004058:	900a      	str	r0, [sp, #40]	; 0x28
 800405a:	3307      	adds	r3, #7
 800405c:	f023 0307 	bic.w	r3, r3, #7
 8004060:	f103 0208 	add.w	r2, r3, #8
 8004064:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004068:	f8d4 b000 	ldr.w	fp, [r4]
 800406c:	f8c8 2000 	str.w	r2, [r8]
 8004070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004074:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004078:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800407c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004080:	930b      	str	r3, [sp, #44]	; 0x2c
 8004082:	f04f 32ff 	mov.w	r2, #4294967295
 8004086:	4640      	mov	r0, r8
 8004088:	4b9c      	ldr	r3, [pc, #624]	; (80042fc <_printf_float+0x2cc>)
 800408a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800408c:	f7fc fcbe 	bl	8000a0c <__aeabi_dcmpun>
 8004090:	bb70      	cbnz	r0, 80040f0 <_printf_float+0xc0>
 8004092:	f04f 32ff 	mov.w	r2, #4294967295
 8004096:	4640      	mov	r0, r8
 8004098:	4b98      	ldr	r3, [pc, #608]	; (80042fc <_printf_float+0x2cc>)
 800409a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800409c:	f7fc fc98 	bl	80009d0 <__aeabi_dcmple>
 80040a0:	bb30      	cbnz	r0, 80040f0 <_printf_float+0xc0>
 80040a2:	2200      	movs	r2, #0
 80040a4:	2300      	movs	r3, #0
 80040a6:	4640      	mov	r0, r8
 80040a8:	4651      	mov	r1, sl
 80040aa:	f7fc fc87 	bl	80009bc <__aeabi_dcmplt>
 80040ae:	b110      	cbz	r0, 80040b6 <_printf_float+0x86>
 80040b0:	232d      	movs	r3, #45	; 0x2d
 80040b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040b6:	4b92      	ldr	r3, [pc, #584]	; (8004300 <_printf_float+0x2d0>)
 80040b8:	4892      	ldr	r0, [pc, #584]	; (8004304 <_printf_float+0x2d4>)
 80040ba:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80040be:	bf94      	ite	ls
 80040c0:	4698      	movls	r8, r3
 80040c2:	4680      	movhi	r8, r0
 80040c4:	2303      	movs	r3, #3
 80040c6:	f04f 0a00 	mov.w	sl, #0
 80040ca:	6123      	str	r3, [r4, #16]
 80040cc:	f02b 0304 	bic.w	r3, fp, #4
 80040d0:	6023      	str	r3, [r4, #0]
 80040d2:	4633      	mov	r3, r6
 80040d4:	4621      	mov	r1, r4
 80040d6:	4628      	mov	r0, r5
 80040d8:	9700      	str	r7, [sp, #0]
 80040da:	aa0f      	add	r2, sp, #60	; 0x3c
 80040dc:	f000 f9d4 	bl	8004488 <_printf_common>
 80040e0:	3001      	adds	r0, #1
 80040e2:	f040 8090 	bne.w	8004206 <_printf_float+0x1d6>
 80040e6:	f04f 30ff 	mov.w	r0, #4294967295
 80040ea:	b011      	add	sp, #68	; 0x44
 80040ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040f0:	4642      	mov	r2, r8
 80040f2:	4653      	mov	r3, sl
 80040f4:	4640      	mov	r0, r8
 80040f6:	4651      	mov	r1, sl
 80040f8:	f7fc fc88 	bl	8000a0c <__aeabi_dcmpun>
 80040fc:	b148      	cbz	r0, 8004112 <_printf_float+0xe2>
 80040fe:	f1ba 0f00 	cmp.w	sl, #0
 8004102:	bfb8      	it	lt
 8004104:	232d      	movlt	r3, #45	; 0x2d
 8004106:	4880      	ldr	r0, [pc, #512]	; (8004308 <_printf_float+0x2d8>)
 8004108:	bfb8      	it	lt
 800410a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800410e:	4b7f      	ldr	r3, [pc, #508]	; (800430c <_printf_float+0x2dc>)
 8004110:	e7d3      	b.n	80040ba <_printf_float+0x8a>
 8004112:	6863      	ldr	r3, [r4, #4]
 8004114:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004118:	1c5a      	adds	r2, r3, #1
 800411a:	d142      	bne.n	80041a2 <_printf_float+0x172>
 800411c:	2306      	movs	r3, #6
 800411e:	6063      	str	r3, [r4, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	9206      	str	r2, [sp, #24]
 8004124:	aa0e      	add	r2, sp, #56	; 0x38
 8004126:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800412a:	aa0d      	add	r2, sp, #52	; 0x34
 800412c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004130:	9203      	str	r2, [sp, #12]
 8004132:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004136:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800413a:	6023      	str	r3, [r4, #0]
 800413c:	6863      	ldr	r3, [r4, #4]
 800413e:	4642      	mov	r2, r8
 8004140:	9300      	str	r3, [sp, #0]
 8004142:	4628      	mov	r0, r5
 8004144:	4653      	mov	r3, sl
 8004146:	910b      	str	r1, [sp, #44]	; 0x2c
 8004148:	f7ff fed4 	bl	8003ef4 <__cvt>
 800414c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800414e:	4680      	mov	r8, r0
 8004150:	2947      	cmp	r1, #71	; 0x47
 8004152:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004154:	d108      	bne.n	8004168 <_printf_float+0x138>
 8004156:	1cc8      	adds	r0, r1, #3
 8004158:	db02      	blt.n	8004160 <_printf_float+0x130>
 800415a:	6863      	ldr	r3, [r4, #4]
 800415c:	4299      	cmp	r1, r3
 800415e:	dd40      	ble.n	80041e2 <_printf_float+0x1b2>
 8004160:	f1a9 0902 	sub.w	r9, r9, #2
 8004164:	fa5f f989 	uxtb.w	r9, r9
 8004168:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800416c:	d81f      	bhi.n	80041ae <_printf_float+0x17e>
 800416e:	464a      	mov	r2, r9
 8004170:	3901      	subs	r1, #1
 8004172:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004176:	910d      	str	r1, [sp, #52]	; 0x34
 8004178:	f7ff ff1b 	bl	8003fb2 <__exponent>
 800417c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800417e:	4682      	mov	sl, r0
 8004180:	1813      	adds	r3, r2, r0
 8004182:	2a01      	cmp	r2, #1
 8004184:	6123      	str	r3, [r4, #16]
 8004186:	dc02      	bgt.n	800418e <_printf_float+0x15e>
 8004188:	6822      	ldr	r2, [r4, #0]
 800418a:	07d2      	lsls	r2, r2, #31
 800418c:	d501      	bpl.n	8004192 <_printf_float+0x162>
 800418e:	3301      	adds	r3, #1
 8004190:	6123      	str	r3, [r4, #16]
 8004192:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004196:	2b00      	cmp	r3, #0
 8004198:	d09b      	beq.n	80040d2 <_printf_float+0xa2>
 800419a:	232d      	movs	r3, #45	; 0x2d
 800419c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041a0:	e797      	b.n	80040d2 <_printf_float+0xa2>
 80041a2:	2947      	cmp	r1, #71	; 0x47
 80041a4:	d1bc      	bne.n	8004120 <_printf_float+0xf0>
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1ba      	bne.n	8004120 <_printf_float+0xf0>
 80041aa:	2301      	movs	r3, #1
 80041ac:	e7b7      	b.n	800411e <_printf_float+0xee>
 80041ae:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80041b2:	d118      	bne.n	80041e6 <_printf_float+0x1b6>
 80041b4:	2900      	cmp	r1, #0
 80041b6:	6863      	ldr	r3, [r4, #4]
 80041b8:	dd0b      	ble.n	80041d2 <_printf_float+0x1a2>
 80041ba:	6121      	str	r1, [r4, #16]
 80041bc:	b913      	cbnz	r3, 80041c4 <_printf_float+0x194>
 80041be:	6822      	ldr	r2, [r4, #0]
 80041c0:	07d0      	lsls	r0, r2, #31
 80041c2:	d502      	bpl.n	80041ca <_printf_float+0x19a>
 80041c4:	3301      	adds	r3, #1
 80041c6:	440b      	add	r3, r1
 80041c8:	6123      	str	r3, [r4, #16]
 80041ca:	f04f 0a00 	mov.w	sl, #0
 80041ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80041d0:	e7df      	b.n	8004192 <_printf_float+0x162>
 80041d2:	b913      	cbnz	r3, 80041da <_printf_float+0x1aa>
 80041d4:	6822      	ldr	r2, [r4, #0]
 80041d6:	07d2      	lsls	r2, r2, #31
 80041d8:	d501      	bpl.n	80041de <_printf_float+0x1ae>
 80041da:	3302      	adds	r3, #2
 80041dc:	e7f4      	b.n	80041c8 <_printf_float+0x198>
 80041de:	2301      	movs	r3, #1
 80041e0:	e7f2      	b.n	80041c8 <_printf_float+0x198>
 80041e2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80041e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041e8:	4299      	cmp	r1, r3
 80041ea:	db05      	blt.n	80041f8 <_printf_float+0x1c8>
 80041ec:	6823      	ldr	r3, [r4, #0]
 80041ee:	6121      	str	r1, [r4, #16]
 80041f0:	07d8      	lsls	r0, r3, #31
 80041f2:	d5ea      	bpl.n	80041ca <_printf_float+0x19a>
 80041f4:	1c4b      	adds	r3, r1, #1
 80041f6:	e7e7      	b.n	80041c8 <_printf_float+0x198>
 80041f8:	2900      	cmp	r1, #0
 80041fa:	bfcc      	ite	gt
 80041fc:	2201      	movgt	r2, #1
 80041fe:	f1c1 0202 	rsble	r2, r1, #2
 8004202:	4413      	add	r3, r2
 8004204:	e7e0      	b.n	80041c8 <_printf_float+0x198>
 8004206:	6823      	ldr	r3, [r4, #0]
 8004208:	055a      	lsls	r2, r3, #21
 800420a:	d407      	bmi.n	800421c <_printf_float+0x1ec>
 800420c:	6923      	ldr	r3, [r4, #16]
 800420e:	4642      	mov	r2, r8
 8004210:	4631      	mov	r1, r6
 8004212:	4628      	mov	r0, r5
 8004214:	47b8      	blx	r7
 8004216:	3001      	adds	r0, #1
 8004218:	d12b      	bne.n	8004272 <_printf_float+0x242>
 800421a:	e764      	b.n	80040e6 <_printf_float+0xb6>
 800421c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004220:	f240 80dd 	bls.w	80043de <_printf_float+0x3ae>
 8004224:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004228:	2200      	movs	r2, #0
 800422a:	2300      	movs	r3, #0
 800422c:	f7fc fbbc 	bl	80009a8 <__aeabi_dcmpeq>
 8004230:	2800      	cmp	r0, #0
 8004232:	d033      	beq.n	800429c <_printf_float+0x26c>
 8004234:	2301      	movs	r3, #1
 8004236:	4631      	mov	r1, r6
 8004238:	4628      	mov	r0, r5
 800423a:	4a35      	ldr	r2, [pc, #212]	; (8004310 <_printf_float+0x2e0>)
 800423c:	47b8      	blx	r7
 800423e:	3001      	adds	r0, #1
 8004240:	f43f af51 	beq.w	80040e6 <_printf_float+0xb6>
 8004244:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004248:	429a      	cmp	r2, r3
 800424a:	db02      	blt.n	8004252 <_printf_float+0x222>
 800424c:	6823      	ldr	r3, [r4, #0]
 800424e:	07d8      	lsls	r0, r3, #31
 8004250:	d50f      	bpl.n	8004272 <_printf_float+0x242>
 8004252:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004256:	4631      	mov	r1, r6
 8004258:	4628      	mov	r0, r5
 800425a:	47b8      	blx	r7
 800425c:	3001      	adds	r0, #1
 800425e:	f43f af42 	beq.w	80040e6 <_printf_float+0xb6>
 8004262:	f04f 0800 	mov.w	r8, #0
 8004266:	f104 091a 	add.w	r9, r4, #26
 800426a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800426c:	3b01      	subs	r3, #1
 800426e:	4543      	cmp	r3, r8
 8004270:	dc09      	bgt.n	8004286 <_printf_float+0x256>
 8004272:	6823      	ldr	r3, [r4, #0]
 8004274:	079b      	lsls	r3, r3, #30
 8004276:	f100 8102 	bmi.w	800447e <_printf_float+0x44e>
 800427a:	68e0      	ldr	r0, [r4, #12]
 800427c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800427e:	4298      	cmp	r0, r3
 8004280:	bfb8      	it	lt
 8004282:	4618      	movlt	r0, r3
 8004284:	e731      	b.n	80040ea <_printf_float+0xba>
 8004286:	2301      	movs	r3, #1
 8004288:	464a      	mov	r2, r9
 800428a:	4631      	mov	r1, r6
 800428c:	4628      	mov	r0, r5
 800428e:	47b8      	blx	r7
 8004290:	3001      	adds	r0, #1
 8004292:	f43f af28 	beq.w	80040e6 <_printf_float+0xb6>
 8004296:	f108 0801 	add.w	r8, r8, #1
 800429a:	e7e6      	b.n	800426a <_printf_float+0x23a>
 800429c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800429e:	2b00      	cmp	r3, #0
 80042a0:	dc38      	bgt.n	8004314 <_printf_float+0x2e4>
 80042a2:	2301      	movs	r3, #1
 80042a4:	4631      	mov	r1, r6
 80042a6:	4628      	mov	r0, r5
 80042a8:	4a19      	ldr	r2, [pc, #100]	; (8004310 <_printf_float+0x2e0>)
 80042aa:	47b8      	blx	r7
 80042ac:	3001      	adds	r0, #1
 80042ae:	f43f af1a 	beq.w	80040e6 <_printf_float+0xb6>
 80042b2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80042b6:	4313      	orrs	r3, r2
 80042b8:	d102      	bne.n	80042c0 <_printf_float+0x290>
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	07d9      	lsls	r1, r3, #31
 80042be:	d5d8      	bpl.n	8004272 <_printf_float+0x242>
 80042c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042c4:	4631      	mov	r1, r6
 80042c6:	4628      	mov	r0, r5
 80042c8:	47b8      	blx	r7
 80042ca:	3001      	adds	r0, #1
 80042cc:	f43f af0b 	beq.w	80040e6 <_printf_float+0xb6>
 80042d0:	f04f 0900 	mov.w	r9, #0
 80042d4:	f104 0a1a 	add.w	sl, r4, #26
 80042d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042da:	425b      	negs	r3, r3
 80042dc:	454b      	cmp	r3, r9
 80042de:	dc01      	bgt.n	80042e4 <_printf_float+0x2b4>
 80042e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042e2:	e794      	b.n	800420e <_printf_float+0x1de>
 80042e4:	2301      	movs	r3, #1
 80042e6:	4652      	mov	r2, sl
 80042e8:	4631      	mov	r1, r6
 80042ea:	4628      	mov	r0, r5
 80042ec:	47b8      	blx	r7
 80042ee:	3001      	adds	r0, #1
 80042f0:	f43f aef9 	beq.w	80040e6 <_printf_float+0xb6>
 80042f4:	f109 0901 	add.w	r9, r9, #1
 80042f8:	e7ee      	b.n	80042d8 <_printf_float+0x2a8>
 80042fa:	bf00      	nop
 80042fc:	7fefffff 	.word	0x7fefffff
 8004300:	08006db4 	.word	0x08006db4
 8004304:	08006db8 	.word	0x08006db8
 8004308:	08006dc0 	.word	0x08006dc0
 800430c:	08006dbc 	.word	0x08006dbc
 8004310:	08006dc4 	.word	0x08006dc4
 8004314:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004316:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004318:	429a      	cmp	r2, r3
 800431a:	bfa8      	it	ge
 800431c:	461a      	movge	r2, r3
 800431e:	2a00      	cmp	r2, #0
 8004320:	4691      	mov	r9, r2
 8004322:	dc37      	bgt.n	8004394 <_printf_float+0x364>
 8004324:	f04f 0b00 	mov.w	fp, #0
 8004328:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800432c:	f104 021a 	add.w	r2, r4, #26
 8004330:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004334:	ebaa 0309 	sub.w	r3, sl, r9
 8004338:	455b      	cmp	r3, fp
 800433a:	dc33      	bgt.n	80043a4 <_printf_float+0x374>
 800433c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004340:	429a      	cmp	r2, r3
 8004342:	db3b      	blt.n	80043bc <_printf_float+0x38c>
 8004344:	6823      	ldr	r3, [r4, #0]
 8004346:	07da      	lsls	r2, r3, #31
 8004348:	d438      	bmi.n	80043bc <_printf_float+0x38c>
 800434a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800434c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800434e:	eba2 030a 	sub.w	r3, r2, sl
 8004352:	eba2 0901 	sub.w	r9, r2, r1
 8004356:	4599      	cmp	r9, r3
 8004358:	bfa8      	it	ge
 800435a:	4699      	movge	r9, r3
 800435c:	f1b9 0f00 	cmp.w	r9, #0
 8004360:	dc34      	bgt.n	80043cc <_printf_float+0x39c>
 8004362:	f04f 0800 	mov.w	r8, #0
 8004366:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800436a:	f104 0a1a 	add.w	sl, r4, #26
 800436e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004372:	1a9b      	subs	r3, r3, r2
 8004374:	eba3 0309 	sub.w	r3, r3, r9
 8004378:	4543      	cmp	r3, r8
 800437a:	f77f af7a 	ble.w	8004272 <_printf_float+0x242>
 800437e:	2301      	movs	r3, #1
 8004380:	4652      	mov	r2, sl
 8004382:	4631      	mov	r1, r6
 8004384:	4628      	mov	r0, r5
 8004386:	47b8      	blx	r7
 8004388:	3001      	adds	r0, #1
 800438a:	f43f aeac 	beq.w	80040e6 <_printf_float+0xb6>
 800438e:	f108 0801 	add.w	r8, r8, #1
 8004392:	e7ec      	b.n	800436e <_printf_float+0x33e>
 8004394:	4613      	mov	r3, r2
 8004396:	4631      	mov	r1, r6
 8004398:	4642      	mov	r2, r8
 800439a:	4628      	mov	r0, r5
 800439c:	47b8      	blx	r7
 800439e:	3001      	adds	r0, #1
 80043a0:	d1c0      	bne.n	8004324 <_printf_float+0x2f4>
 80043a2:	e6a0      	b.n	80040e6 <_printf_float+0xb6>
 80043a4:	2301      	movs	r3, #1
 80043a6:	4631      	mov	r1, r6
 80043a8:	4628      	mov	r0, r5
 80043aa:	920b      	str	r2, [sp, #44]	; 0x2c
 80043ac:	47b8      	blx	r7
 80043ae:	3001      	adds	r0, #1
 80043b0:	f43f ae99 	beq.w	80040e6 <_printf_float+0xb6>
 80043b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80043b6:	f10b 0b01 	add.w	fp, fp, #1
 80043ba:	e7b9      	b.n	8004330 <_printf_float+0x300>
 80043bc:	4631      	mov	r1, r6
 80043be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043c2:	4628      	mov	r0, r5
 80043c4:	47b8      	blx	r7
 80043c6:	3001      	adds	r0, #1
 80043c8:	d1bf      	bne.n	800434a <_printf_float+0x31a>
 80043ca:	e68c      	b.n	80040e6 <_printf_float+0xb6>
 80043cc:	464b      	mov	r3, r9
 80043ce:	4631      	mov	r1, r6
 80043d0:	4628      	mov	r0, r5
 80043d2:	eb08 020a 	add.w	r2, r8, sl
 80043d6:	47b8      	blx	r7
 80043d8:	3001      	adds	r0, #1
 80043da:	d1c2      	bne.n	8004362 <_printf_float+0x332>
 80043dc:	e683      	b.n	80040e6 <_printf_float+0xb6>
 80043de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80043e0:	2a01      	cmp	r2, #1
 80043e2:	dc01      	bgt.n	80043e8 <_printf_float+0x3b8>
 80043e4:	07db      	lsls	r3, r3, #31
 80043e6:	d537      	bpl.n	8004458 <_printf_float+0x428>
 80043e8:	2301      	movs	r3, #1
 80043ea:	4642      	mov	r2, r8
 80043ec:	4631      	mov	r1, r6
 80043ee:	4628      	mov	r0, r5
 80043f0:	47b8      	blx	r7
 80043f2:	3001      	adds	r0, #1
 80043f4:	f43f ae77 	beq.w	80040e6 <_printf_float+0xb6>
 80043f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043fc:	4631      	mov	r1, r6
 80043fe:	4628      	mov	r0, r5
 8004400:	47b8      	blx	r7
 8004402:	3001      	adds	r0, #1
 8004404:	f43f ae6f 	beq.w	80040e6 <_printf_float+0xb6>
 8004408:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800440c:	2200      	movs	r2, #0
 800440e:	2300      	movs	r3, #0
 8004410:	f7fc faca 	bl	80009a8 <__aeabi_dcmpeq>
 8004414:	b9d8      	cbnz	r0, 800444e <_printf_float+0x41e>
 8004416:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004418:	f108 0201 	add.w	r2, r8, #1
 800441c:	3b01      	subs	r3, #1
 800441e:	4631      	mov	r1, r6
 8004420:	4628      	mov	r0, r5
 8004422:	47b8      	blx	r7
 8004424:	3001      	adds	r0, #1
 8004426:	d10e      	bne.n	8004446 <_printf_float+0x416>
 8004428:	e65d      	b.n	80040e6 <_printf_float+0xb6>
 800442a:	2301      	movs	r3, #1
 800442c:	464a      	mov	r2, r9
 800442e:	4631      	mov	r1, r6
 8004430:	4628      	mov	r0, r5
 8004432:	47b8      	blx	r7
 8004434:	3001      	adds	r0, #1
 8004436:	f43f ae56 	beq.w	80040e6 <_printf_float+0xb6>
 800443a:	f108 0801 	add.w	r8, r8, #1
 800443e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004440:	3b01      	subs	r3, #1
 8004442:	4543      	cmp	r3, r8
 8004444:	dcf1      	bgt.n	800442a <_printf_float+0x3fa>
 8004446:	4653      	mov	r3, sl
 8004448:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800444c:	e6e0      	b.n	8004210 <_printf_float+0x1e0>
 800444e:	f04f 0800 	mov.w	r8, #0
 8004452:	f104 091a 	add.w	r9, r4, #26
 8004456:	e7f2      	b.n	800443e <_printf_float+0x40e>
 8004458:	2301      	movs	r3, #1
 800445a:	4642      	mov	r2, r8
 800445c:	e7df      	b.n	800441e <_printf_float+0x3ee>
 800445e:	2301      	movs	r3, #1
 8004460:	464a      	mov	r2, r9
 8004462:	4631      	mov	r1, r6
 8004464:	4628      	mov	r0, r5
 8004466:	47b8      	blx	r7
 8004468:	3001      	adds	r0, #1
 800446a:	f43f ae3c 	beq.w	80040e6 <_printf_float+0xb6>
 800446e:	f108 0801 	add.w	r8, r8, #1
 8004472:	68e3      	ldr	r3, [r4, #12]
 8004474:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004476:	1a5b      	subs	r3, r3, r1
 8004478:	4543      	cmp	r3, r8
 800447a:	dcf0      	bgt.n	800445e <_printf_float+0x42e>
 800447c:	e6fd      	b.n	800427a <_printf_float+0x24a>
 800447e:	f04f 0800 	mov.w	r8, #0
 8004482:	f104 0919 	add.w	r9, r4, #25
 8004486:	e7f4      	b.n	8004472 <_printf_float+0x442>

08004488 <_printf_common>:
 8004488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800448c:	4616      	mov	r6, r2
 800448e:	4699      	mov	r9, r3
 8004490:	688a      	ldr	r2, [r1, #8]
 8004492:	690b      	ldr	r3, [r1, #16]
 8004494:	4607      	mov	r7, r0
 8004496:	4293      	cmp	r3, r2
 8004498:	bfb8      	it	lt
 800449a:	4613      	movlt	r3, r2
 800449c:	6033      	str	r3, [r6, #0]
 800449e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044a2:	460c      	mov	r4, r1
 80044a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044a8:	b10a      	cbz	r2, 80044ae <_printf_common+0x26>
 80044aa:	3301      	adds	r3, #1
 80044ac:	6033      	str	r3, [r6, #0]
 80044ae:	6823      	ldr	r3, [r4, #0]
 80044b0:	0699      	lsls	r1, r3, #26
 80044b2:	bf42      	ittt	mi
 80044b4:	6833      	ldrmi	r3, [r6, #0]
 80044b6:	3302      	addmi	r3, #2
 80044b8:	6033      	strmi	r3, [r6, #0]
 80044ba:	6825      	ldr	r5, [r4, #0]
 80044bc:	f015 0506 	ands.w	r5, r5, #6
 80044c0:	d106      	bne.n	80044d0 <_printf_common+0x48>
 80044c2:	f104 0a19 	add.w	sl, r4, #25
 80044c6:	68e3      	ldr	r3, [r4, #12]
 80044c8:	6832      	ldr	r2, [r6, #0]
 80044ca:	1a9b      	subs	r3, r3, r2
 80044cc:	42ab      	cmp	r3, r5
 80044ce:	dc28      	bgt.n	8004522 <_printf_common+0x9a>
 80044d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044d4:	1e13      	subs	r3, r2, #0
 80044d6:	6822      	ldr	r2, [r4, #0]
 80044d8:	bf18      	it	ne
 80044da:	2301      	movne	r3, #1
 80044dc:	0692      	lsls	r2, r2, #26
 80044de:	d42d      	bmi.n	800453c <_printf_common+0xb4>
 80044e0:	4649      	mov	r1, r9
 80044e2:	4638      	mov	r0, r7
 80044e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044e8:	47c0      	blx	r8
 80044ea:	3001      	adds	r0, #1
 80044ec:	d020      	beq.n	8004530 <_printf_common+0xa8>
 80044ee:	6823      	ldr	r3, [r4, #0]
 80044f0:	68e5      	ldr	r5, [r4, #12]
 80044f2:	f003 0306 	and.w	r3, r3, #6
 80044f6:	2b04      	cmp	r3, #4
 80044f8:	bf18      	it	ne
 80044fa:	2500      	movne	r5, #0
 80044fc:	6832      	ldr	r2, [r6, #0]
 80044fe:	f04f 0600 	mov.w	r6, #0
 8004502:	68a3      	ldr	r3, [r4, #8]
 8004504:	bf08      	it	eq
 8004506:	1aad      	subeq	r5, r5, r2
 8004508:	6922      	ldr	r2, [r4, #16]
 800450a:	bf08      	it	eq
 800450c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004510:	4293      	cmp	r3, r2
 8004512:	bfc4      	itt	gt
 8004514:	1a9b      	subgt	r3, r3, r2
 8004516:	18ed      	addgt	r5, r5, r3
 8004518:	341a      	adds	r4, #26
 800451a:	42b5      	cmp	r5, r6
 800451c:	d11a      	bne.n	8004554 <_printf_common+0xcc>
 800451e:	2000      	movs	r0, #0
 8004520:	e008      	b.n	8004534 <_printf_common+0xac>
 8004522:	2301      	movs	r3, #1
 8004524:	4652      	mov	r2, sl
 8004526:	4649      	mov	r1, r9
 8004528:	4638      	mov	r0, r7
 800452a:	47c0      	blx	r8
 800452c:	3001      	adds	r0, #1
 800452e:	d103      	bne.n	8004538 <_printf_common+0xb0>
 8004530:	f04f 30ff 	mov.w	r0, #4294967295
 8004534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004538:	3501      	adds	r5, #1
 800453a:	e7c4      	b.n	80044c6 <_printf_common+0x3e>
 800453c:	2030      	movs	r0, #48	; 0x30
 800453e:	18e1      	adds	r1, r4, r3
 8004540:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800454a:	4422      	add	r2, r4
 800454c:	3302      	adds	r3, #2
 800454e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004552:	e7c5      	b.n	80044e0 <_printf_common+0x58>
 8004554:	2301      	movs	r3, #1
 8004556:	4622      	mov	r2, r4
 8004558:	4649      	mov	r1, r9
 800455a:	4638      	mov	r0, r7
 800455c:	47c0      	blx	r8
 800455e:	3001      	adds	r0, #1
 8004560:	d0e6      	beq.n	8004530 <_printf_common+0xa8>
 8004562:	3601      	adds	r6, #1
 8004564:	e7d9      	b.n	800451a <_printf_common+0x92>
	...

08004568 <_printf_i>:
 8004568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800456c:	460c      	mov	r4, r1
 800456e:	7e27      	ldrb	r7, [r4, #24]
 8004570:	4691      	mov	r9, r2
 8004572:	2f78      	cmp	r7, #120	; 0x78
 8004574:	4680      	mov	r8, r0
 8004576:	469a      	mov	sl, r3
 8004578:	990c      	ldr	r1, [sp, #48]	; 0x30
 800457a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800457e:	d807      	bhi.n	8004590 <_printf_i+0x28>
 8004580:	2f62      	cmp	r7, #98	; 0x62
 8004582:	d80a      	bhi.n	800459a <_printf_i+0x32>
 8004584:	2f00      	cmp	r7, #0
 8004586:	f000 80d9 	beq.w	800473c <_printf_i+0x1d4>
 800458a:	2f58      	cmp	r7, #88	; 0x58
 800458c:	f000 80a4 	beq.w	80046d8 <_printf_i+0x170>
 8004590:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004594:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004598:	e03a      	b.n	8004610 <_printf_i+0xa8>
 800459a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800459e:	2b15      	cmp	r3, #21
 80045a0:	d8f6      	bhi.n	8004590 <_printf_i+0x28>
 80045a2:	a001      	add	r0, pc, #4	; (adr r0, 80045a8 <_printf_i+0x40>)
 80045a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80045a8:	08004601 	.word	0x08004601
 80045ac:	08004615 	.word	0x08004615
 80045b0:	08004591 	.word	0x08004591
 80045b4:	08004591 	.word	0x08004591
 80045b8:	08004591 	.word	0x08004591
 80045bc:	08004591 	.word	0x08004591
 80045c0:	08004615 	.word	0x08004615
 80045c4:	08004591 	.word	0x08004591
 80045c8:	08004591 	.word	0x08004591
 80045cc:	08004591 	.word	0x08004591
 80045d0:	08004591 	.word	0x08004591
 80045d4:	08004723 	.word	0x08004723
 80045d8:	08004645 	.word	0x08004645
 80045dc:	08004705 	.word	0x08004705
 80045e0:	08004591 	.word	0x08004591
 80045e4:	08004591 	.word	0x08004591
 80045e8:	08004745 	.word	0x08004745
 80045ec:	08004591 	.word	0x08004591
 80045f0:	08004645 	.word	0x08004645
 80045f4:	08004591 	.word	0x08004591
 80045f8:	08004591 	.word	0x08004591
 80045fc:	0800470d 	.word	0x0800470d
 8004600:	680b      	ldr	r3, [r1, #0]
 8004602:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004606:	1d1a      	adds	r2, r3, #4
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	600a      	str	r2, [r1, #0]
 800460c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004610:	2301      	movs	r3, #1
 8004612:	e0a4      	b.n	800475e <_printf_i+0x1f6>
 8004614:	6825      	ldr	r5, [r4, #0]
 8004616:	6808      	ldr	r0, [r1, #0]
 8004618:	062e      	lsls	r6, r5, #24
 800461a:	f100 0304 	add.w	r3, r0, #4
 800461e:	d50a      	bpl.n	8004636 <_printf_i+0xce>
 8004620:	6805      	ldr	r5, [r0, #0]
 8004622:	600b      	str	r3, [r1, #0]
 8004624:	2d00      	cmp	r5, #0
 8004626:	da03      	bge.n	8004630 <_printf_i+0xc8>
 8004628:	232d      	movs	r3, #45	; 0x2d
 800462a:	426d      	negs	r5, r5
 800462c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004630:	230a      	movs	r3, #10
 8004632:	485e      	ldr	r0, [pc, #376]	; (80047ac <_printf_i+0x244>)
 8004634:	e019      	b.n	800466a <_printf_i+0x102>
 8004636:	f015 0f40 	tst.w	r5, #64	; 0x40
 800463a:	6805      	ldr	r5, [r0, #0]
 800463c:	600b      	str	r3, [r1, #0]
 800463e:	bf18      	it	ne
 8004640:	b22d      	sxthne	r5, r5
 8004642:	e7ef      	b.n	8004624 <_printf_i+0xbc>
 8004644:	680b      	ldr	r3, [r1, #0]
 8004646:	6825      	ldr	r5, [r4, #0]
 8004648:	1d18      	adds	r0, r3, #4
 800464a:	6008      	str	r0, [r1, #0]
 800464c:	0628      	lsls	r0, r5, #24
 800464e:	d501      	bpl.n	8004654 <_printf_i+0xec>
 8004650:	681d      	ldr	r5, [r3, #0]
 8004652:	e002      	b.n	800465a <_printf_i+0xf2>
 8004654:	0669      	lsls	r1, r5, #25
 8004656:	d5fb      	bpl.n	8004650 <_printf_i+0xe8>
 8004658:	881d      	ldrh	r5, [r3, #0]
 800465a:	2f6f      	cmp	r7, #111	; 0x6f
 800465c:	bf0c      	ite	eq
 800465e:	2308      	moveq	r3, #8
 8004660:	230a      	movne	r3, #10
 8004662:	4852      	ldr	r0, [pc, #328]	; (80047ac <_printf_i+0x244>)
 8004664:	2100      	movs	r1, #0
 8004666:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800466a:	6866      	ldr	r6, [r4, #4]
 800466c:	2e00      	cmp	r6, #0
 800466e:	bfa8      	it	ge
 8004670:	6821      	ldrge	r1, [r4, #0]
 8004672:	60a6      	str	r6, [r4, #8]
 8004674:	bfa4      	itt	ge
 8004676:	f021 0104 	bicge.w	r1, r1, #4
 800467a:	6021      	strge	r1, [r4, #0]
 800467c:	b90d      	cbnz	r5, 8004682 <_printf_i+0x11a>
 800467e:	2e00      	cmp	r6, #0
 8004680:	d04d      	beq.n	800471e <_printf_i+0x1b6>
 8004682:	4616      	mov	r6, r2
 8004684:	fbb5 f1f3 	udiv	r1, r5, r3
 8004688:	fb03 5711 	mls	r7, r3, r1, r5
 800468c:	5dc7      	ldrb	r7, [r0, r7]
 800468e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004692:	462f      	mov	r7, r5
 8004694:	42bb      	cmp	r3, r7
 8004696:	460d      	mov	r5, r1
 8004698:	d9f4      	bls.n	8004684 <_printf_i+0x11c>
 800469a:	2b08      	cmp	r3, #8
 800469c:	d10b      	bne.n	80046b6 <_printf_i+0x14e>
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	07df      	lsls	r7, r3, #31
 80046a2:	d508      	bpl.n	80046b6 <_printf_i+0x14e>
 80046a4:	6923      	ldr	r3, [r4, #16]
 80046a6:	6861      	ldr	r1, [r4, #4]
 80046a8:	4299      	cmp	r1, r3
 80046aa:	bfde      	ittt	le
 80046ac:	2330      	movle	r3, #48	; 0x30
 80046ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80046b6:	1b92      	subs	r2, r2, r6
 80046b8:	6122      	str	r2, [r4, #16]
 80046ba:	464b      	mov	r3, r9
 80046bc:	4621      	mov	r1, r4
 80046be:	4640      	mov	r0, r8
 80046c0:	f8cd a000 	str.w	sl, [sp]
 80046c4:	aa03      	add	r2, sp, #12
 80046c6:	f7ff fedf 	bl	8004488 <_printf_common>
 80046ca:	3001      	adds	r0, #1
 80046cc:	d14c      	bne.n	8004768 <_printf_i+0x200>
 80046ce:	f04f 30ff 	mov.w	r0, #4294967295
 80046d2:	b004      	add	sp, #16
 80046d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046d8:	4834      	ldr	r0, [pc, #208]	; (80047ac <_printf_i+0x244>)
 80046da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80046de:	680e      	ldr	r6, [r1, #0]
 80046e0:	6823      	ldr	r3, [r4, #0]
 80046e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80046e6:	061f      	lsls	r7, r3, #24
 80046e8:	600e      	str	r6, [r1, #0]
 80046ea:	d514      	bpl.n	8004716 <_printf_i+0x1ae>
 80046ec:	07d9      	lsls	r1, r3, #31
 80046ee:	bf44      	itt	mi
 80046f0:	f043 0320 	orrmi.w	r3, r3, #32
 80046f4:	6023      	strmi	r3, [r4, #0]
 80046f6:	b91d      	cbnz	r5, 8004700 <_printf_i+0x198>
 80046f8:	6823      	ldr	r3, [r4, #0]
 80046fa:	f023 0320 	bic.w	r3, r3, #32
 80046fe:	6023      	str	r3, [r4, #0]
 8004700:	2310      	movs	r3, #16
 8004702:	e7af      	b.n	8004664 <_printf_i+0xfc>
 8004704:	6823      	ldr	r3, [r4, #0]
 8004706:	f043 0320 	orr.w	r3, r3, #32
 800470a:	6023      	str	r3, [r4, #0]
 800470c:	2378      	movs	r3, #120	; 0x78
 800470e:	4828      	ldr	r0, [pc, #160]	; (80047b0 <_printf_i+0x248>)
 8004710:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004714:	e7e3      	b.n	80046de <_printf_i+0x176>
 8004716:	065e      	lsls	r6, r3, #25
 8004718:	bf48      	it	mi
 800471a:	b2ad      	uxthmi	r5, r5
 800471c:	e7e6      	b.n	80046ec <_printf_i+0x184>
 800471e:	4616      	mov	r6, r2
 8004720:	e7bb      	b.n	800469a <_printf_i+0x132>
 8004722:	680b      	ldr	r3, [r1, #0]
 8004724:	6826      	ldr	r6, [r4, #0]
 8004726:	1d1d      	adds	r5, r3, #4
 8004728:	6960      	ldr	r0, [r4, #20]
 800472a:	600d      	str	r5, [r1, #0]
 800472c:	0635      	lsls	r5, r6, #24
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	d501      	bpl.n	8004736 <_printf_i+0x1ce>
 8004732:	6018      	str	r0, [r3, #0]
 8004734:	e002      	b.n	800473c <_printf_i+0x1d4>
 8004736:	0671      	lsls	r1, r6, #25
 8004738:	d5fb      	bpl.n	8004732 <_printf_i+0x1ca>
 800473a:	8018      	strh	r0, [r3, #0]
 800473c:	2300      	movs	r3, #0
 800473e:	4616      	mov	r6, r2
 8004740:	6123      	str	r3, [r4, #16]
 8004742:	e7ba      	b.n	80046ba <_printf_i+0x152>
 8004744:	680b      	ldr	r3, [r1, #0]
 8004746:	1d1a      	adds	r2, r3, #4
 8004748:	600a      	str	r2, [r1, #0]
 800474a:	681e      	ldr	r6, [r3, #0]
 800474c:	2100      	movs	r1, #0
 800474e:	4630      	mov	r0, r6
 8004750:	6862      	ldr	r2, [r4, #4]
 8004752:	f000 ff67 	bl	8005624 <memchr>
 8004756:	b108      	cbz	r0, 800475c <_printf_i+0x1f4>
 8004758:	1b80      	subs	r0, r0, r6
 800475a:	6060      	str	r0, [r4, #4]
 800475c:	6863      	ldr	r3, [r4, #4]
 800475e:	6123      	str	r3, [r4, #16]
 8004760:	2300      	movs	r3, #0
 8004762:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004766:	e7a8      	b.n	80046ba <_printf_i+0x152>
 8004768:	4632      	mov	r2, r6
 800476a:	4649      	mov	r1, r9
 800476c:	4640      	mov	r0, r8
 800476e:	6923      	ldr	r3, [r4, #16]
 8004770:	47d0      	blx	sl
 8004772:	3001      	adds	r0, #1
 8004774:	d0ab      	beq.n	80046ce <_printf_i+0x166>
 8004776:	6823      	ldr	r3, [r4, #0]
 8004778:	079b      	lsls	r3, r3, #30
 800477a:	d413      	bmi.n	80047a4 <_printf_i+0x23c>
 800477c:	68e0      	ldr	r0, [r4, #12]
 800477e:	9b03      	ldr	r3, [sp, #12]
 8004780:	4298      	cmp	r0, r3
 8004782:	bfb8      	it	lt
 8004784:	4618      	movlt	r0, r3
 8004786:	e7a4      	b.n	80046d2 <_printf_i+0x16a>
 8004788:	2301      	movs	r3, #1
 800478a:	4632      	mov	r2, r6
 800478c:	4649      	mov	r1, r9
 800478e:	4640      	mov	r0, r8
 8004790:	47d0      	blx	sl
 8004792:	3001      	adds	r0, #1
 8004794:	d09b      	beq.n	80046ce <_printf_i+0x166>
 8004796:	3501      	adds	r5, #1
 8004798:	68e3      	ldr	r3, [r4, #12]
 800479a:	9903      	ldr	r1, [sp, #12]
 800479c:	1a5b      	subs	r3, r3, r1
 800479e:	42ab      	cmp	r3, r5
 80047a0:	dcf2      	bgt.n	8004788 <_printf_i+0x220>
 80047a2:	e7eb      	b.n	800477c <_printf_i+0x214>
 80047a4:	2500      	movs	r5, #0
 80047a6:	f104 0619 	add.w	r6, r4, #25
 80047aa:	e7f5      	b.n	8004798 <_printf_i+0x230>
 80047ac:	08006dc6 	.word	0x08006dc6
 80047b0:	08006dd7 	.word	0x08006dd7

080047b4 <siprintf>:
 80047b4:	b40e      	push	{r1, r2, r3}
 80047b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047ba:	b500      	push	{lr}
 80047bc:	b09c      	sub	sp, #112	; 0x70
 80047be:	ab1d      	add	r3, sp, #116	; 0x74
 80047c0:	9002      	str	r0, [sp, #8]
 80047c2:	9006      	str	r0, [sp, #24]
 80047c4:	9107      	str	r1, [sp, #28]
 80047c6:	9104      	str	r1, [sp, #16]
 80047c8:	4808      	ldr	r0, [pc, #32]	; (80047ec <siprintf+0x38>)
 80047ca:	4909      	ldr	r1, [pc, #36]	; (80047f0 <siprintf+0x3c>)
 80047cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80047d0:	9105      	str	r1, [sp, #20]
 80047d2:	6800      	ldr	r0, [r0, #0]
 80047d4:	a902      	add	r1, sp, #8
 80047d6:	9301      	str	r3, [sp, #4]
 80047d8:	f001 fbd2 	bl	8005f80 <_svfiprintf_r>
 80047dc:	2200      	movs	r2, #0
 80047de:	9b02      	ldr	r3, [sp, #8]
 80047e0:	701a      	strb	r2, [r3, #0]
 80047e2:	b01c      	add	sp, #112	; 0x70
 80047e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80047e8:	b003      	add	sp, #12
 80047ea:	4770      	bx	lr
 80047ec:	2000001c 	.word	0x2000001c
 80047f0:	ffff0208 	.word	0xffff0208

080047f4 <_strtol_l.isra.0>:
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047fa:	4686      	mov	lr, r0
 80047fc:	d001      	beq.n	8004802 <_strtol_l.isra.0+0xe>
 80047fe:	2b24      	cmp	r3, #36	; 0x24
 8004800:	d906      	bls.n	8004810 <_strtol_l.isra.0+0x1c>
 8004802:	f7ff fb45 	bl	8003e90 <__errno>
 8004806:	2316      	movs	r3, #22
 8004808:	6003      	str	r3, [r0, #0]
 800480a:	2000      	movs	r0, #0
 800480c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004810:	468c      	mov	ip, r1
 8004812:	4e3a      	ldr	r6, [pc, #232]	; (80048fc <_strtol_l.isra.0+0x108>)
 8004814:	4660      	mov	r0, ip
 8004816:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800481a:	5da5      	ldrb	r5, [r4, r6]
 800481c:	f015 0508 	ands.w	r5, r5, #8
 8004820:	d1f8      	bne.n	8004814 <_strtol_l.isra.0+0x20>
 8004822:	2c2d      	cmp	r4, #45	; 0x2d
 8004824:	d133      	bne.n	800488e <_strtol_l.isra.0+0x9a>
 8004826:	f04f 0801 	mov.w	r8, #1
 800482a:	f89c 4000 	ldrb.w	r4, [ip]
 800482e:	f100 0c02 	add.w	ip, r0, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d05d      	beq.n	80048f2 <_strtol_l.isra.0+0xfe>
 8004836:	2b10      	cmp	r3, #16
 8004838:	d10c      	bne.n	8004854 <_strtol_l.isra.0+0x60>
 800483a:	2c30      	cmp	r4, #48	; 0x30
 800483c:	d10a      	bne.n	8004854 <_strtol_l.isra.0+0x60>
 800483e:	f89c 0000 	ldrb.w	r0, [ip]
 8004842:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004846:	2858      	cmp	r0, #88	; 0x58
 8004848:	d14e      	bne.n	80048e8 <_strtol_l.isra.0+0xf4>
 800484a:	2310      	movs	r3, #16
 800484c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8004850:	f10c 0c02 	add.w	ip, ip, #2
 8004854:	2500      	movs	r5, #0
 8004856:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800485a:	3f01      	subs	r7, #1
 800485c:	fbb7 f9f3 	udiv	r9, r7, r3
 8004860:	4628      	mov	r0, r5
 8004862:	fb03 7a19 	mls	sl, r3, r9, r7
 8004866:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800486a:	2e09      	cmp	r6, #9
 800486c:	d818      	bhi.n	80048a0 <_strtol_l.isra.0+0xac>
 800486e:	4634      	mov	r4, r6
 8004870:	42a3      	cmp	r3, r4
 8004872:	dd24      	ble.n	80048be <_strtol_l.isra.0+0xca>
 8004874:	2d00      	cmp	r5, #0
 8004876:	db1f      	blt.n	80048b8 <_strtol_l.isra.0+0xc4>
 8004878:	4581      	cmp	r9, r0
 800487a:	d31d      	bcc.n	80048b8 <_strtol_l.isra.0+0xc4>
 800487c:	d101      	bne.n	8004882 <_strtol_l.isra.0+0x8e>
 800487e:	45a2      	cmp	sl, r4
 8004880:	db1a      	blt.n	80048b8 <_strtol_l.isra.0+0xc4>
 8004882:	2501      	movs	r5, #1
 8004884:	fb00 4003 	mla	r0, r0, r3, r4
 8004888:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800488c:	e7eb      	b.n	8004866 <_strtol_l.isra.0+0x72>
 800488e:	2c2b      	cmp	r4, #43	; 0x2b
 8004890:	bf08      	it	eq
 8004892:	f89c 4000 	ldrbeq.w	r4, [ip]
 8004896:	46a8      	mov	r8, r5
 8004898:	bf08      	it	eq
 800489a:	f100 0c02 	addeq.w	ip, r0, #2
 800489e:	e7c8      	b.n	8004832 <_strtol_l.isra.0+0x3e>
 80048a0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80048a4:	2e19      	cmp	r6, #25
 80048a6:	d801      	bhi.n	80048ac <_strtol_l.isra.0+0xb8>
 80048a8:	3c37      	subs	r4, #55	; 0x37
 80048aa:	e7e1      	b.n	8004870 <_strtol_l.isra.0+0x7c>
 80048ac:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80048b0:	2e19      	cmp	r6, #25
 80048b2:	d804      	bhi.n	80048be <_strtol_l.isra.0+0xca>
 80048b4:	3c57      	subs	r4, #87	; 0x57
 80048b6:	e7db      	b.n	8004870 <_strtol_l.isra.0+0x7c>
 80048b8:	f04f 35ff 	mov.w	r5, #4294967295
 80048bc:	e7e4      	b.n	8004888 <_strtol_l.isra.0+0x94>
 80048be:	2d00      	cmp	r5, #0
 80048c0:	da08      	bge.n	80048d4 <_strtol_l.isra.0+0xe0>
 80048c2:	2322      	movs	r3, #34	; 0x22
 80048c4:	4638      	mov	r0, r7
 80048c6:	f8ce 3000 	str.w	r3, [lr]
 80048ca:	2a00      	cmp	r2, #0
 80048cc:	d09e      	beq.n	800480c <_strtol_l.isra.0+0x18>
 80048ce:	f10c 31ff 	add.w	r1, ip, #4294967295
 80048d2:	e007      	b.n	80048e4 <_strtol_l.isra.0+0xf0>
 80048d4:	f1b8 0f00 	cmp.w	r8, #0
 80048d8:	d000      	beq.n	80048dc <_strtol_l.isra.0+0xe8>
 80048da:	4240      	negs	r0, r0
 80048dc:	2a00      	cmp	r2, #0
 80048de:	d095      	beq.n	800480c <_strtol_l.isra.0+0x18>
 80048e0:	2d00      	cmp	r5, #0
 80048e2:	d1f4      	bne.n	80048ce <_strtol_l.isra.0+0xda>
 80048e4:	6011      	str	r1, [r2, #0]
 80048e6:	e791      	b.n	800480c <_strtol_l.isra.0+0x18>
 80048e8:	2430      	movs	r4, #48	; 0x30
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1b2      	bne.n	8004854 <_strtol_l.isra.0+0x60>
 80048ee:	2308      	movs	r3, #8
 80048f0:	e7b0      	b.n	8004854 <_strtol_l.isra.0+0x60>
 80048f2:	2c30      	cmp	r4, #48	; 0x30
 80048f4:	d0a3      	beq.n	800483e <_strtol_l.isra.0+0x4a>
 80048f6:	230a      	movs	r3, #10
 80048f8:	e7ac      	b.n	8004854 <_strtol_l.isra.0+0x60>
 80048fa:	bf00      	nop
 80048fc:	08006de9 	.word	0x08006de9

08004900 <strtol>:
 8004900:	4613      	mov	r3, r2
 8004902:	460a      	mov	r2, r1
 8004904:	4601      	mov	r1, r0
 8004906:	4802      	ldr	r0, [pc, #8]	; (8004910 <strtol+0x10>)
 8004908:	6800      	ldr	r0, [r0, #0]
 800490a:	f7ff bf73 	b.w	80047f4 <_strtol_l.isra.0>
 800490e:	bf00      	nop
 8004910:	2000001c 	.word	0x2000001c

08004914 <quorem>:
 8004914:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004918:	6903      	ldr	r3, [r0, #16]
 800491a:	690c      	ldr	r4, [r1, #16]
 800491c:	4607      	mov	r7, r0
 800491e:	42a3      	cmp	r3, r4
 8004920:	f2c0 8083 	blt.w	8004a2a <quorem+0x116>
 8004924:	3c01      	subs	r4, #1
 8004926:	f100 0514 	add.w	r5, r0, #20
 800492a:	f101 0814 	add.w	r8, r1, #20
 800492e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004932:	9301      	str	r3, [sp, #4]
 8004934:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004938:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800493c:	3301      	adds	r3, #1
 800493e:	429a      	cmp	r2, r3
 8004940:	fbb2 f6f3 	udiv	r6, r2, r3
 8004944:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004948:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800494c:	d332      	bcc.n	80049b4 <quorem+0xa0>
 800494e:	f04f 0e00 	mov.w	lr, #0
 8004952:	4640      	mov	r0, r8
 8004954:	46ac      	mov	ip, r5
 8004956:	46f2      	mov	sl, lr
 8004958:	f850 2b04 	ldr.w	r2, [r0], #4
 800495c:	b293      	uxth	r3, r2
 800495e:	fb06 e303 	mla	r3, r6, r3, lr
 8004962:	0c12      	lsrs	r2, r2, #16
 8004964:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004968:	fb06 e202 	mla	r2, r6, r2, lr
 800496c:	b29b      	uxth	r3, r3
 800496e:	ebaa 0303 	sub.w	r3, sl, r3
 8004972:	f8dc a000 	ldr.w	sl, [ip]
 8004976:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800497a:	fa1f fa8a 	uxth.w	sl, sl
 800497e:	4453      	add	r3, sl
 8004980:	fa1f fa82 	uxth.w	sl, r2
 8004984:	f8dc 2000 	ldr.w	r2, [ip]
 8004988:	4581      	cmp	r9, r0
 800498a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800498e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004992:	b29b      	uxth	r3, r3
 8004994:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004998:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800499c:	f84c 3b04 	str.w	r3, [ip], #4
 80049a0:	d2da      	bcs.n	8004958 <quorem+0x44>
 80049a2:	f855 300b 	ldr.w	r3, [r5, fp]
 80049a6:	b92b      	cbnz	r3, 80049b4 <quorem+0xa0>
 80049a8:	9b01      	ldr	r3, [sp, #4]
 80049aa:	3b04      	subs	r3, #4
 80049ac:	429d      	cmp	r5, r3
 80049ae:	461a      	mov	r2, r3
 80049b0:	d32f      	bcc.n	8004a12 <quorem+0xfe>
 80049b2:	613c      	str	r4, [r7, #16]
 80049b4:	4638      	mov	r0, r7
 80049b6:	f001 f8cb 	bl	8005b50 <__mcmp>
 80049ba:	2800      	cmp	r0, #0
 80049bc:	db25      	blt.n	8004a0a <quorem+0xf6>
 80049be:	4628      	mov	r0, r5
 80049c0:	f04f 0c00 	mov.w	ip, #0
 80049c4:	3601      	adds	r6, #1
 80049c6:	f858 1b04 	ldr.w	r1, [r8], #4
 80049ca:	f8d0 e000 	ldr.w	lr, [r0]
 80049ce:	b28b      	uxth	r3, r1
 80049d0:	ebac 0303 	sub.w	r3, ip, r3
 80049d4:	fa1f f28e 	uxth.w	r2, lr
 80049d8:	4413      	add	r3, r2
 80049da:	0c0a      	lsrs	r2, r1, #16
 80049dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80049e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80049ea:	45c1      	cmp	r9, r8
 80049ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80049f0:	f840 3b04 	str.w	r3, [r0], #4
 80049f4:	d2e7      	bcs.n	80049c6 <quorem+0xb2>
 80049f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80049fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80049fe:	b922      	cbnz	r2, 8004a0a <quorem+0xf6>
 8004a00:	3b04      	subs	r3, #4
 8004a02:	429d      	cmp	r5, r3
 8004a04:	461a      	mov	r2, r3
 8004a06:	d30a      	bcc.n	8004a1e <quorem+0x10a>
 8004a08:	613c      	str	r4, [r7, #16]
 8004a0a:	4630      	mov	r0, r6
 8004a0c:	b003      	add	sp, #12
 8004a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a12:	6812      	ldr	r2, [r2, #0]
 8004a14:	3b04      	subs	r3, #4
 8004a16:	2a00      	cmp	r2, #0
 8004a18:	d1cb      	bne.n	80049b2 <quorem+0x9e>
 8004a1a:	3c01      	subs	r4, #1
 8004a1c:	e7c6      	b.n	80049ac <quorem+0x98>
 8004a1e:	6812      	ldr	r2, [r2, #0]
 8004a20:	3b04      	subs	r3, #4
 8004a22:	2a00      	cmp	r2, #0
 8004a24:	d1f0      	bne.n	8004a08 <quorem+0xf4>
 8004a26:	3c01      	subs	r4, #1
 8004a28:	e7eb      	b.n	8004a02 <quorem+0xee>
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	e7ee      	b.n	8004a0c <quorem+0xf8>
	...

08004a30 <_dtoa_r>:
 8004a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a34:	4616      	mov	r6, r2
 8004a36:	461f      	mov	r7, r3
 8004a38:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004a3a:	b099      	sub	sp, #100	; 0x64
 8004a3c:	4605      	mov	r5, r0
 8004a3e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004a42:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004a46:	b974      	cbnz	r4, 8004a66 <_dtoa_r+0x36>
 8004a48:	2010      	movs	r0, #16
 8004a4a:	f000 fde3 	bl	8005614 <malloc>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	6268      	str	r0, [r5, #36]	; 0x24
 8004a52:	b920      	cbnz	r0, 8004a5e <_dtoa_r+0x2e>
 8004a54:	21ea      	movs	r1, #234	; 0xea
 8004a56:	4bae      	ldr	r3, [pc, #696]	; (8004d10 <_dtoa_r+0x2e0>)
 8004a58:	48ae      	ldr	r0, [pc, #696]	; (8004d14 <_dtoa_r+0x2e4>)
 8004a5a:	f001 fba1 	bl	80061a0 <__assert_func>
 8004a5e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004a62:	6004      	str	r4, [r0, #0]
 8004a64:	60c4      	str	r4, [r0, #12]
 8004a66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004a68:	6819      	ldr	r1, [r3, #0]
 8004a6a:	b151      	cbz	r1, 8004a82 <_dtoa_r+0x52>
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	2301      	movs	r3, #1
 8004a70:	4093      	lsls	r3, r2
 8004a72:	604a      	str	r2, [r1, #4]
 8004a74:	608b      	str	r3, [r1, #8]
 8004a76:	4628      	mov	r0, r5
 8004a78:	f000 fe30 	bl	80056dc <_Bfree>
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	1e3b      	subs	r3, r7, #0
 8004a84:	bfaf      	iteee	ge
 8004a86:	2300      	movge	r3, #0
 8004a88:	2201      	movlt	r2, #1
 8004a8a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004a8e:	9305      	strlt	r3, [sp, #20]
 8004a90:	bfa8      	it	ge
 8004a92:	f8c8 3000 	strge.w	r3, [r8]
 8004a96:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004a9a:	4b9f      	ldr	r3, [pc, #636]	; (8004d18 <_dtoa_r+0x2e8>)
 8004a9c:	bfb8      	it	lt
 8004a9e:	f8c8 2000 	strlt.w	r2, [r8]
 8004aa2:	ea33 0309 	bics.w	r3, r3, r9
 8004aa6:	d119      	bne.n	8004adc <_dtoa_r+0xac>
 8004aa8:	f242 730f 	movw	r3, #9999	; 0x270f
 8004aac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004aae:	6013      	str	r3, [r2, #0]
 8004ab0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004ab4:	4333      	orrs	r3, r6
 8004ab6:	f000 8580 	beq.w	80055ba <_dtoa_r+0xb8a>
 8004aba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004abc:	b953      	cbnz	r3, 8004ad4 <_dtoa_r+0xa4>
 8004abe:	4b97      	ldr	r3, [pc, #604]	; (8004d1c <_dtoa_r+0x2ec>)
 8004ac0:	e022      	b.n	8004b08 <_dtoa_r+0xd8>
 8004ac2:	4b97      	ldr	r3, [pc, #604]	; (8004d20 <_dtoa_r+0x2f0>)
 8004ac4:	9308      	str	r3, [sp, #32]
 8004ac6:	3308      	adds	r3, #8
 8004ac8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004aca:	6013      	str	r3, [r2, #0]
 8004acc:	9808      	ldr	r0, [sp, #32]
 8004ace:	b019      	add	sp, #100	; 0x64
 8004ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ad4:	4b91      	ldr	r3, [pc, #580]	; (8004d1c <_dtoa_r+0x2ec>)
 8004ad6:	9308      	str	r3, [sp, #32]
 8004ad8:	3303      	adds	r3, #3
 8004ada:	e7f5      	b.n	8004ac8 <_dtoa_r+0x98>
 8004adc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004ae0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004ae4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ae8:	2200      	movs	r2, #0
 8004aea:	2300      	movs	r3, #0
 8004aec:	f7fb ff5c 	bl	80009a8 <__aeabi_dcmpeq>
 8004af0:	4680      	mov	r8, r0
 8004af2:	b158      	cbz	r0, 8004b0c <_dtoa_r+0xdc>
 8004af4:	2301      	movs	r3, #1
 8004af6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004af8:	6013      	str	r3, [r2, #0]
 8004afa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 8559 	beq.w	80055b4 <_dtoa_r+0xb84>
 8004b02:	4888      	ldr	r0, [pc, #544]	; (8004d24 <_dtoa_r+0x2f4>)
 8004b04:	6018      	str	r0, [r3, #0]
 8004b06:	1e43      	subs	r3, r0, #1
 8004b08:	9308      	str	r3, [sp, #32]
 8004b0a:	e7df      	b.n	8004acc <_dtoa_r+0x9c>
 8004b0c:	ab16      	add	r3, sp, #88	; 0x58
 8004b0e:	9301      	str	r3, [sp, #4]
 8004b10:	ab17      	add	r3, sp, #92	; 0x5c
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	4628      	mov	r0, r5
 8004b16:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004b1a:	f001 f8c5 	bl	8005ca8 <__d2b>
 8004b1e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004b22:	4682      	mov	sl, r0
 8004b24:	2c00      	cmp	r4, #0
 8004b26:	d07e      	beq.n	8004c26 <_dtoa_r+0x1f6>
 8004b28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b2e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004b32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b36:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004b3a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004b3e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004b42:	2200      	movs	r2, #0
 8004b44:	4b78      	ldr	r3, [pc, #480]	; (8004d28 <_dtoa_r+0x2f8>)
 8004b46:	f7fb fb0f 	bl	8000168 <__aeabi_dsub>
 8004b4a:	a36b      	add	r3, pc, #428	; (adr r3, 8004cf8 <_dtoa_r+0x2c8>)
 8004b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b50:	f7fb fcc2 	bl	80004d8 <__aeabi_dmul>
 8004b54:	a36a      	add	r3, pc, #424	; (adr r3, 8004d00 <_dtoa_r+0x2d0>)
 8004b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5a:	f7fb fb07 	bl	800016c <__adddf3>
 8004b5e:	4606      	mov	r6, r0
 8004b60:	4620      	mov	r0, r4
 8004b62:	460f      	mov	r7, r1
 8004b64:	f7fb fc4e 	bl	8000404 <__aeabi_i2d>
 8004b68:	a367      	add	r3, pc, #412	; (adr r3, 8004d08 <_dtoa_r+0x2d8>)
 8004b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6e:	f7fb fcb3 	bl	80004d8 <__aeabi_dmul>
 8004b72:	4602      	mov	r2, r0
 8004b74:	460b      	mov	r3, r1
 8004b76:	4630      	mov	r0, r6
 8004b78:	4639      	mov	r1, r7
 8004b7a:	f7fb faf7 	bl	800016c <__adddf3>
 8004b7e:	4606      	mov	r6, r0
 8004b80:	460f      	mov	r7, r1
 8004b82:	f7fb ff59 	bl	8000a38 <__aeabi_d2iz>
 8004b86:	2200      	movs	r2, #0
 8004b88:	4681      	mov	r9, r0
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	4630      	mov	r0, r6
 8004b8e:	4639      	mov	r1, r7
 8004b90:	f7fb ff14 	bl	80009bc <__aeabi_dcmplt>
 8004b94:	b148      	cbz	r0, 8004baa <_dtoa_r+0x17a>
 8004b96:	4648      	mov	r0, r9
 8004b98:	f7fb fc34 	bl	8000404 <__aeabi_i2d>
 8004b9c:	4632      	mov	r2, r6
 8004b9e:	463b      	mov	r3, r7
 8004ba0:	f7fb ff02 	bl	80009a8 <__aeabi_dcmpeq>
 8004ba4:	b908      	cbnz	r0, 8004baa <_dtoa_r+0x17a>
 8004ba6:	f109 39ff 	add.w	r9, r9, #4294967295
 8004baa:	f1b9 0f16 	cmp.w	r9, #22
 8004bae:	d857      	bhi.n	8004c60 <_dtoa_r+0x230>
 8004bb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004bb4:	4b5d      	ldr	r3, [pc, #372]	; (8004d2c <_dtoa_r+0x2fc>)
 8004bb6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bbe:	f7fb fefd 	bl	80009bc <__aeabi_dcmplt>
 8004bc2:	2800      	cmp	r0, #0
 8004bc4:	d04e      	beq.n	8004c64 <_dtoa_r+0x234>
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	f109 39ff 	add.w	r9, r9, #4294967295
 8004bcc:	930f      	str	r3, [sp, #60]	; 0x3c
 8004bce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004bd0:	1b1c      	subs	r4, r3, r4
 8004bd2:	1e63      	subs	r3, r4, #1
 8004bd4:	9309      	str	r3, [sp, #36]	; 0x24
 8004bd6:	bf49      	itett	mi
 8004bd8:	f1c4 0301 	rsbmi	r3, r4, #1
 8004bdc:	2300      	movpl	r3, #0
 8004bde:	9306      	strmi	r3, [sp, #24]
 8004be0:	2300      	movmi	r3, #0
 8004be2:	bf54      	ite	pl
 8004be4:	9306      	strpl	r3, [sp, #24]
 8004be6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004be8:	f1b9 0f00 	cmp.w	r9, #0
 8004bec:	db3c      	blt.n	8004c68 <_dtoa_r+0x238>
 8004bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bf0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004bf4:	444b      	add	r3, r9
 8004bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	930a      	str	r3, [sp, #40]	; 0x28
 8004bfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004bfe:	2b09      	cmp	r3, #9
 8004c00:	d86c      	bhi.n	8004cdc <_dtoa_r+0x2ac>
 8004c02:	2b05      	cmp	r3, #5
 8004c04:	bfc4      	itt	gt
 8004c06:	3b04      	subgt	r3, #4
 8004c08:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004c0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c0c:	bfc8      	it	gt
 8004c0e:	2400      	movgt	r4, #0
 8004c10:	f1a3 0302 	sub.w	r3, r3, #2
 8004c14:	bfd8      	it	le
 8004c16:	2401      	movle	r4, #1
 8004c18:	2b03      	cmp	r3, #3
 8004c1a:	f200 808b 	bhi.w	8004d34 <_dtoa_r+0x304>
 8004c1e:	e8df f003 	tbb	[pc, r3]
 8004c22:	4f2d      	.short	0x4f2d
 8004c24:	5b4d      	.short	0x5b4d
 8004c26:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004c2a:	441c      	add	r4, r3
 8004c2c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004c30:	2b20      	cmp	r3, #32
 8004c32:	bfc3      	ittte	gt
 8004c34:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004c38:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004c3c:	fa09 f303 	lslgt.w	r3, r9, r3
 8004c40:	f1c3 0320 	rsble	r3, r3, #32
 8004c44:	bfc6      	itte	gt
 8004c46:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004c4a:	4318      	orrgt	r0, r3
 8004c4c:	fa06 f003 	lslle.w	r0, r6, r3
 8004c50:	f7fb fbc8 	bl	80003e4 <__aeabi_ui2d>
 8004c54:	2301      	movs	r3, #1
 8004c56:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004c5a:	3c01      	subs	r4, #1
 8004c5c:	9313      	str	r3, [sp, #76]	; 0x4c
 8004c5e:	e770      	b.n	8004b42 <_dtoa_r+0x112>
 8004c60:	2301      	movs	r3, #1
 8004c62:	e7b3      	b.n	8004bcc <_dtoa_r+0x19c>
 8004c64:	900f      	str	r0, [sp, #60]	; 0x3c
 8004c66:	e7b2      	b.n	8004bce <_dtoa_r+0x19e>
 8004c68:	9b06      	ldr	r3, [sp, #24]
 8004c6a:	eba3 0309 	sub.w	r3, r3, r9
 8004c6e:	9306      	str	r3, [sp, #24]
 8004c70:	f1c9 0300 	rsb	r3, r9, #0
 8004c74:	930a      	str	r3, [sp, #40]	; 0x28
 8004c76:	2300      	movs	r3, #0
 8004c78:	930e      	str	r3, [sp, #56]	; 0x38
 8004c7a:	e7bf      	b.n	8004bfc <_dtoa_r+0x1cc>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	dc59      	bgt.n	8004d3a <_dtoa_r+0x30a>
 8004c86:	f04f 0b01 	mov.w	fp, #1
 8004c8a:	465b      	mov	r3, fp
 8004c8c:	f8cd b008 	str.w	fp, [sp, #8]
 8004c90:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8004c94:	2200      	movs	r2, #0
 8004c96:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004c98:	6042      	str	r2, [r0, #4]
 8004c9a:	2204      	movs	r2, #4
 8004c9c:	f102 0614 	add.w	r6, r2, #20
 8004ca0:	429e      	cmp	r6, r3
 8004ca2:	6841      	ldr	r1, [r0, #4]
 8004ca4:	d94f      	bls.n	8004d46 <_dtoa_r+0x316>
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	f000 fcd8 	bl	800565c <_Balloc>
 8004cac:	9008      	str	r0, [sp, #32]
 8004cae:	2800      	cmp	r0, #0
 8004cb0:	d14d      	bne.n	8004d4e <_dtoa_r+0x31e>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004cb8:	4b1d      	ldr	r3, [pc, #116]	; (8004d30 <_dtoa_r+0x300>)
 8004cba:	e6cd      	b.n	8004a58 <_dtoa_r+0x28>
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e7de      	b.n	8004c7e <_dtoa_r+0x24e>
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cc4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004cc6:	eb09 0b03 	add.w	fp, r9, r3
 8004cca:	f10b 0301 	add.w	r3, fp, #1
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	9302      	str	r3, [sp, #8]
 8004cd2:	bfb8      	it	lt
 8004cd4:	2301      	movlt	r3, #1
 8004cd6:	e7dd      	b.n	8004c94 <_dtoa_r+0x264>
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e7f2      	b.n	8004cc2 <_dtoa_r+0x292>
 8004cdc:	2401      	movs	r4, #1
 8004cde:	2300      	movs	r3, #0
 8004ce0:	940b      	str	r4, [sp, #44]	; 0x2c
 8004ce2:	9322      	str	r3, [sp, #136]	; 0x88
 8004ce4:	f04f 3bff 	mov.w	fp, #4294967295
 8004ce8:	2200      	movs	r2, #0
 8004cea:	2312      	movs	r3, #18
 8004cec:	f8cd b008 	str.w	fp, [sp, #8]
 8004cf0:	9223      	str	r2, [sp, #140]	; 0x8c
 8004cf2:	e7cf      	b.n	8004c94 <_dtoa_r+0x264>
 8004cf4:	f3af 8000 	nop.w
 8004cf8:	636f4361 	.word	0x636f4361
 8004cfc:	3fd287a7 	.word	0x3fd287a7
 8004d00:	8b60c8b3 	.word	0x8b60c8b3
 8004d04:	3fc68a28 	.word	0x3fc68a28
 8004d08:	509f79fb 	.word	0x509f79fb
 8004d0c:	3fd34413 	.word	0x3fd34413
 8004d10:	08006ef6 	.word	0x08006ef6
 8004d14:	08006f0d 	.word	0x08006f0d
 8004d18:	7ff00000 	.word	0x7ff00000
 8004d1c:	08006ef2 	.word	0x08006ef2
 8004d20:	08006ee9 	.word	0x08006ee9
 8004d24:	08006dc5 	.word	0x08006dc5
 8004d28:	3ff80000 	.word	0x3ff80000
 8004d2c:	08007008 	.word	0x08007008
 8004d30:	08006f6c 	.word	0x08006f6c
 8004d34:	2301      	movs	r3, #1
 8004d36:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d38:	e7d4      	b.n	8004ce4 <_dtoa_r+0x2b4>
 8004d3a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004d3e:	465b      	mov	r3, fp
 8004d40:	f8cd b008 	str.w	fp, [sp, #8]
 8004d44:	e7a6      	b.n	8004c94 <_dtoa_r+0x264>
 8004d46:	3101      	adds	r1, #1
 8004d48:	6041      	str	r1, [r0, #4]
 8004d4a:	0052      	lsls	r2, r2, #1
 8004d4c:	e7a6      	b.n	8004c9c <_dtoa_r+0x26c>
 8004d4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004d50:	9a08      	ldr	r2, [sp, #32]
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	9b02      	ldr	r3, [sp, #8]
 8004d56:	2b0e      	cmp	r3, #14
 8004d58:	f200 80a8 	bhi.w	8004eac <_dtoa_r+0x47c>
 8004d5c:	2c00      	cmp	r4, #0
 8004d5e:	f000 80a5 	beq.w	8004eac <_dtoa_r+0x47c>
 8004d62:	f1b9 0f00 	cmp.w	r9, #0
 8004d66:	dd34      	ble.n	8004dd2 <_dtoa_r+0x3a2>
 8004d68:	4a9a      	ldr	r2, [pc, #616]	; (8004fd4 <_dtoa_r+0x5a4>)
 8004d6a:	f009 030f 	and.w	r3, r9, #15
 8004d6e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004d72:	f419 7f80 	tst.w	r9, #256	; 0x100
 8004d76:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d7a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004d7e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8004d82:	d016      	beq.n	8004db2 <_dtoa_r+0x382>
 8004d84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d88:	4b93      	ldr	r3, [pc, #588]	; (8004fd8 <_dtoa_r+0x5a8>)
 8004d8a:	2703      	movs	r7, #3
 8004d8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004d90:	f7fb fccc 	bl	800072c <__aeabi_ddiv>
 8004d94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d98:	f004 040f 	and.w	r4, r4, #15
 8004d9c:	4e8e      	ldr	r6, [pc, #568]	; (8004fd8 <_dtoa_r+0x5a8>)
 8004d9e:	b954      	cbnz	r4, 8004db6 <_dtoa_r+0x386>
 8004da0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004da4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004da8:	f7fb fcc0 	bl	800072c <__aeabi_ddiv>
 8004dac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004db0:	e029      	b.n	8004e06 <_dtoa_r+0x3d6>
 8004db2:	2702      	movs	r7, #2
 8004db4:	e7f2      	b.n	8004d9c <_dtoa_r+0x36c>
 8004db6:	07e1      	lsls	r1, r4, #31
 8004db8:	d508      	bpl.n	8004dcc <_dtoa_r+0x39c>
 8004dba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004dbe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004dc2:	f7fb fb89 	bl	80004d8 <__aeabi_dmul>
 8004dc6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004dca:	3701      	adds	r7, #1
 8004dcc:	1064      	asrs	r4, r4, #1
 8004dce:	3608      	adds	r6, #8
 8004dd0:	e7e5      	b.n	8004d9e <_dtoa_r+0x36e>
 8004dd2:	f000 80a5 	beq.w	8004f20 <_dtoa_r+0x4f0>
 8004dd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004dda:	f1c9 0400 	rsb	r4, r9, #0
 8004dde:	4b7d      	ldr	r3, [pc, #500]	; (8004fd4 <_dtoa_r+0x5a4>)
 8004de0:	f004 020f 	and.w	r2, r4, #15
 8004de4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dec:	f7fb fb74 	bl	80004d8 <__aeabi_dmul>
 8004df0:	2702      	movs	r7, #2
 8004df2:	2300      	movs	r3, #0
 8004df4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004df8:	4e77      	ldr	r6, [pc, #476]	; (8004fd8 <_dtoa_r+0x5a8>)
 8004dfa:	1124      	asrs	r4, r4, #4
 8004dfc:	2c00      	cmp	r4, #0
 8004dfe:	f040 8084 	bne.w	8004f0a <_dtoa_r+0x4da>
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1d2      	bne.n	8004dac <_dtoa_r+0x37c>
 8004e06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f000 808b 	beq.w	8004f24 <_dtoa_r+0x4f4>
 8004e0e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004e12:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004e16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	4b6f      	ldr	r3, [pc, #444]	; (8004fdc <_dtoa_r+0x5ac>)
 8004e1e:	f7fb fdcd 	bl	80009bc <__aeabi_dcmplt>
 8004e22:	2800      	cmp	r0, #0
 8004e24:	d07e      	beq.n	8004f24 <_dtoa_r+0x4f4>
 8004e26:	9b02      	ldr	r3, [sp, #8]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d07b      	beq.n	8004f24 <_dtoa_r+0x4f4>
 8004e2c:	f1bb 0f00 	cmp.w	fp, #0
 8004e30:	dd38      	ble.n	8004ea4 <_dtoa_r+0x474>
 8004e32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e36:	2200      	movs	r2, #0
 8004e38:	4b69      	ldr	r3, [pc, #420]	; (8004fe0 <_dtoa_r+0x5b0>)
 8004e3a:	f7fb fb4d 	bl	80004d8 <__aeabi_dmul>
 8004e3e:	465c      	mov	r4, fp
 8004e40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e44:	f109 38ff 	add.w	r8, r9, #4294967295
 8004e48:	3701      	adds	r7, #1
 8004e4a:	4638      	mov	r0, r7
 8004e4c:	f7fb fada 	bl	8000404 <__aeabi_i2d>
 8004e50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e54:	f7fb fb40 	bl	80004d8 <__aeabi_dmul>
 8004e58:	2200      	movs	r2, #0
 8004e5a:	4b62      	ldr	r3, [pc, #392]	; (8004fe4 <_dtoa_r+0x5b4>)
 8004e5c:	f7fb f986 	bl	800016c <__adddf3>
 8004e60:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004e64:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004e68:	9611      	str	r6, [sp, #68]	; 0x44
 8004e6a:	2c00      	cmp	r4, #0
 8004e6c:	d15d      	bne.n	8004f2a <_dtoa_r+0x4fa>
 8004e6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e72:	2200      	movs	r2, #0
 8004e74:	4b5c      	ldr	r3, [pc, #368]	; (8004fe8 <_dtoa_r+0x5b8>)
 8004e76:	f7fb f977 	bl	8000168 <__aeabi_dsub>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004e82:	4633      	mov	r3, r6
 8004e84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004e86:	f7fb fdb7 	bl	80009f8 <__aeabi_dcmpgt>
 8004e8a:	2800      	cmp	r0, #0
 8004e8c:	f040 829e 	bne.w	80053cc <_dtoa_r+0x99c>
 8004e90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004e96:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004e9a:	f7fb fd8f 	bl	80009bc <__aeabi_dcmplt>
 8004e9e:	2800      	cmp	r0, #0
 8004ea0:	f040 8292 	bne.w	80053c8 <_dtoa_r+0x998>
 8004ea4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004ea8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004eac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f2c0 8153 	blt.w	800515a <_dtoa_r+0x72a>
 8004eb4:	f1b9 0f0e 	cmp.w	r9, #14
 8004eb8:	f300 814f 	bgt.w	800515a <_dtoa_r+0x72a>
 8004ebc:	4b45      	ldr	r3, [pc, #276]	; (8004fd4 <_dtoa_r+0x5a4>)
 8004ebe:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004ec2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004ec6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004eca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f280 80db 	bge.w	8005088 <_dtoa_r+0x658>
 8004ed2:	9b02      	ldr	r3, [sp, #8]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f300 80d7 	bgt.w	8005088 <_dtoa_r+0x658>
 8004eda:	f040 8274 	bne.w	80053c6 <_dtoa_r+0x996>
 8004ede:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	4b40      	ldr	r3, [pc, #256]	; (8004fe8 <_dtoa_r+0x5b8>)
 8004ee6:	f7fb faf7 	bl	80004d8 <__aeabi_dmul>
 8004eea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004eee:	f7fb fd79 	bl	80009e4 <__aeabi_dcmpge>
 8004ef2:	9c02      	ldr	r4, [sp, #8]
 8004ef4:	4626      	mov	r6, r4
 8004ef6:	2800      	cmp	r0, #0
 8004ef8:	f040 824a 	bne.w	8005390 <_dtoa_r+0x960>
 8004efc:	2331      	movs	r3, #49	; 0x31
 8004efe:	9f08      	ldr	r7, [sp, #32]
 8004f00:	f109 0901 	add.w	r9, r9, #1
 8004f04:	f807 3b01 	strb.w	r3, [r7], #1
 8004f08:	e246      	b.n	8005398 <_dtoa_r+0x968>
 8004f0a:	07e2      	lsls	r2, r4, #31
 8004f0c:	d505      	bpl.n	8004f1a <_dtoa_r+0x4ea>
 8004f0e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004f12:	f7fb fae1 	bl	80004d8 <__aeabi_dmul>
 8004f16:	2301      	movs	r3, #1
 8004f18:	3701      	adds	r7, #1
 8004f1a:	1064      	asrs	r4, r4, #1
 8004f1c:	3608      	adds	r6, #8
 8004f1e:	e76d      	b.n	8004dfc <_dtoa_r+0x3cc>
 8004f20:	2702      	movs	r7, #2
 8004f22:	e770      	b.n	8004e06 <_dtoa_r+0x3d6>
 8004f24:	46c8      	mov	r8, r9
 8004f26:	9c02      	ldr	r4, [sp, #8]
 8004f28:	e78f      	b.n	8004e4a <_dtoa_r+0x41a>
 8004f2a:	9908      	ldr	r1, [sp, #32]
 8004f2c:	4b29      	ldr	r3, [pc, #164]	; (8004fd4 <_dtoa_r+0x5a4>)
 8004f2e:	4421      	add	r1, r4
 8004f30:	9112      	str	r1, [sp, #72]	; 0x48
 8004f32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f34:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004f38:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004f3c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004f40:	2900      	cmp	r1, #0
 8004f42:	d055      	beq.n	8004ff0 <_dtoa_r+0x5c0>
 8004f44:	2000      	movs	r0, #0
 8004f46:	4929      	ldr	r1, [pc, #164]	; (8004fec <_dtoa_r+0x5bc>)
 8004f48:	f7fb fbf0 	bl	800072c <__aeabi_ddiv>
 8004f4c:	463b      	mov	r3, r7
 8004f4e:	4632      	mov	r2, r6
 8004f50:	f7fb f90a 	bl	8000168 <__aeabi_dsub>
 8004f54:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004f58:	9f08      	ldr	r7, [sp, #32]
 8004f5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f5e:	f7fb fd6b 	bl	8000a38 <__aeabi_d2iz>
 8004f62:	4604      	mov	r4, r0
 8004f64:	f7fb fa4e 	bl	8000404 <__aeabi_i2d>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f70:	f7fb f8fa 	bl	8000168 <__aeabi_dsub>
 8004f74:	4602      	mov	r2, r0
 8004f76:	460b      	mov	r3, r1
 8004f78:	3430      	adds	r4, #48	; 0x30
 8004f7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004f7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004f82:	f807 4b01 	strb.w	r4, [r7], #1
 8004f86:	f7fb fd19 	bl	80009bc <__aeabi_dcmplt>
 8004f8a:	2800      	cmp	r0, #0
 8004f8c:	d174      	bne.n	8005078 <_dtoa_r+0x648>
 8004f8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f92:	2000      	movs	r0, #0
 8004f94:	4911      	ldr	r1, [pc, #68]	; (8004fdc <_dtoa_r+0x5ac>)
 8004f96:	f7fb f8e7 	bl	8000168 <__aeabi_dsub>
 8004f9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004f9e:	f7fb fd0d 	bl	80009bc <__aeabi_dcmplt>
 8004fa2:	2800      	cmp	r0, #0
 8004fa4:	f040 80b6 	bne.w	8005114 <_dtoa_r+0x6e4>
 8004fa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004faa:	429f      	cmp	r7, r3
 8004fac:	f43f af7a 	beq.w	8004ea4 <_dtoa_r+0x474>
 8004fb0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	4b0a      	ldr	r3, [pc, #40]	; (8004fe0 <_dtoa_r+0x5b0>)
 8004fb8:	f7fb fa8e 	bl	80004d8 <__aeabi_dmul>
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004fc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fc6:	4b06      	ldr	r3, [pc, #24]	; (8004fe0 <_dtoa_r+0x5b0>)
 8004fc8:	f7fb fa86 	bl	80004d8 <__aeabi_dmul>
 8004fcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fd0:	e7c3      	b.n	8004f5a <_dtoa_r+0x52a>
 8004fd2:	bf00      	nop
 8004fd4:	08007008 	.word	0x08007008
 8004fd8:	08006fe0 	.word	0x08006fe0
 8004fdc:	3ff00000 	.word	0x3ff00000
 8004fe0:	40240000 	.word	0x40240000
 8004fe4:	401c0000 	.word	0x401c0000
 8004fe8:	40140000 	.word	0x40140000
 8004fec:	3fe00000 	.word	0x3fe00000
 8004ff0:	4630      	mov	r0, r6
 8004ff2:	4639      	mov	r1, r7
 8004ff4:	f7fb fa70 	bl	80004d8 <__aeabi_dmul>
 8004ff8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004ffa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ffe:	9c08      	ldr	r4, [sp, #32]
 8005000:	9314      	str	r3, [sp, #80]	; 0x50
 8005002:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005006:	f7fb fd17 	bl	8000a38 <__aeabi_d2iz>
 800500a:	9015      	str	r0, [sp, #84]	; 0x54
 800500c:	f7fb f9fa 	bl	8000404 <__aeabi_i2d>
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005018:	f7fb f8a6 	bl	8000168 <__aeabi_dsub>
 800501c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800501e:	4606      	mov	r6, r0
 8005020:	3330      	adds	r3, #48	; 0x30
 8005022:	f804 3b01 	strb.w	r3, [r4], #1
 8005026:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005028:	460f      	mov	r7, r1
 800502a:	429c      	cmp	r4, r3
 800502c:	f04f 0200 	mov.w	r2, #0
 8005030:	d124      	bne.n	800507c <_dtoa_r+0x64c>
 8005032:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005036:	4bb3      	ldr	r3, [pc, #716]	; (8005304 <_dtoa_r+0x8d4>)
 8005038:	f7fb f898 	bl	800016c <__adddf3>
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	4630      	mov	r0, r6
 8005042:	4639      	mov	r1, r7
 8005044:	f7fb fcd8 	bl	80009f8 <__aeabi_dcmpgt>
 8005048:	2800      	cmp	r0, #0
 800504a:	d162      	bne.n	8005112 <_dtoa_r+0x6e2>
 800504c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005050:	2000      	movs	r0, #0
 8005052:	49ac      	ldr	r1, [pc, #688]	; (8005304 <_dtoa_r+0x8d4>)
 8005054:	f7fb f888 	bl	8000168 <__aeabi_dsub>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	4630      	mov	r0, r6
 800505e:	4639      	mov	r1, r7
 8005060:	f7fb fcac 	bl	80009bc <__aeabi_dcmplt>
 8005064:	2800      	cmp	r0, #0
 8005066:	f43f af1d 	beq.w	8004ea4 <_dtoa_r+0x474>
 800506a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800506c:	1e7b      	subs	r3, r7, #1
 800506e:	9314      	str	r3, [sp, #80]	; 0x50
 8005070:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005074:	2b30      	cmp	r3, #48	; 0x30
 8005076:	d0f8      	beq.n	800506a <_dtoa_r+0x63a>
 8005078:	46c1      	mov	r9, r8
 800507a:	e03a      	b.n	80050f2 <_dtoa_r+0x6c2>
 800507c:	4ba2      	ldr	r3, [pc, #648]	; (8005308 <_dtoa_r+0x8d8>)
 800507e:	f7fb fa2b 	bl	80004d8 <__aeabi_dmul>
 8005082:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005086:	e7bc      	b.n	8005002 <_dtoa_r+0x5d2>
 8005088:	9f08      	ldr	r7, [sp, #32]
 800508a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800508e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005092:	f7fb fb4b 	bl	800072c <__aeabi_ddiv>
 8005096:	f7fb fccf 	bl	8000a38 <__aeabi_d2iz>
 800509a:	4604      	mov	r4, r0
 800509c:	f7fb f9b2 	bl	8000404 <__aeabi_i2d>
 80050a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80050a4:	f7fb fa18 	bl	80004d8 <__aeabi_dmul>
 80050a8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80050ac:	460b      	mov	r3, r1
 80050ae:	4602      	mov	r2, r0
 80050b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050b4:	f7fb f858 	bl	8000168 <__aeabi_dsub>
 80050b8:	f807 6b01 	strb.w	r6, [r7], #1
 80050bc:	9e08      	ldr	r6, [sp, #32]
 80050be:	9b02      	ldr	r3, [sp, #8]
 80050c0:	1bbe      	subs	r6, r7, r6
 80050c2:	42b3      	cmp	r3, r6
 80050c4:	d13a      	bne.n	800513c <_dtoa_r+0x70c>
 80050c6:	4602      	mov	r2, r0
 80050c8:	460b      	mov	r3, r1
 80050ca:	f7fb f84f 	bl	800016c <__adddf3>
 80050ce:	4602      	mov	r2, r0
 80050d0:	460b      	mov	r3, r1
 80050d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80050d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80050da:	f7fb fc8d 	bl	80009f8 <__aeabi_dcmpgt>
 80050de:	bb58      	cbnz	r0, 8005138 <_dtoa_r+0x708>
 80050e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80050e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050e8:	f7fb fc5e 	bl	80009a8 <__aeabi_dcmpeq>
 80050ec:	b108      	cbz	r0, 80050f2 <_dtoa_r+0x6c2>
 80050ee:	07e1      	lsls	r1, r4, #31
 80050f0:	d422      	bmi.n	8005138 <_dtoa_r+0x708>
 80050f2:	4628      	mov	r0, r5
 80050f4:	4651      	mov	r1, sl
 80050f6:	f000 faf1 	bl	80056dc <_Bfree>
 80050fa:	2300      	movs	r3, #0
 80050fc:	703b      	strb	r3, [r7, #0]
 80050fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005100:	f109 0001 	add.w	r0, r9, #1
 8005104:	6018      	str	r0, [r3, #0]
 8005106:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005108:	2b00      	cmp	r3, #0
 800510a:	f43f acdf 	beq.w	8004acc <_dtoa_r+0x9c>
 800510e:	601f      	str	r7, [r3, #0]
 8005110:	e4dc      	b.n	8004acc <_dtoa_r+0x9c>
 8005112:	4627      	mov	r7, r4
 8005114:	463b      	mov	r3, r7
 8005116:	461f      	mov	r7, r3
 8005118:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800511c:	2a39      	cmp	r2, #57	; 0x39
 800511e:	d107      	bne.n	8005130 <_dtoa_r+0x700>
 8005120:	9a08      	ldr	r2, [sp, #32]
 8005122:	429a      	cmp	r2, r3
 8005124:	d1f7      	bne.n	8005116 <_dtoa_r+0x6e6>
 8005126:	2230      	movs	r2, #48	; 0x30
 8005128:	9908      	ldr	r1, [sp, #32]
 800512a:	f108 0801 	add.w	r8, r8, #1
 800512e:	700a      	strb	r2, [r1, #0]
 8005130:	781a      	ldrb	r2, [r3, #0]
 8005132:	3201      	adds	r2, #1
 8005134:	701a      	strb	r2, [r3, #0]
 8005136:	e79f      	b.n	8005078 <_dtoa_r+0x648>
 8005138:	46c8      	mov	r8, r9
 800513a:	e7eb      	b.n	8005114 <_dtoa_r+0x6e4>
 800513c:	2200      	movs	r2, #0
 800513e:	4b72      	ldr	r3, [pc, #456]	; (8005308 <_dtoa_r+0x8d8>)
 8005140:	f7fb f9ca 	bl	80004d8 <__aeabi_dmul>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800514c:	2200      	movs	r2, #0
 800514e:	2300      	movs	r3, #0
 8005150:	f7fb fc2a 	bl	80009a8 <__aeabi_dcmpeq>
 8005154:	2800      	cmp	r0, #0
 8005156:	d098      	beq.n	800508a <_dtoa_r+0x65a>
 8005158:	e7cb      	b.n	80050f2 <_dtoa_r+0x6c2>
 800515a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800515c:	2a00      	cmp	r2, #0
 800515e:	f000 80cd 	beq.w	80052fc <_dtoa_r+0x8cc>
 8005162:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005164:	2a01      	cmp	r2, #1
 8005166:	f300 80af 	bgt.w	80052c8 <_dtoa_r+0x898>
 800516a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800516c:	2a00      	cmp	r2, #0
 800516e:	f000 80a7 	beq.w	80052c0 <_dtoa_r+0x890>
 8005172:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005176:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005178:	9f06      	ldr	r7, [sp, #24]
 800517a:	9a06      	ldr	r2, [sp, #24]
 800517c:	2101      	movs	r1, #1
 800517e:	441a      	add	r2, r3
 8005180:	9206      	str	r2, [sp, #24]
 8005182:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005184:	4628      	mov	r0, r5
 8005186:	441a      	add	r2, r3
 8005188:	9209      	str	r2, [sp, #36]	; 0x24
 800518a:	f000 fb61 	bl	8005850 <__i2b>
 800518e:	4606      	mov	r6, r0
 8005190:	2f00      	cmp	r7, #0
 8005192:	dd0c      	ble.n	80051ae <_dtoa_r+0x77e>
 8005194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005196:	2b00      	cmp	r3, #0
 8005198:	dd09      	ble.n	80051ae <_dtoa_r+0x77e>
 800519a:	42bb      	cmp	r3, r7
 800519c:	bfa8      	it	ge
 800519e:	463b      	movge	r3, r7
 80051a0:	9a06      	ldr	r2, [sp, #24]
 80051a2:	1aff      	subs	r7, r7, r3
 80051a4:	1ad2      	subs	r2, r2, r3
 80051a6:	9206      	str	r2, [sp, #24]
 80051a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	9309      	str	r3, [sp, #36]	; 0x24
 80051ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051b0:	b1f3      	cbz	r3, 80051f0 <_dtoa_r+0x7c0>
 80051b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 80a9 	beq.w	800530c <_dtoa_r+0x8dc>
 80051ba:	2c00      	cmp	r4, #0
 80051bc:	dd10      	ble.n	80051e0 <_dtoa_r+0x7b0>
 80051be:	4631      	mov	r1, r6
 80051c0:	4622      	mov	r2, r4
 80051c2:	4628      	mov	r0, r5
 80051c4:	f000 fbfe 	bl	80059c4 <__pow5mult>
 80051c8:	4652      	mov	r2, sl
 80051ca:	4601      	mov	r1, r0
 80051cc:	4606      	mov	r6, r0
 80051ce:	4628      	mov	r0, r5
 80051d0:	f000 fb54 	bl	800587c <__multiply>
 80051d4:	4680      	mov	r8, r0
 80051d6:	4651      	mov	r1, sl
 80051d8:	4628      	mov	r0, r5
 80051da:	f000 fa7f 	bl	80056dc <_Bfree>
 80051de:	46c2      	mov	sl, r8
 80051e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051e2:	1b1a      	subs	r2, r3, r4
 80051e4:	d004      	beq.n	80051f0 <_dtoa_r+0x7c0>
 80051e6:	4651      	mov	r1, sl
 80051e8:	4628      	mov	r0, r5
 80051ea:	f000 fbeb 	bl	80059c4 <__pow5mult>
 80051ee:	4682      	mov	sl, r0
 80051f0:	2101      	movs	r1, #1
 80051f2:	4628      	mov	r0, r5
 80051f4:	f000 fb2c 	bl	8005850 <__i2b>
 80051f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051fa:	4604      	mov	r4, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f340 8087 	ble.w	8005310 <_dtoa_r+0x8e0>
 8005202:	461a      	mov	r2, r3
 8005204:	4601      	mov	r1, r0
 8005206:	4628      	mov	r0, r5
 8005208:	f000 fbdc 	bl	80059c4 <__pow5mult>
 800520c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800520e:	4604      	mov	r4, r0
 8005210:	2b01      	cmp	r3, #1
 8005212:	f340 8080 	ble.w	8005316 <_dtoa_r+0x8e6>
 8005216:	f04f 0800 	mov.w	r8, #0
 800521a:	6923      	ldr	r3, [r4, #16]
 800521c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005220:	6918      	ldr	r0, [r3, #16]
 8005222:	f000 fac7 	bl	80057b4 <__hi0bits>
 8005226:	f1c0 0020 	rsb	r0, r0, #32
 800522a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800522c:	4418      	add	r0, r3
 800522e:	f010 001f 	ands.w	r0, r0, #31
 8005232:	f000 8092 	beq.w	800535a <_dtoa_r+0x92a>
 8005236:	f1c0 0320 	rsb	r3, r0, #32
 800523a:	2b04      	cmp	r3, #4
 800523c:	f340 808a 	ble.w	8005354 <_dtoa_r+0x924>
 8005240:	f1c0 001c 	rsb	r0, r0, #28
 8005244:	9b06      	ldr	r3, [sp, #24]
 8005246:	4407      	add	r7, r0
 8005248:	4403      	add	r3, r0
 800524a:	9306      	str	r3, [sp, #24]
 800524c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800524e:	4403      	add	r3, r0
 8005250:	9309      	str	r3, [sp, #36]	; 0x24
 8005252:	9b06      	ldr	r3, [sp, #24]
 8005254:	2b00      	cmp	r3, #0
 8005256:	dd05      	ble.n	8005264 <_dtoa_r+0x834>
 8005258:	4651      	mov	r1, sl
 800525a:	461a      	mov	r2, r3
 800525c:	4628      	mov	r0, r5
 800525e:	f000 fc0b 	bl	8005a78 <__lshift>
 8005262:	4682      	mov	sl, r0
 8005264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005266:	2b00      	cmp	r3, #0
 8005268:	dd05      	ble.n	8005276 <_dtoa_r+0x846>
 800526a:	4621      	mov	r1, r4
 800526c:	461a      	mov	r2, r3
 800526e:	4628      	mov	r0, r5
 8005270:	f000 fc02 	bl	8005a78 <__lshift>
 8005274:	4604      	mov	r4, r0
 8005276:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005278:	2b00      	cmp	r3, #0
 800527a:	d070      	beq.n	800535e <_dtoa_r+0x92e>
 800527c:	4621      	mov	r1, r4
 800527e:	4650      	mov	r0, sl
 8005280:	f000 fc66 	bl	8005b50 <__mcmp>
 8005284:	2800      	cmp	r0, #0
 8005286:	da6a      	bge.n	800535e <_dtoa_r+0x92e>
 8005288:	2300      	movs	r3, #0
 800528a:	4651      	mov	r1, sl
 800528c:	220a      	movs	r2, #10
 800528e:	4628      	mov	r0, r5
 8005290:	f000 fa46 	bl	8005720 <__multadd>
 8005294:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005296:	4682      	mov	sl, r0
 8005298:	f109 39ff 	add.w	r9, r9, #4294967295
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 8193 	beq.w	80055c8 <_dtoa_r+0xb98>
 80052a2:	4631      	mov	r1, r6
 80052a4:	2300      	movs	r3, #0
 80052a6:	220a      	movs	r2, #10
 80052a8:	4628      	mov	r0, r5
 80052aa:	f000 fa39 	bl	8005720 <__multadd>
 80052ae:	f1bb 0f00 	cmp.w	fp, #0
 80052b2:	4606      	mov	r6, r0
 80052b4:	f300 8093 	bgt.w	80053de <_dtoa_r+0x9ae>
 80052b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	dc57      	bgt.n	800536e <_dtoa_r+0x93e>
 80052be:	e08e      	b.n	80053de <_dtoa_r+0x9ae>
 80052c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80052c2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80052c6:	e756      	b.n	8005176 <_dtoa_r+0x746>
 80052c8:	9b02      	ldr	r3, [sp, #8]
 80052ca:	1e5c      	subs	r4, r3, #1
 80052cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052ce:	42a3      	cmp	r3, r4
 80052d0:	bfb7      	itett	lt
 80052d2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80052d4:	1b1c      	subge	r4, r3, r4
 80052d6:	1ae2      	sublt	r2, r4, r3
 80052d8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80052da:	bfbe      	ittt	lt
 80052dc:	940a      	strlt	r4, [sp, #40]	; 0x28
 80052de:	189b      	addlt	r3, r3, r2
 80052e0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80052e2:	9b02      	ldr	r3, [sp, #8]
 80052e4:	bfb8      	it	lt
 80052e6:	2400      	movlt	r4, #0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	bfbb      	ittet	lt
 80052ec:	9b06      	ldrlt	r3, [sp, #24]
 80052ee:	9a02      	ldrlt	r2, [sp, #8]
 80052f0:	9f06      	ldrge	r7, [sp, #24]
 80052f2:	1a9f      	sublt	r7, r3, r2
 80052f4:	bfac      	ite	ge
 80052f6:	9b02      	ldrge	r3, [sp, #8]
 80052f8:	2300      	movlt	r3, #0
 80052fa:	e73e      	b.n	800517a <_dtoa_r+0x74a>
 80052fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80052fe:	9f06      	ldr	r7, [sp, #24]
 8005300:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005302:	e745      	b.n	8005190 <_dtoa_r+0x760>
 8005304:	3fe00000 	.word	0x3fe00000
 8005308:	40240000 	.word	0x40240000
 800530c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800530e:	e76a      	b.n	80051e6 <_dtoa_r+0x7b6>
 8005310:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005312:	2b01      	cmp	r3, #1
 8005314:	dc19      	bgt.n	800534a <_dtoa_r+0x91a>
 8005316:	9b04      	ldr	r3, [sp, #16]
 8005318:	b9bb      	cbnz	r3, 800534a <_dtoa_r+0x91a>
 800531a:	9b05      	ldr	r3, [sp, #20]
 800531c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005320:	b99b      	cbnz	r3, 800534a <_dtoa_r+0x91a>
 8005322:	9b05      	ldr	r3, [sp, #20]
 8005324:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005328:	0d1b      	lsrs	r3, r3, #20
 800532a:	051b      	lsls	r3, r3, #20
 800532c:	b183      	cbz	r3, 8005350 <_dtoa_r+0x920>
 800532e:	f04f 0801 	mov.w	r8, #1
 8005332:	9b06      	ldr	r3, [sp, #24]
 8005334:	3301      	adds	r3, #1
 8005336:	9306      	str	r3, [sp, #24]
 8005338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800533a:	3301      	adds	r3, #1
 800533c:	9309      	str	r3, [sp, #36]	; 0x24
 800533e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005340:	2b00      	cmp	r3, #0
 8005342:	f47f af6a 	bne.w	800521a <_dtoa_r+0x7ea>
 8005346:	2001      	movs	r0, #1
 8005348:	e76f      	b.n	800522a <_dtoa_r+0x7fa>
 800534a:	f04f 0800 	mov.w	r8, #0
 800534e:	e7f6      	b.n	800533e <_dtoa_r+0x90e>
 8005350:	4698      	mov	r8, r3
 8005352:	e7f4      	b.n	800533e <_dtoa_r+0x90e>
 8005354:	f43f af7d 	beq.w	8005252 <_dtoa_r+0x822>
 8005358:	4618      	mov	r0, r3
 800535a:	301c      	adds	r0, #28
 800535c:	e772      	b.n	8005244 <_dtoa_r+0x814>
 800535e:	9b02      	ldr	r3, [sp, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	dc36      	bgt.n	80053d2 <_dtoa_r+0x9a2>
 8005364:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005366:	2b02      	cmp	r3, #2
 8005368:	dd33      	ble.n	80053d2 <_dtoa_r+0x9a2>
 800536a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800536e:	f1bb 0f00 	cmp.w	fp, #0
 8005372:	d10d      	bne.n	8005390 <_dtoa_r+0x960>
 8005374:	4621      	mov	r1, r4
 8005376:	465b      	mov	r3, fp
 8005378:	2205      	movs	r2, #5
 800537a:	4628      	mov	r0, r5
 800537c:	f000 f9d0 	bl	8005720 <__multadd>
 8005380:	4601      	mov	r1, r0
 8005382:	4604      	mov	r4, r0
 8005384:	4650      	mov	r0, sl
 8005386:	f000 fbe3 	bl	8005b50 <__mcmp>
 800538a:	2800      	cmp	r0, #0
 800538c:	f73f adb6 	bgt.w	8004efc <_dtoa_r+0x4cc>
 8005390:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005392:	9f08      	ldr	r7, [sp, #32]
 8005394:	ea6f 0903 	mvn.w	r9, r3
 8005398:	f04f 0800 	mov.w	r8, #0
 800539c:	4621      	mov	r1, r4
 800539e:	4628      	mov	r0, r5
 80053a0:	f000 f99c 	bl	80056dc <_Bfree>
 80053a4:	2e00      	cmp	r6, #0
 80053a6:	f43f aea4 	beq.w	80050f2 <_dtoa_r+0x6c2>
 80053aa:	f1b8 0f00 	cmp.w	r8, #0
 80053ae:	d005      	beq.n	80053bc <_dtoa_r+0x98c>
 80053b0:	45b0      	cmp	r8, r6
 80053b2:	d003      	beq.n	80053bc <_dtoa_r+0x98c>
 80053b4:	4641      	mov	r1, r8
 80053b6:	4628      	mov	r0, r5
 80053b8:	f000 f990 	bl	80056dc <_Bfree>
 80053bc:	4631      	mov	r1, r6
 80053be:	4628      	mov	r0, r5
 80053c0:	f000 f98c 	bl	80056dc <_Bfree>
 80053c4:	e695      	b.n	80050f2 <_dtoa_r+0x6c2>
 80053c6:	2400      	movs	r4, #0
 80053c8:	4626      	mov	r6, r4
 80053ca:	e7e1      	b.n	8005390 <_dtoa_r+0x960>
 80053cc:	46c1      	mov	r9, r8
 80053ce:	4626      	mov	r6, r4
 80053d0:	e594      	b.n	8004efc <_dtoa_r+0x4cc>
 80053d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053d4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 80fc 	beq.w	80055d6 <_dtoa_r+0xba6>
 80053de:	2f00      	cmp	r7, #0
 80053e0:	dd05      	ble.n	80053ee <_dtoa_r+0x9be>
 80053e2:	4631      	mov	r1, r6
 80053e4:	463a      	mov	r2, r7
 80053e6:	4628      	mov	r0, r5
 80053e8:	f000 fb46 	bl	8005a78 <__lshift>
 80053ec:	4606      	mov	r6, r0
 80053ee:	f1b8 0f00 	cmp.w	r8, #0
 80053f2:	d05c      	beq.n	80054ae <_dtoa_r+0xa7e>
 80053f4:	4628      	mov	r0, r5
 80053f6:	6871      	ldr	r1, [r6, #4]
 80053f8:	f000 f930 	bl	800565c <_Balloc>
 80053fc:	4607      	mov	r7, r0
 80053fe:	b928      	cbnz	r0, 800540c <_dtoa_r+0x9dc>
 8005400:	4602      	mov	r2, r0
 8005402:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005406:	4b7e      	ldr	r3, [pc, #504]	; (8005600 <_dtoa_r+0xbd0>)
 8005408:	f7ff bb26 	b.w	8004a58 <_dtoa_r+0x28>
 800540c:	6932      	ldr	r2, [r6, #16]
 800540e:	f106 010c 	add.w	r1, r6, #12
 8005412:	3202      	adds	r2, #2
 8005414:	0092      	lsls	r2, r2, #2
 8005416:	300c      	adds	r0, #12
 8005418:	f000 f912 	bl	8005640 <memcpy>
 800541c:	2201      	movs	r2, #1
 800541e:	4639      	mov	r1, r7
 8005420:	4628      	mov	r0, r5
 8005422:	f000 fb29 	bl	8005a78 <__lshift>
 8005426:	46b0      	mov	r8, r6
 8005428:	4606      	mov	r6, r0
 800542a:	9b08      	ldr	r3, [sp, #32]
 800542c:	3301      	adds	r3, #1
 800542e:	9302      	str	r3, [sp, #8]
 8005430:	9b08      	ldr	r3, [sp, #32]
 8005432:	445b      	add	r3, fp
 8005434:	930a      	str	r3, [sp, #40]	; 0x28
 8005436:	9b04      	ldr	r3, [sp, #16]
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	9309      	str	r3, [sp, #36]	; 0x24
 800543e:	9b02      	ldr	r3, [sp, #8]
 8005440:	4621      	mov	r1, r4
 8005442:	4650      	mov	r0, sl
 8005444:	f103 3bff 	add.w	fp, r3, #4294967295
 8005448:	f7ff fa64 	bl	8004914 <quorem>
 800544c:	4603      	mov	r3, r0
 800544e:	4641      	mov	r1, r8
 8005450:	3330      	adds	r3, #48	; 0x30
 8005452:	9004      	str	r0, [sp, #16]
 8005454:	4650      	mov	r0, sl
 8005456:	930b      	str	r3, [sp, #44]	; 0x2c
 8005458:	f000 fb7a 	bl	8005b50 <__mcmp>
 800545c:	4632      	mov	r2, r6
 800545e:	9006      	str	r0, [sp, #24]
 8005460:	4621      	mov	r1, r4
 8005462:	4628      	mov	r0, r5
 8005464:	f000 fb90 	bl	8005b88 <__mdiff>
 8005468:	68c2      	ldr	r2, [r0, #12]
 800546a:	4607      	mov	r7, r0
 800546c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800546e:	bb02      	cbnz	r2, 80054b2 <_dtoa_r+0xa82>
 8005470:	4601      	mov	r1, r0
 8005472:	4650      	mov	r0, sl
 8005474:	f000 fb6c 	bl	8005b50 <__mcmp>
 8005478:	4602      	mov	r2, r0
 800547a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800547c:	4639      	mov	r1, r7
 800547e:	4628      	mov	r0, r5
 8005480:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005484:	f000 f92a 	bl	80056dc <_Bfree>
 8005488:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800548a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800548c:	9f02      	ldr	r7, [sp, #8]
 800548e:	ea43 0102 	orr.w	r1, r3, r2
 8005492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005494:	430b      	orrs	r3, r1
 8005496:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005498:	d10d      	bne.n	80054b6 <_dtoa_r+0xa86>
 800549a:	2b39      	cmp	r3, #57	; 0x39
 800549c:	d027      	beq.n	80054ee <_dtoa_r+0xabe>
 800549e:	9a06      	ldr	r2, [sp, #24]
 80054a0:	2a00      	cmp	r2, #0
 80054a2:	dd01      	ble.n	80054a8 <_dtoa_r+0xa78>
 80054a4:	9b04      	ldr	r3, [sp, #16]
 80054a6:	3331      	adds	r3, #49	; 0x31
 80054a8:	f88b 3000 	strb.w	r3, [fp]
 80054ac:	e776      	b.n	800539c <_dtoa_r+0x96c>
 80054ae:	4630      	mov	r0, r6
 80054b0:	e7b9      	b.n	8005426 <_dtoa_r+0x9f6>
 80054b2:	2201      	movs	r2, #1
 80054b4:	e7e2      	b.n	800547c <_dtoa_r+0xa4c>
 80054b6:	9906      	ldr	r1, [sp, #24]
 80054b8:	2900      	cmp	r1, #0
 80054ba:	db04      	blt.n	80054c6 <_dtoa_r+0xa96>
 80054bc:	9822      	ldr	r0, [sp, #136]	; 0x88
 80054be:	4301      	orrs	r1, r0
 80054c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054c2:	4301      	orrs	r1, r0
 80054c4:	d120      	bne.n	8005508 <_dtoa_r+0xad8>
 80054c6:	2a00      	cmp	r2, #0
 80054c8:	ddee      	ble.n	80054a8 <_dtoa_r+0xa78>
 80054ca:	4651      	mov	r1, sl
 80054cc:	2201      	movs	r2, #1
 80054ce:	4628      	mov	r0, r5
 80054d0:	9302      	str	r3, [sp, #8]
 80054d2:	f000 fad1 	bl	8005a78 <__lshift>
 80054d6:	4621      	mov	r1, r4
 80054d8:	4682      	mov	sl, r0
 80054da:	f000 fb39 	bl	8005b50 <__mcmp>
 80054de:	2800      	cmp	r0, #0
 80054e0:	9b02      	ldr	r3, [sp, #8]
 80054e2:	dc02      	bgt.n	80054ea <_dtoa_r+0xaba>
 80054e4:	d1e0      	bne.n	80054a8 <_dtoa_r+0xa78>
 80054e6:	07da      	lsls	r2, r3, #31
 80054e8:	d5de      	bpl.n	80054a8 <_dtoa_r+0xa78>
 80054ea:	2b39      	cmp	r3, #57	; 0x39
 80054ec:	d1da      	bne.n	80054a4 <_dtoa_r+0xa74>
 80054ee:	2339      	movs	r3, #57	; 0x39
 80054f0:	f88b 3000 	strb.w	r3, [fp]
 80054f4:	463b      	mov	r3, r7
 80054f6:	461f      	mov	r7, r3
 80054f8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80054fc:	3b01      	subs	r3, #1
 80054fe:	2a39      	cmp	r2, #57	; 0x39
 8005500:	d050      	beq.n	80055a4 <_dtoa_r+0xb74>
 8005502:	3201      	adds	r2, #1
 8005504:	701a      	strb	r2, [r3, #0]
 8005506:	e749      	b.n	800539c <_dtoa_r+0x96c>
 8005508:	2a00      	cmp	r2, #0
 800550a:	dd03      	ble.n	8005514 <_dtoa_r+0xae4>
 800550c:	2b39      	cmp	r3, #57	; 0x39
 800550e:	d0ee      	beq.n	80054ee <_dtoa_r+0xabe>
 8005510:	3301      	adds	r3, #1
 8005512:	e7c9      	b.n	80054a8 <_dtoa_r+0xa78>
 8005514:	9a02      	ldr	r2, [sp, #8]
 8005516:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005518:	f802 3c01 	strb.w	r3, [r2, #-1]
 800551c:	428a      	cmp	r2, r1
 800551e:	d02a      	beq.n	8005576 <_dtoa_r+0xb46>
 8005520:	4651      	mov	r1, sl
 8005522:	2300      	movs	r3, #0
 8005524:	220a      	movs	r2, #10
 8005526:	4628      	mov	r0, r5
 8005528:	f000 f8fa 	bl	8005720 <__multadd>
 800552c:	45b0      	cmp	r8, r6
 800552e:	4682      	mov	sl, r0
 8005530:	f04f 0300 	mov.w	r3, #0
 8005534:	f04f 020a 	mov.w	r2, #10
 8005538:	4641      	mov	r1, r8
 800553a:	4628      	mov	r0, r5
 800553c:	d107      	bne.n	800554e <_dtoa_r+0xb1e>
 800553e:	f000 f8ef 	bl	8005720 <__multadd>
 8005542:	4680      	mov	r8, r0
 8005544:	4606      	mov	r6, r0
 8005546:	9b02      	ldr	r3, [sp, #8]
 8005548:	3301      	adds	r3, #1
 800554a:	9302      	str	r3, [sp, #8]
 800554c:	e777      	b.n	800543e <_dtoa_r+0xa0e>
 800554e:	f000 f8e7 	bl	8005720 <__multadd>
 8005552:	4631      	mov	r1, r6
 8005554:	4680      	mov	r8, r0
 8005556:	2300      	movs	r3, #0
 8005558:	220a      	movs	r2, #10
 800555a:	4628      	mov	r0, r5
 800555c:	f000 f8e0 	bl	8005720 <__multadd>
 8005560:	4606      	mov	r6, r0
 8005562:	e7f0      	b.n	8005546 <_dtoa_r+0xb16>
 8005564:	f1bb 0f00 	cmp.w	fp, #0
 8005568:	bfcc      	ite	gt
 800556a:	465f      	movgt	r7, fp
 800556c:	2701      	movle	r7, #1
 800556e:	f04f 0800 	mov.w	r8, #0
 8005572:	9a08      	ldr	r2, [sp, #32]
 8005574:	4417      	add	r7, r2
 8005576:	4651      	mov	r1, sl
 8005578:	2201      	movs	r2, #1
 800557a:	4628      	mov	r0, r5
 800557c:	9302      	str	r3, [sp, #8]
 800557e:	f000 fa7b 	bl	8005a78 <__lshift>
 8005582:	4621      	mov	r1, r4
 8005584:	4682      	mov	sl, r0
 8005586:	f000 fae3 	bl	8005b50 <__mcmp>
 800558a:	2800      	cmp	r0, #0
 800558c:	dcb2      	bgt.n	80054f4 <_dtoa_r+0xac4>
 800558e:	d102      	bne.n	8005596 <_dtoa_r+0xb66>
 8005590:	9b02      	ldr	r3, [sp, #8]
 8005592:	07db      	lsls	r3, r3, #31
 8005594:	d4ae      	bmi.n	80054f4 <_dtoa_r+0xac4>
 8005596:	463b      	mov	r3, r7
 8005598:	461f      	mov	r7, r3
 800559a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800559e:	2a30      	cmp	r2, #48	; 0x30
 80055a0:	d0fa      	beq.n	8005598 <_dtoa_r+0xb68>
 80055a2:	e6fb      	b.n	800539c <_dtoa_r+0x96c>
 80055a4:	9a08      	ldr	r2, [sp, #32]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d1a5      	bne.n	80054f6 <_dtoa_r+0xac6>
 80055aa:	2331      	movs	r3, #49	; 0x31
 80055ac:	f109 0901 	add.w	r9, r9, #1
 80055b0:	7013      	strb	r3, [r2, #0]
 80055b2:	e6f3      	b.n	800539c <_dtoa_r+0x96c>
 80055b4:	4b13      	ldr	r3, [pc, #76]	; (8005604 <_dtoa_r+0xbd4>)
 80055b6:	f7ff baa7 	b.w	8004b08 <_dtoa_r+0xd8>
 80055ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f47f aa80 	bne.w	8004ac2 <_dtoa_r+0x92>
 80055c2:	4b11      	ldr	r3, [pc, #68]	; (8005608 <_dtoa_r+0xbd8>)
 80055c4:	f7ff baa0 	b.w	8004b08 <_dtoa_r+0xd8>
 80055c8:	f1bb 0f00 	cmp.w	fp, #0
 80055cc:	dc03      	bgt.n	80055d6 <_dtoa_r+0xba6>
 80055ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	f73f aecc 	bgt.w	800536e <_dtoa_r+0x93e>
 80055d6:	9f08      	ldr	r7, [sp, #32]
 80055d8:	4621      	mov	r1, r4
 80055da:	4650      	mov	r0, sl
 80055dc:	f7ff f99a 	bl	8004914 <quorem>
 80055e0:	9a08      	ldr	r2, [sp, #32]
 80055e2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80055e6:	f807 3b01 	strb.w	r3, [r7], #1
 80055ea:	1aba      	subs	r2, r7, r2
 80055ec:	4593      	cmp	fp, r2
 80055ee:	ddb9      	ble.n	8005564 <_dtoa_r+0xb34>
 80055f0:	4651      	mov	r1, sl
 80055f2:	2300      	movs	r3, #0
 80055f4:	220a      	movs	r2, #10
 80055f6:	4628      	mov	r0, r5
 80055f8:	f000 f892 	bl	8005720 <__multadd>
 80055fc:	4682      	mov	sl, r0
 80055fe:	e7eb      	b.n	80055d8 <_dtoa_r+0xba8>
 8005600:	08006f6c 	.word	0x08006f6c
 8005604:	08006dc4 	.word	0x08006dc4
 8005608:	08006ee9 	.word	0x08006ee9

0800560c <_localeconv_r>:
 800560c:	4800      	ldr	r0, [pc, #0]	; (8005610 <_localeconv_r+0x4>)
 800560e:	4770      	bx	lr
 8005610:	20000170 	.word	0x20000170

08005614 <malloc>:
 8005614:	4b02      	ldr	r3, [pc, #8]	; (8005620 <malloc+0xc>)
 8005616:	4601      	mov	r1, r0
 8005618:	6818      	ldr	r0, [r3, #0]
 800561a:	f000 bbfb 	b.w	8005e14 <_malloc_r>
 800561e:	bf00      	nop
 8005620:	2000001c 	.word	0x2000001c

08005624 <memchr>:
 8005624:	4603      	mov	r3, r0
 8005626:	b510      	push	{r4, lr}
 8005628:	b2c9      	uxtb	r1, r1
 800562a:	4402      	add	r2, r0
 800562c:	4293      	cmp	r3, r2
 800562e:	4618      	mov	r0, r3
 8005630:	d101      	bne.n	8005636 <memchr+0x12>
 8005632:	2000      	movs	r0, #0
 8005634:	e003      	b.n	800563e <memchr+0x1a>
 8005636:	7804      	ldrb	r4, [r0, #0]
 8005638:	3301      	adds	r3, #1
 800563a:	428c      	cmp	r4, r1
 800563c:	d1f6      	bne.n	800562c <memchr+0x8>
 800563e:	bd10      	pop	{r4, pc}

08005640 <memcpy>:
 8005640:	440a      	add	r2, r1
 8005642:	4291      	cmp	r1, r2
 8005644:	f100 33ff 	add.w	r3, r0, #4294967295
 8005648:	d100      	bne.n	800564c <memcpy+0xc>
 800564a:	4770      	bx	lr
 800564c:	b510      	push	{r4, lr}
 800564e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005652:	4291      	cmp	r1, r2
 8005654:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005658:	d1f9      	bne.n	800564e <memcpy+0xe>
 800565a:	bd10      	pop	{r4, pc}

0800565c <_Balloc>:
 800565c:	b570      	push	{r4, r5, r6, lr}
 800565e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005660:	4604      	mov	r4, r0
 8005662:	460d      	mov	r5, r1
 8005664:	b976      	cbnz	r6, 8005684 <_Balloc+0x28>
 8005666:	2010      	movs	r0, #16
 8005668:	f7ff ffd4 	bl	8005614 <malloc>
 800566c:	4602      	mov	r2, r0
 800566e:	6260      	str	r0, [r4, #36]	; 0x24
 8005670:	b920      	cbnz	r0, 800567c <_Balloc+0x20>
 8005672:	2166      	movs	r1, #102	; 0x66
 8005674:	4b17      	ldr	r3, [pc, #92]	; (80056d4 <_Balloc+0x78>)
 8005676:	4818      	ldr	r0, [pc, #96]	; (80056d8 <_Balloc+0x7c>)
 8005678:	f000 fd92 	bl	80061a0 <__assert_func>
 800567c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005680:	6006      	str	r6, [r0, #0]
 8005682:	60c6      	str	r6, [r0, #12]
 8005684:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005686:	68f3      	ldr	r3, [r6, #12]
 8005688:	b183      	cbz	r3, 80056ac <_Balloc+0x50>
 800568a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005692:	b9b8      	cbnz	r0, 80056c4 <_Balloc+0x68>
 8005694:	2101      	movs	r1, #1
 8005696:	fa01 f605 	lsl.w	r6, r1, r5
 800569a:	1d72      	adds	r2, r6, #5
 800569c:	4620      	mov	r0, r4
 800569e:	0092      	lsls	r2, r2, #2
 80056a0:	f000 fb5e 	bl	8005d60 <_calloc_r>
 80056a4:	b160      	cbz	r0, 80056c0 <_Balloc+0x64>
 80056a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80056aa:	e00e      	b.n	80056ca <_Balloc+0x6e>
 80056ac:	2221      	movs	r2, #33	; 0x21
 80056ae:	2104      	movs	r1, #4
 80056b0:	4620      	mov	r0, r4
 80056b2:	f000 fb55 	bl	8005d60 <_calloc_r>
 80056b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056b8:	60f0      	str	r0, [r6, #12]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1e4      	bne.n	800568a <_Balloc+0x2e>
 80056c0:	2000      	movs	r0, #0
 80056c2:	bd70      	pop	{r4, r5, r6, pc}
 80056c4:	6802      	ldr	r2, [r0, #0]
 80056c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80056ca:	2300      	movs	r3, #0
 80056cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80056d0:	e7f7      	b.n	80056c2 <_Balloc+0x66>
 80056d2:	bf00      	nop
 80056d4:	08006ef6 	.word	0x08006ef6
 80056d8:	08006f7d 	.word	0x08006f7d

080056dc <_Bfree>:
 80056dc:	b570      	push	{r4, r5, r6, lr}
 80056de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80056e0:	4605      	mov	r5, r0
 80056e2:	460c      	mov	r4, r1
 80056e4:	b976      	cbnz	r6, 8005704 <_Bfree+0x28>
 80056e6:	2010      	movs	r0, #16
 80056e8:	f7ff ff94 	bl	8005614 <malloc>
 80056ec:	4602      	mov	r2, r0
 80056ee:	6268      	str	r0, [r5, #36]	; 0x24
 80056f0:	b920      	cbnz	r0, 80056fc <_Bfree+0x20>
 80056f2:	218a      	movs	r1, #138	; 0x8a
 80056f4:	4b08      	ldr	r3, [pc, #32]	; (8005718 <_Bfree+0x3c>)
 80056f6:	4809      	ldr	r0, [pc, #36]	; (800571c <_Bfree+0x40>)
 80056f8:	f000 fd52 	bl	80061a0 <__assert_func>
 80056fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005700:	6006      	str	r6, [r0, #0]
 8005702:	60c6      	str	r6, [r0, #12]
 8005704:	b13c      	cbz	r4, 8005716 <_Bfree+0x3a>
 8005706:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005708:	6862      	ldr	r2, [r4, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005710:	6021      	str	r1, [r4, #0]
 8005712:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005716:	bd70      	pop	{r4, r5, r6, pc}
 8005718:	08006ef6 	.word	0x08006ef6
 800571c:	08006f7d 	.word	0x08006f7d

08005720 <__multadd>:
 8005720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005724:	4698      	mov	r8, r3
 8005726:	460c      	mov	r4, r1
 8005728:	2300      	movs	r3, #0
 800572a:	690e      	ldr	r6, [r1, #16]
 800572c:	4607      	mov	r7, r0
 800572e:	f101 0014 	add.w	r0, r1, #20
 8005732:	6805      	ldr	r5, [r0, #0]
 8005734:	3301      	adds	r3, #1
 8005736:	b2a9      	uxth	r1, r5
 8005738:	fb02 8101 	mla	r1, r2, r1, r8
 800573c:	0c2d      	lsrs	r5, r5, #16
 800573e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005742:	fb02 c505 	mla	r5, r2, r5, ip
 8005746:	b289      	uxth	r1, r1
 8005748:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800574c:	429e      	cmp	r6, r3
 800574e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005752:	f840 1b04 	str.w	r1, [r0], #4
 8005756:	dcec      	bgt.n	8005732 <__multadd+0x12>
 8005758:	f1b8 0f00 	cmp.w	r8, #0
 800575c:	d022      	beq.n	80057a4 <__multadd+0x84>
 800575e:	68a3      	ldr	r3, [r4, #8]
 8005760:	42b3      	cmp	r3, r6
 8005762:	dc19      	bgt.n	8005798 <__multadd+0x78>
 8005764:	6861      	ldr	r1, [r4, #4]
 8005766:	4638      	mov	r0, r7
 8005768:	3101      	adds	r1, #1
 800576a:	f7ff ff77 	bl	800565c <_Balloc>
 800576e:	4605      	mov	r5, r0
 8005770:	b928      	cbnz	r0, 800577e <__multadd+0x5e>
 8005772:	4602      	mov	r2, r0
 8005774:	21b5      	movs	r1, #181	; 0xb5
 8005776:	4b0d      	ldr	r3, [pc, #52]	; (80057ac <__multadd+0x8c>)
 8005778:	480d      	ldr	r0, [pc, #52]	; (80057b0 <__multadd+0x90>)
 800577a:	f000 fd11 	bl	80061a0 <__assert_func>
 800577e:	6922      	ldr	r2, [r4, #16]
 8005780:	f104 010c 	add.w	r1, r4, #12
 8005784:	3202      	adds	r2, #2
 8005786:	0092      	lsls	r2, r2, #2
 8005788:	300c      	adds	r0, #12
 800578a:	f7ff ff59 	bl	8005640 <memcpy>
 800578e:	4621      	mov	r1, r4
 8005790:	4638      	mov	r0, r7
 8005792:	f7ff ffa3 	bl	80056dc <_Bfree>
 8005796:	462c      	mov	r4, r5
 8005798:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800579c:	3601      	adds	r6, #1
 800579e:	f8c3 8014 	str.w	r8, [r3, #20]
 80057a2:	6126      	str	r6, [r4, #16]
 80057a4:	4620      	mov	r0, r4
 80057a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057aa:	bf00      	nop
 80057ac:	08006f6c 	.word	0x08006f6c
 80057b0:	08006f7d 	.word	0x08006f7d

080057b4 <__hi0bits>:
 80057b4:	0c02      	lsrs	r2, r0, #16
 80057b6:	0412      	lsls	r2, r2, #16
 80057b8:	4603      	mov	r3, r0
 80057ba:	b9ca      	cbnz	r2, 80057f0 <__hi0bits+0x3c>
 80057bc:	0403      	lsls	r3, r0, #16
 80057be:	2010      	movs	r0, #16
 80057c0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80057c4:	bf04      	itt	eq
 80057c6:	021b      	lsleq	r3, r3, #8
 80057c8:	3008      	addeq	r0, #8
 80057ca:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80057ce:	bf04      	itt	eq
 80057d0:	011b      	lsleq	r3, r3, #4
 80057d2:	3004      	addeq	r0, #4
 80057d4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80057d8:	bf04      	itt	eq
 80057da:	009b      	lsleq	r3, r3, #2
 80057dc:	3002      	addeq	r0, #2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	db05      	blt.n	80057ee <__hi0bits+0x3a>
 80057e2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80057e6:	f100 0001 	add.w	r0, r0, #1
 80057ea:	bf08      	it	eq
 80057ec:	2020      	moveq	r0, #32
 80057ee:	4770      	bx	lr
 80057f0:	2000      	movs	r0, #0
 80057f2:	e7e5      	b.n	80057c0 <__hi0bits+0xc>

080057f4 <__lo0bits>:
 80057f4:	6803      	ldr	r3, [r0, #0]
 80057f6:	4602      	mov	r2, r0
 80057f8:	f013 0007 	ands.w	r0, r3, #7
 80057fc:	d00b      	beq.n	8005816 <__lo0bits+0x22>
 80057fe:	07d9      	lsls	r1, r3, #31
 8005800:	d422      	bmi.n	8005848 <__lo0bits+0x54>
 8005802:	0798      	lsls	r0, r3, #30
 8005804:	bf49      	itett	mi
 8005806:	085b      	lsrmi	r3, r3, #1
 8005808:	089b      	lsrpl	r3, r3, #2
 800580a:	2001      	movmi	r0, #1
 800580c:	6013      	strmi	r3, [r2, #0]
 800580e:	bf5c      	itt	pl
 8005810:	2002      	movpl	r0, #2
 8005812:	6013      	strpl	r3, [r2, #0]
 8005814:	4770      	bx	lr
 8005816:	b299      	uxth	r1, r3
 8005818:	b909      	cbnz	r1, 800581e <__lo0bits+0x2a>
 800581a:	2010      	movs	r0, #16
 800581c:	0c1b      	lsrs	r3, r3, #16
 800581e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005822:	bf04      	itt	eq
 8005824:	0a1b      	lsreq	r3, r3, #8
 8005826:	3008      	addeq	r0, #8
 8005828:	0719      	lsls	r1, r3, #28
 800582a:	bf04      	itt	eq
 800582c:	091b      	lsreq	r3, r3, #4
 800582e:	3004      	addeq	r0, #4
 8005830:	0799      	lsls	r1, r3, #30
 8005832:	bf04      	itt	eq
 8005834:	089b      	lsreq	r3, r3, #2
 8005836:	3002      	addeq	r0, #2
 8005838:	07d9      	lsls	r1, r3, #31
 800583a:	d403      	bmi.n	8005844 <__lo0bits+0x50>
 800583c:	085b      	lsrs	r3, r3, #1
 800583e:	f100 0001 	add.w	r0, r0, #1
 8005842:	d003      	beq.n	800584c <__lo0bits+0x58>
 8005844:	6013      	str	r3, [r2, #0]
 8005846:	4770      	bx	lr
 8005848:	2000      	movs	r0, #0
 800584a:	4770      	bx	lr
 800584c:	2020      	movs	r0, #32
 800584e:	4770      	bx	lr

08005850 <__i2b>:
 8005850:	b510      	push	{r4, lr}
 8005852:	460c      	mov	r4, r1
 8005854:	2101      	movs	r1, #1
 8005856:	f7ff ff01 	bl	800565c <_Balloc>
 800585a:	4602      	mov	r2, r0
 800585c:	b928      	cbnz	r0, 800586a <__i2b+0x1a>
 800585e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005862:	4b04      	ldr	r3, [pc, #16]	; (8005874 <__i2b+0x24>)
 8005864:	4804      	ldr	r0, [pc, #16]	; (8005878 <__i2b+0x28>)
 8005866:	f000 fc9b 	bl	80061a0 <__assert_func>
 800586a:	2301      	movs	r3, #1
 800586c:	6144      	str	r4, [r0, #20]
 800586e:	6103      	str	r3, [r0, #16]
 8005870:	bd10      	pop	{r4, pc}
 8005872:	bf00      	nop
 8005874:	08006f6c 	.word	0x08006f6c
 8005878:	08006f7d 	.word	0x08006f7d

0800587c <__multiply>:
 800587c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005880:	4614      	mov	r4, r2
 8005882:	690a      	ldr	r2, [r1, #16]
 8005884:	6923      	ldr	r3, [r4, #16]
 8005886:	460d      	mov	r5, r1
 8005888:	429a      	cmp	r2, r3
 800588a:	bfbe      	ittt	lt
 800588c:	460b      	movlt	r3, r1
 800588e:	4625      	movlt	r5, r4
 8005890:	461c      	movlt	r4, r3
 8005892:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005896:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800589a:	68ab      	ldr	r3, [r5, #8]
 800589c:	6869      	ldr	r1, [r5, #4]
 800589e:	eb0a 0709 	add.w	r7, sl, r9
 80058a2:	42bb      	cmp	r3, r7
 80058a4:	b085      	sub	sp, #20
 80058a6:	bfb8      	it	lt
 80058a8:	3101      	addlt	r1, #1
 80058aa:	f7ff fed7 	bl	800565c <_Balloc>
 80058ae:	b930      	cbnz	r0, 80058be <__multiply+0x42>
 80058b0:	4602      	mov	r2, r0
 80058b2:	f240 115d 	movw	r1, #349	; 0x15d
 80058b6:	4b41      	ldr	r3, [pc, #260]	; (80059bc <__multiply+0x140>)
 80058b8:	4841      	ldr	r0, [pc, #260]	; (80059c0 <__multiply+0x144>)
 80058ba:	f000 fc71 	bl	80061a0 <__assert_func>
 80058be:	f100 0614 	add.w	r6, r0, #20
 80058c2:	4633      	mov	r3, r6
 80058c4:	2200      	movs	r2, #0
 80058c6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80058ca:	4543      	cmp	r3, r8
 80058cc:	d31e      	bcc.n	800590c <__multiply+0x90>
 80058ce:	f105 0c14 	add.w	ip, r5, #20
 80058d2:	f104 0314 	add.w	r3, r4, #20
 80058d6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80058da:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80058de:	9202      	str	r2, [sp, #8]
 80058e0:	ebac 0205 	sub.w	r2, ip, r5
 80058e4:	3a15      	subs	r2, #21
 80058e6:	f022 0203 	bic.w	r2, r2, #3
 80058ea:	3204      	adds	r2, #4
 80058ec:	f105 0115 	add.w	r1, r5, #21
 80058f0:	458c      	cmp	ip, r1
 80058f2:	bf38      	it	cc
 80058f4:	2204      	movcc	r2, #4
 80058f6:	9201      	str	r2, [sp, #4]
 80058f8:	9a02      	ldr	r2, [sp, #8]
 80058fa:	9303      	str	r3, [sp, #12]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d808      	bhi.n	8005912 <__multiply+0x96>
 8005900:	2f00      	cmp	r7, #0
 8005902:	dc55      	bgt.n	80059b0 <__multiply+0x134>
 8005904:	6107      	str	r7, [r0, #16]
 8005906:	b005      	add	sp, #20
 8005908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800590c:	f843 2b04 	str.w	r2, [r3], #4
 8005910:	e7db      	b.n	80058ca <__multiply+0x4e>
 8005912:	f8b3 a000 	ldrh.w	sl, [r3]
 8005916:	f1ba 0f00 	cmp.w	sl, #0
 800591a:	d020      	beq.n	800595e <__multiply+0xe2>
 800591c:	46b1      	mov	r9, r6
 800591e:	2200      	movs	r2, #0
 8005920:	f105 0e14 	add.w	lr, r5, #20
 8005924:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005928:	f8d9 b000 	ldr.w	fp, [r9]
 800592c:	b2a1      	uxth	r1, r4
 800592e:	fa1f fb8b 	uxth.w	fp, fp
 8005932:	fb0a b101 	mla	r1, sl, r1, fp
 8005936:	4411      	add	r1, r2
 8005938:	f8d9 2000 	ldr.w	r2, [r9]
 800593c:	0c24      	lsrs	r4, r4, #16
 800593e:	0c12      	lsrs	r2, r2, #16
 8005940:	fb0a 2404 	mla	r4, sl, r4, r2
 8005944:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005948:	b289      	uxth	r1, r1
 800594a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800594e:	45f4      	cmp	ip, lr
 8005950:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005954:	f849 1b04 	str.w	r1, [r9], #4
 8005958:	d8e4      	bhi.n	8005924 <__multiply+0xa8>
 800595a:	9901      	ldr	r1, [sp, #4]
 800595c:	5072      	str	r2, [r6, r1]
 800595e:	9a03      	ldr	r2, [sp, #12]
 8005960:	3304      	adds	r3, #4
 8005962:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005966:	f1b9 0f00 	cmp.w	r9, #0
 800596a:	d01f      	beq.n	80059ac <__multiply+0x130>
 800596c:	46b6      	mov	lr, r6
 800596e:	f04f 0a00 	mov.w	sl, #0
 8005972:	6834      	ldr	r4, [r6, #0]
 8005974:	f105 0114 	add.w	r1, r5, #20
 8005978:	880a      	ldrh	r2, [r1, #0]
 800597a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800597e:	b2a4      	uxth	r4, r4
 8005980:	fb09 b202 	mla	r2, r9, r2, fp
 8005984:	4492      	add	sl, r2
 8005986:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800598a:	f84e 4b04 	str.w	r4, [lr], #4
 800598e:	f851 4b04 	ldr.w	r4, [r1], #4
 8005992:	f8be 2000 	ldrh.w	r2, [lr]
 8005996:	0c24      	lsrs	r4, r4, #16
 8005998:	fb09 2404 	mla	r4, r9, r4, r2
 800599c:	458c      	cmp	ip, r1
 800599e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80059a2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80059a6:	d8e7      	bhi.n	8005978 <__multiply+0xfc>
 80059a8:	9a01      	ldr	r2, [sp, #4]
 80059aa:	50b4      	str	r4, [r6, r2]
 80059ac:	3604      	adds	r6, #4
 80059ae:	e7a3      	b.n	80058f8 <__multiply+0x7c>
 80059b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1a5      	bne.n	8005904 <__multiply+0x88>
 80059b8:	3f01      	subs	r7, #1
 80059ba:	e7a1      	b.n	8005900 <__multiply+0x84>
 80059bc:	08006f6c 	.word	0x08006f6c
 80059c0:	08006f7d 	.word	0x08006f7d

080059c4 <__pow5mult>:
 80059c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059c8:	4615      	mov	r5, r2
 80059ca:	f012 0203 	ands.w	r2, r2, #3
 80059ce:	4606      	mov	r6, r0
 80059d0:	460f      	mov	r7, r1
 80059d2:	d007      	beq.n	80059e4 <__pow5mult+0x20>
 80059d4:	4c25      	ldr	r4, [pc, #148]	; (8005a6c <__pow5mult+0xa8>)
 80059d6:	3a01      	subs	r2, #1
 80059d8:	2300      	movs	r3, #0
 80059da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80059de:	f7ff fe9f 	bl	8005720 <__multadd>
 80059e2:	4607      	mov	r7, r0
 80059e4:	10ad      	asrs	r5, r5, #2
 80059e6:	d03d      	beq.n	8005a64 <__pow5mult+0xa0>
 80059e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80059ea:	b97c      	cbnz	r4, 8005a0c <__pow5mult+0x48>
 80059ec:	2010      	movs	r0, #16
 80059ee:	f7ff fe11 	bl	8005614 <malloc>
 80059f2:	4602      	mov	r2, r0
 80059f4:	6270      	str	r0, [r6, #36]	; 0x24
 80059f6:	b928      	cbnz	r0, 8005a04 <__pow5mult+0x40>
 80059f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80059fc:	4b1c      	ldr	r3, [pc, #112]	; (8005a70 <__pow5mult+0xac>)
 80059fe:	481d      	ldr	r0, [pc, #116]	; (8005a74 <__pow5mult+0xb0>)
 8005a00:	f000 fbce 	bl	80061a0 <__assert_func>
 8005a04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a08:	6004      	str	r4, [r0, #0]
 8005a0a:	60c4      	str	r4, [r0, #12]
 8005a0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005a10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005a14:	b94c      	cbnz	r4, 8005a2a <__pow5mult+0x66>
 8005a16:	f240 2171 	movw	r1, #625	; 0x271
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	f7ff ff18 	bl	8005850 <__i2b>
 8005a20:	2300      	movs	r3, #0
 8005a22:	4604      	mov	r4, r0
 8005a24:	f8c8 0008 	str.w	r0, [r8, #8]
 8005a28:	6003      	str	r3, [r0, #0]
 8005a2a:	f04f 0900 	mov.w	r9, #0
 8005a2e:	07eb      	lsls	r3, r5, #31
 8005a30:	d50a      	bpl.n	8005a48 <__pow5mult+0x84>
 8005a32:	4639      	mov	r1, r7
 8005a34:	4622      	mov	r2, r4
 8005a36:	4630      	mov	r0, r6
 8005a38:	f7ff ff20 	bl	800587c <__multiply>
 8005a3c:	4680      	mov	r8, r0
 8005a3e:	4639      	mov	r1, r7
 8005a40:	4630      	mov	r0, r6
 8005a42:	f7ff fe4b 	bl	80056dc <_Bfree>
 8005a46:	4647      	mov	r7, r8
 8005a48:	106d      	asrs	r5, r5, #1
 8005a4a:	d00b      	beq.n	8005a64 <__pow5mult+0xa0>
 8005a4c:	6820      	ldr	r0, [r4, #0]
 8005a4e:	b938      	cbnz	r0, 8005a60 <__pow5mult+0x9c>
 8005a50:	4622      	mov	r2, r4
 8005a52:	4621      	mov	r1, r4
 8005a54:	4630      	mov	r0, r6
 8005a56:	f7ff ff11 	bl	800587c <__multiply>
 8005a5a:	6020      	str	r0, [r4, #0]
 8005a5c:	f8c0 9000 	str.w	r9, [r0]
 8005a60:	4604      	mov	r4, r0
 8005a62:	e7e4      	b.n	8005a2e <__pow5mult+0x6a>
 8005a64:	4638      	mov	r0, r7
 8005a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a6a:	bf00      	nop
 8005a6c:	080070d0 	.word	0x080070d0
 8005a70:	08006ef6 	.word	0x08006ef6
 8005a74:	08006f7d 	.word	0x08006f7d

08005a78 <__lshift>:
 8005a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a7c:	460c      	mov	r4, r1
 8005a7e:	4607      	mov	r7, r0
 8005a80:	4691      	mov	r9, r2
 8005a82:	6923      	ldr	r3, [r4, #16]
 8005a84:	6849      	ldr	r1, [r1, #4]
 8005a86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005a8a:	68a3      	ldr	r3, [r4, #8]
 8005a8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005a90:	f108 0601 	add.w	r6, r8, #1
 8005a94:	42b3      	cmp	r3, r6
 8005a96:	db0b      	blt.n	8005ab0 <__lshift+0x38>
 8005a98:	4638      	mov	r0, r7
 8005a9a:	f7ff fddf 	bl	800565c <_Balloc>
 8005a9e:	4605      	mov	r5, r0
 8005aa0:	b948      	cbnz	r0, 8005ab6 <__lshift+0x3e>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005aa8:	4b27      	ldr	r3, [pc, #156]	; (8005b48 <__lshift+0xd0>)
 8005aaa:	4828      	ldr	r0, [pc, #160]	; (8005b4c <__lshift+0xd4>)
 8005aac:	f000 fb78 	bl	80061a0 <__assert_func>
 8005ab0:	3101      	adds	r1, #1
 8005ab2:	005b      	lsls	r3, r3, #1
 8005ab4:	e7ee      	b.n	8005a94 <__lshift+0x1c>
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	f100 0114 	add.w	r1, r0, #20
 8005abc:	f100 0210 	add.w	r2, r0, #16
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	4553      	cmp	r3, sl
 8005ac4:	db33      	blt.n	8005b2e <__lshift+0xb6>
 8005ac6:	6920      	ldr	r0, [r4, #16]
 8005ac8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005acc:	f104 0314 	add.w	r3, r4, #20
 8005ad0:	f019 091f 	ands.w	r9, r9, #31
 8005ad4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005ad8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005adc:	d02b      	beq.n	8005b36 <__lshift+0xbe>
 8005ade:	468a      	mov	sl, r1
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f1c9 0e20 	rsb	lr, r9, #32
 8005ae6:	6818      	ldr	r0, [r3, #0]
 8005ae8:	fa00 f009 	lsl.w	r0, r0, r9
 8005aec:	4302      	orrs	r2, r0
 8005aee:	f84a 2b04 	str.w	r2, [sl], #4
 8005af2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005af6:	459c      	cmp	ip, r3
 8005af8:	fa22 f20e 	lsr.w	r2, r2, lr
 8005afc:	d8f3      	bhi.n	8005ae6 <__lshift+0x6e>
 8005afe:	ebac 0304 	sub.w	r3, ip, r4
 8005b02:	3b15      	subs	r3, #21
 8005b04:	f023 0303 	bic.w	r3, r3, #3
 8005b08:	3304      	adds	r3, #4
 8005b0a:	f104 0015 	add.w	r0, r4, #21
 8005b0e:	4584      	cmp	ip, r0
 8005b10:	bf38      	it	cc
 8005b12:	2304      	movcc	r3, #4
 8005b14:	50ca      	str	r2, [r1, r3]
 8005b16:	b10a      	cbz	r2, 8005b1c <__lshift+0xa4>
 8005b18:	f108 0602 	add.w	r6, r8, #2
 8005b1c:	3e01      	subs	r6, #1
 8005b1e:	4638      	mov	r0, r7
 8005b20:	4621      	mov	r1, r4
 8005b22:	612e      	str	r6, [r5, #16]
 8005b24:	f7ff fdda 	bl	80056dc <_Bfree>
 8005b28:	4628      	mov	r0, r5
 8005b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005b32:	3301      	adds	r3, #1
 8005b34:	e7c5      	b.n	8005ac2 <__lshift+0x4a>
 8005b36:	3904      	subs	r1, #4
 8005b38:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b3c:	459c      	cmp	ip, r3
 8005b3e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005b42:	d8f9      	bhi.n	8005b38 <__lshift+0xc0>
 8005b44:	e7ea      	b.n	8005b1c <__lshift+0xa4>
 8005b46:	bf00      	nop
 8005b48:	08006f6c 	.word	0x08006f6c
 8005b4c:	08006f7d 	.word	0x08006f7d

08005b50 <__mcmp>:
 8005b50:	4603      	mov	r3, r0
 8005b52:	690a      	ldr	r2, [r1, #16]
 8005b54:	6900      	ldr	r0, [r0, #16]
 8005b56:	b530      	push	{r4, r5, lr}
 8005b58:	1a80      	subs	r0, r0, r2
 8005b5a:	d10d      	bne.n	8005b78 <__mcmp+0x28>
 8005b5c:	3314      	adds	r3, #20
 8005b5e:	3114      	adds	r1, #20
 8005b60:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005b64:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005b68:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005b6c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005b70:	4295      	cmp	r5, r2
 8005b72:	d002      	beq.n	8005b7a <__mcmp+0x2a>
 8005b74:	d304      	bcc.n	8005b80 <__mcmp+0x30>
 8005b76:	2001      	movs	r0, #1
 8005b78:	bd30      	pop	{r4, r5, pc}
 8005b7a:	42a3      	cmp	r3, r4
 8005b7c:	d3f4      	bcc.n	8005b68 <__mcmp+0x18>
 8005b7e:	e7fb      	b.n	8005b78 <__mcmp+0x28>
 8005b80:	f04f 30ff 	mov.w	r0, #4294967295
 8005b84:	e7f8      	b.n	8005b78 <__mcmp+0x28>
	...

08005b88 <__mdiff>:
 8005b88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b8c:	460c      	mov	r4, r1
 8005b8e:	4606      	mov	r6, r0
 8005b90:	4611      	mov	r1, r2
 8005b92:	4620      	mov	r0, r4
 8005b94:	4692      	mov	sl, r2
 8005b96:	f7ff ffdb 	bl	8005b50 <__mcmp>
 8005b9a:	1e05      	subs	r5, r0, #0
 8005b9c:	d111      	bne.n	8005bc2 <__mdiff+0x3a>
 8005b9e:	4629      	mov	r1, r5
 8005ba0:	4630      	mov	r0, r6
 8005ba2:	f7ff fd5b 	bl	800565c <_Balloc>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	b928      	cbnz	r0, 8005bb6 <__mdiff+0x2e>
 8005baa:	f240 2132 	movw	r1, #562	; 0x232
 8005bae:	4b3c      	ldr	r3, [pc, #240]	; (8005ca0 <__mdiff+0x118>)
 8005bb0:	483c      	ldr	r0, [pc, #240]	; (8005ca4 <__mdiff+0x11c>)
 8005bb2:	f000 faf5 	bl	80061a0 <__assert_func>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005bbc:	4610      	mov	r0, r2
 8005bbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc2:	bfa4      	itt	ge
 8005bc4:	4653      	movge	r3, sl
 8005bc6:	46a2      	movge	sl, r4
 8005bc8:	4630      	mov	r0, r6
 8005bca:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005bce:	bfa6      	itte	ge
 8005bd0:	461c      	movge	r4, r3
 8005bd2:	2500      	movge	r5, #0
 8005bd4:	2501      	movlt	r5, #1
 8005bd6:	f7ff fd41 	bl	800565c <_Balloc>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	b918      	cbnz	r0, 8005be6 <__mdiff+0x5e>
 8005bde:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005be2:	4b2f      	ldr	r3, [pc, #188]	; (8005ca0 <__mdiff+0x118>)
 8005be4:	e7e4      	b.n	8005bb0 <__mdiff+0x28>
 8005be6:	f100 0814 	add.w	r8, r0, #20
 8005bea:	f8da 7010 	ldr.w	r7, [sl, #16]
 8005bee:	60c5      	str	r5, [r0, #12]
 8005bf0:	f04f 0c00 	mov.w	ip, #0
 8005bf4:	f10a 0514 	add.w	r5, sl, #20
 8005bf8:	f10a 0010 	add.w	r0, sl, #16
 8005bfc:	46c2      	mov	sl, r8
 8005bfe:	6926      	ldr	r6, [r4, #16]
 8005c00:	f104 0914 	add.w	r9, r4, #20
 8005c04:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8005c08:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005c0c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8005c10:	f859 3b04 	ldr.w	r3, [r9], #4
 8005c14:	fa1f f18b 	uxth.w	r1, fp
 8005c18:	4461      	add	r1, ip
 8005c1a:	fa1f fc83 	uxth.w	ip, r3
 8005c1e:	0c1b      	lsrs	r3, r3, #16
 8005c20:	eba1 010c 	sub.w	r1, r1, ip
 8005c24:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005c28:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005c2c:	b289      	uxth	r1, r1
 8005c2e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005c32:	454e      	cmp	r6, r9
 8005c34:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005c38:	f84a 3b04 	str.w	r3, [sl], #4
 8005c3c:	d8e6      	bhi.n	8005c0c <__mdiff+0x84>
 8005c3e:	1b33      	subs	r3, r6, r4
 8005c40:	3b15      	subs	r3, #21
 8005c42:	f023 0303 	bic.w	r3, r3, #3
 8005c46:	3415      	adds	r4, #21
 8005c48:	3304      	adds	r3, #4
 8005c4a:	42a6      	cmp	r6, r4
 8005c4c:	bf38      	it	cc
 8005c4e:	2304      	movcc	r3, #4
 8005c50:	441d      	add	r5, r3
 8005c52:	4443      	add	r3, r8
 8005c54:	461e      	mov	r6, r3
 8005c56:	462c      	mov	r4, r5
 8005c58:	4574      	cmp	r4, lr
 8005c5a:	d30e      	bcc.n	8005c7a <__mdiff+0xf2>
 8005c5c:	f10e 0103 	add.w	r1, lr, #3
 8005c60:	1b49      	subs	r1, r1, r5
 8005c62:	f021 0103 	bic.w	r1, r1, #3
 8005c66:	3d03      	subs	r5, #3
 8005c68:	45ae      	cmp	lr, r5
 8005c6a:	bf38      	it	cc
 8005c6c:	2100      	movcc	r1, #0
 8005c6e:	4419      	add	r1, r3
 8005c70:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005c74:	b18b      	cbz	r3, 8005c9a <__mdiff+0x112>
 8005c76:	6117      	str	r7, [r2, #16]
 8005c78:	e7a0      	b.n	8005bbc <__mdiff+0x34>
 8005c7a:	f854 8b04 	ldr.w	r8, [r4], #4
 8005c7e:	fa1f f188 	uxth.w	r1, r8
 8005c82:	4461      	add	r1, ip
 8005c84:	1408      	asrs	r0, r1, #16
 8005c86:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8005c8a:	b289      	uxth	r1, r1
 8005c8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005c90:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005c94:	f846 1b04 	str.w	r1, [r6], #4
 8005c98:	e7de      	b.n	8005c58 <__mdiff+0xd0>
 8005c9a:	3f01      	subs	r7, #1
 8005c9c:	e7e8      	b.n	8005c70 <__mdiff+0xe8>
 8005c9e:	bf00      	nop
 8005ca0:	08006f6c 	.word	0x08006f6c
 8005ca4:	08006f7d 	.word	0x08006f7d

08005ca8 <__d2b>:
 8005ca8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005cac:	2101      	movs	r1, #1
 8005cae:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005cb2:	4690      	mov	r8, r2
 8005cb4:	461d      	mov	r5, r3
 8005cb6:	f7ff fcd1 	bl	800565c <_Balloc>
 8005cba:	4604      	mov	r4, r0
 8005cbc:	b930      	cbnz	r0, 8005ccc <__d2b+0x24>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	f240 310a 	movw	r1, #778	; 0x30a
 8005cc4:	4b24      	ldr	r3, [pc, #144]	; (8005d58 <__d2b+0xb0>)
 8005cc6:	4825      	ldr	r0, [pc, #148]	; (8005d5c <__d2b+0xb4>)
 8005cc8:	f000 fa6a 	bl	80061a0 <__assert_func>
 8005ccc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005cd0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005cd4:	bb2d      	cbnz	r5, 8005d22 <__d2b+0x7a>
 8005cd6:	9301      	str	r3, [sp, #4]
 8005cd8:	f1b8 0300 	subs.w	r3, r8, #0
 8005cdc:	d026      	beq.n	8005d2c <__d2b+0x84>
 8005cde:	4668      	mov	r0, sp
 8005ce0:	9300      	str	r3, [sp, #0]
 8005ce2:	f7ff fd87 	bl	80057f4 <__lo0bits>
 8005ce6:	9900      	ldr	r1, [sp, #0]
 8005ce8:	b1f0      	cbz	r0, 8005d28 <__d2b+0x80>
 8005cea:	9a01      	ldr	r2, [sp, #4]
 8005cec:	f1c0 0320 	rsb	r3, r0, #32
 8005cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf4:	430b      	orrs	r3, r1
 8005cf6:	40c2      	lsrs	r2, r0
 8005cf8:	6163      	str	r3, [r4, #20]
 8005cfa:	9201      	str	r2, [sp, #4]
 8005cfc:	9b01      	ldr	r3, [sp, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	bf14      	ite	ne
 8005d02:	2102      	movne	r1, #2
 8005d04:	2101      	moveq	r1, #1
 8005d06:	61a3      	str	r3, [r4, #24]
 8005d08:	6121      	str	r1, [r4, #16]
 8005d0a:	b1c5      	cbz	r5, 8005d3e <__d2b+0x96>
 8005d0c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005d10:	4405      	add	r5, r0
 8005d12:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005d16:	603d      	str	r5, [r7, #0]
 8005d18:	6030      	str	r0, [r6, #0]
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	b002      	add	sp, #8
 8005d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d26:	e7d6      	b.n	8005cd6 <__d2b+0x2e>
 8005d28:	6161      	str	r1, [r4, #20]
 8005d2a:	e7e7      	b.n	8005cfc <__d2b+0x54>
 8005d2c:	a801      	add	r0, sp, #4
 8005d2e:	f7ff fd61 	bl	80057f4 <__lo0bits>
 8005d32:	2101      	movs	r1, #1
 8005d34:	9b01      	ldr	r3, [sp, #4]
 8005d36:	6121      	str	r1, [r4, #16]
 8005d38:	6163      	str	r3, [r4, #20]
 8005d3a:	3020      	adds	r0, #32
 8005d3c:	e7e5      	b.n	8005d0a <__d2b+0x62>
 8005d3e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005d42:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005d46:	6038      	str	r0, [r7, #0]
 8005d48:	6918      	ldr	r0, [r3, #16]
 8005d4a:	f7ff fd33 	bl	80057b4 <__hi0bits>
 8005d4e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005d52:	6031      	str	r1, [r6, #0]
 8005d54:	e7e1      	b.n	8005d1a <__d2b+0x72>
 8005d56:	bf00      	nop
 8005d58:	08006f6c 	.word	0x08006f6c
 8005d5c:	08006f7d 	.word	0x08006f7d

08005d60 <_calloc_r>:
 8005d60:	b538      	push	{r3, r4, r5, lr}
 8005d62:	fb02 f501 	mul.w	r5, r2, r1
 8005d66:	4629      	mov	r1, r5
 8005d68:	f000 f854 	bl	8005e14 <_malloc_r>
 8005d6c:	4604      	mov	r4, r0
 8005d6e:	b118      	cbz	r0, 8005d78 <_calloc_r+0x18>
 8005d70:	462a      	mov	r2, r5
 8005d72:	2100      	movs	r1, #0
 8005d74:	f7fe f8b6 	bl	8003ee4 <memset>
 8005d78:	4620      	mov	r0, r4
 8005d7a:	bd38      	pop	{r3, r4, r5, pc}

08005d7c <_free_r>:
 8005d7c:	b538      	push	{r3, r4, r5, lr}
 8005d7e:	4605      	mov	r5, r0
 8005d80:	2900      	cmp	r1, #0
 8005d82:	d043      	beq.n	8005e0c <_free_r+0x90>
 8005d84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d88:	1f0c      	subs	r4, r1, #4
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	bfb8      	it	lt
 8005d8e:	18e4      	addlt	r4, r4, r3
 8005d90:	f000 fa62 	bl	8006258 <__malloc_lock>
 8005d94:	4a1e      	ldr	r2, [pc, #120]	; (8005e10 <_free_r+0x94>)
 8005d96:	6813      	ldr	r3, [r2, #0]
 8005d98:	4610      	mov	r0, r2
 8005d9a:	b933      	cbnz	r3, 8005daa <_free_r+0x2e>
 8005d9c:	6063      	str	r3, [r4, #4]
 8005d9e:	6014      	str	r4, [r2, #0]
 8005da0:	4628      	mov	r0, r5
 8005da2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005da6:	f000 ba5d 	b.w	8006264 <__malloc_unlock>
 8005daa:	42a3      	cmp	r3, r4
 8005dac:	d90a      	bls.n	8005dc4 <_free_r+0x48>
 8005dae:	6821      	ldr	r1, [r4, #0]
 8005db0:	1862      	adds	r2, r4, r1
 8005db2:	4293      	cmp	r3, r2
 8005db4:	bf01      	itttt	eq
 8005db6:	681a      	ldreq	r2, [r3, #0]
 8005db8:	685b      	ldreq	r3, [r3, #4]
 8005dba:	1852      	addeq	r2, r2, r1
 8005dbc:	6022      	streq	r2, [r4, #0]
 8005dbe:	6063      	str	r3, [r4, #4]
 8005dc0:	6004      	str	r4, [r0, #0]
 8005dc2:	e7ed      	b.n	8005da0 <_free_r+0x24>
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	b10b      	cbz	r3, 8005dce <_free_r+0x52>
 8005dca:	42a3      	cmp	r3, r4
 8005dcc:	d9fa      	bls.n	8005dc4 <_free_r+0x48>
 8005dce:	6811      	ldr	r1, [r2, #0]
 8005dd0:	1850      	adds	r0, r2, r1
 8005dd2:	42a0      	cmp	r0, r4
 8005dd4:	d10b      	bne.n	8005dee <_free_r+0x72>
 8005dd6:	6820      	ldr	r0, [r4, #0]
 8005dd8:	4401      	add	r1, r0
 8005dda:	1850      	adds	r0, r2, r1
 8005ddc:	4283      	cmp	r3, r0
 8005dde:	6011      	str	r1, [r2, #0]
 8005de0:	d1de      	bne.n	8005da0 <_free_r+0x24>
 8005de2:	6818      	ldr	r0, [r3, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	4401      	add	r1, r0
 8005de8:	6011      	str	r1, [r2, #0]
 8005dea:	6053      	str	r3, [r2, #4]
 8005dec:	e7d8      	b.n	8005da0 <_free_r+0x24>
 8005dee:	d902      	bls.n	8005df6 <_free_r+0x7a>
 8005df0:	230c      	movs	r3, #12
 8005df2:	602b      	str	r3, [r5, #0]
 8005df4:	e7d4      	b.n	8005da0 <_free_r+0x24>
 8005df6:	6820      	ldr	r0, [r4, #0]
 8005df8:	1821      	adds	r1, r4, r0
 8005dfa:	428b      	cmp	r3, r1
 8005dfc:	bf01      	itttt	eq
 8005dfe:	6819      	ldreq	r1, [r3, #0]
 8005e00:	685b      	ldreq	r3, [r3, #4]
 8005e02:	1809      	addeq	r1, r1, r0
 8005e04:	6021      	streq	r1, [r4, #0]
 8005e06:	6063      	str	r3, [r4, #4]
 8005e08:	6054      	str	r4, [r2, #4]
 8005e0a:	e7c9      	b.n	8005da0 <_free_r+0x24>
 8005e0c:	bd38      	pop	{r3, r4, r5, pc}
 8005e0e:	bf00      	nop
 8005e10:	20000234 	.word	0x20000234

08005e14 <_malloc_r>:
 8005e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e16:	1ccd      	adds	r5, r1, #3
 8005e18:	f025 0503 	bic.w	r5, r5, #3
 8005e1c:	3508      	adds	r5, #8
 8005e1e:	2d0c      	cmp	r5, #12
 8005e20:	bf38      	it	cc
 8005e22:	250c      	movcc	r5, #12
 8005e24:	2d00      	cmp	r5, #0
 8005e26:	4606      	mov	r6, r0
 8005e28:	db01      	blt.n	8005e2e <_malloc_r+0x1a>
 8005e2a:	42a9      	cmp	r1, r5
 8005e2c:	d903      	bls.n	8005e36 <_malloc_r+0x22>
 8005e2e:	230c      	movs	r3, #12
 8005e30:	6033      	str	r3, [r6, #0]
 8005e32:	2000      	movs	r0, #0
 8005e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e36:	f000 fa0f 	bl	8006258 <__malloc_lock>
 8005e3a:	4921      	ldr	r1, [pc, #132]	; (8005ec0 <_malloc_r+0xac>)
 8005e3c:	680a      	ldr	r2, [r1, #0]
 8005e3e:	4614      	mov	r4, r2
 8005e40:	b99c      	cbnz	r4, 8005e6a <_malloc_r+0x56>
 8005e42:	4f20      	ldr	r7, [pc, #128]	; (8005ec4 <_malloc_r+0xb0>)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	b923      	cbnz	r3, 8005e52 <_malloc_r+0x3e>
 8005e48:	4621      	mov	r1, r4
 8005e4a:	4630      	mov	r0, r6
 8005e4c:	f000 f998 	bl	8006180 <_sbrk_r>
 8005e50:	6038      	str	r0, [r7, #0]
 8005e52:	4629      	mov	r1, r5
 8005e54:	4630      	mov	r0, r6
 8005e56:	f000 f993 	bl	8006180 <_sbrk_r>
 8005e5a:	1c43      	adds	r3, r0, #1
 8005e5c:	d123      	bne.n	8005ea6 <_malloc_r+0x92>
 8005e5e:	230c      	movs	r3, #12
 8005e60:	4630      	mov	r0, r6
 8005e62:	6033      	str	r3, [r6, #0]
 8005e64:	f000 f9fe 	bl	8006264 <__malloc_unlock>
 8005e68:	e7e3      	b.n	8005e32 <_malloc_r+0x1e>
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	1b5b      	subs	r3, r3, r5
 8005e6e:	d417      	bmi.n	8005ea0 <_malloc_r+0x8c>
 8005e70:	2b0b      	cmp	r3, #11
 8005e72:	d903      	bls.n	8005e7c <_malloc_r+0x68>
 8005e74:	6023      	str	r3, [r4, #0]
 8005e76:	441c      	add	r4, r3
 8005e78:	6025      	str	r5, [r4, #0]
 8005e7a:	e004      	b.n	8005e86 <_malloc_r+0x72>
 8005e7c:	6863      	ldr	r3, [r4, #4]
 8005e7e:	42a2      	cmp	r2, r4
 8005e80:	bf0c      	ite	eq
 8005e82:	600b      	streq	r3, [r1, #0]
 8005e84:	6053      	strne	r3, [r2, #4]
 8005e86:	4630      	mov	r0, r6
 8005e88:	f000 f9ec 	bl	8006264 <__malloc_unlock>
 8005e8c:	f104 000b 	add.w	r0, r4, #11
 8005e90:	1d23      	adds	r3, r4, #4
 8005e92:	f020 0007 	bic.w	r0, r0, #7
 8005e96:	1ac2      	subs	r2, r0, r3
 8005e98:	d0cc      	beq.n	8005e34 <_malloc_r+0x20>
 8005e9a:	1a1b      	subs	r3, r3, r0
 8005e9c:	50a3      	str	r3, [r4, r2]
 8005e9e:	e7c9      	b.n	8005e34 <_malloc_r+0x20>
 8005ea0:	4622      	mov	r2, r4
 8005ea2:	6864      	ldr	r4, [r4, #4]
 8005ea4:	e7cc      	b.n	8005e40 <_malloc_r+0x2c>
 8005ea6:	1cc4      	adds	r4, r0, #3
 8005ea8:	f024 0403 	bic.w	r4, r4, #3
 8005eac:	42a0      	cmp	r0, r4
 8005eae:	d0e3      	beq.n	8005e78 <_malloc_r+0x64>
 8005eb0:	1a21      	subs	r1, r4, r0
 8005eb2:	4630      	mov	r0, r6
 8005eb4:	f000 f964 	bl	8006180 <_sbrk_r>
 8005eb8:	3001      	adds	r0, #1
 8005eba:	d1dd      	bne.n	8005e78 <_malloc_r+0x64>
 8005ebc:	e7cf      	b.n	8005e5e <_malloc_r+0x4a>
 8005ebe:	bf00      	nop
 8005ec0:	20000234 	.word	0x20000234
 8005ec4:	20000238 	.word	0x20000238

08005ec8 <__ssputs_r>:
 8005ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ecc:	688e      	ldr	r6, [r1, #8]
 8005ece:	4682      	mov	sl, r0
 8005ed0:	429e      	cmp	r6, r3
 8005ed2:	460c      	mov	r4, r1
 8005ed4:	4690      	mov	r8, r2
 8005ed6:	461f      	mov	r7, r3
 8005ed8:	d838      	bhi.n	8005f4c <__ssputs_r+0x84>
 8005eda:	898a      	ldrh	r2, [r1, #12]
 8005edc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ee0:	d032      	beq.n	8005f48 <__ssputs_r+0x80>
 8005ee2:	6825      	ldr	r5, [r4, #0]
 8005ee4:	6909      	ldr	r1, [r1, #16]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	eba5 0901 	sub.w	r9, r5, r1
 8005eec:	6965      	ldr	r5, [r4, #20]
 8005eee:	444b      	add	r3, r9
 8005ef0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ef4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ef8:	106d      	asrs	r5, r5, #1
 8005efa:	429d      	cmp	r5, r3
 8005efc:	bf38      	it	cc
 8005efe:	461d      	movcc	r5, r3
 8005f00:	0553      	lsls	r3, r2, #21
 8005f02:	d531      	bpl.n	8005f68 <__ssputs_r+0xa0>
 8005f04:	4629      	mov	r1, r5
 8005f06:	f7ff ff85 	bl	8005e14 <_malloc_r>
 8005f0a:	4606      	mov	r6, r0
 8005f0c:	b950      	cbnz	r0, 8005f24 <__ssputs_r+0x5c>
 8005f0e:	230c      	movs	r3, #12
 8005f10:	f04f 30ff 	mov.w	r0, #4294967295
 8005f14:	f8ca 3000 	str.w	r3, [sl]
 8005f18:	89a3      	ldrh	r3, [r4, #12]
 8005f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f1e:	81a3      	strh	r3, [r4, #12]
 8005f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f24:	464a      	mov	r2, r9
 8005f26:	6921      	ldr	r1, [r4, #16]
 8005f28:	f7ff fb8a 	bl	8005640 <memcpy>
 8005f2c:	89a3      	ldrh	r3, [r4, #12]
 8005f2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f36:	81a3      	strh	r3, [r4, #12]
 8005f38:	6126      	str	r6, [r4, #16]
 8005f3a:	444e      	add	r6, r9
 8005f3c:	6026      	str	r6, [r4, #0]
 8005f3e:	463e      	mov	r6, r7
 8005f40:	6165      	str	r5, [r4, #20]
 8005f42:	eba5 0509 	sub.w	r5, r5, r9
 8005f46:	60a5      	str	r5, [r4, #8]
 8005f48:	42be      	cmp	r6, r7
 8005f4a:	d900      	bls.n	8005f4e <__ssputs_r+0x86>
 8005f4c:	463e      	mov	r6, r7
 8005f4e:	4632      	mov	r2, r6
 8005f50:	4641      	mov	r1, r8
 8005f52:	6820      	ldr	r0, [r4, #0]
 8005f54:	f000 f966 	bl	8006224 <memmove>
 8005f58:	68a3      	ldr	r3, [r4, #8]
 8005f5a:	6822      	ldr	r2, [r4, #0]
 8005f5c:	1b9b      	subs	r3, r3, r6
 8005f5e:	4432      	add	r2, r6
 8005f60:	2000      	movs	r0, #0
 8005f62:	60a3      	str	r3, [r4, #8]
 8005f64:	6022      	str	r2, [r4, #0]
 8005f66:	e7db      	b.n	8005f20 <__ssputs_r+0x58>
 8005f68:	462a      	mov	r2, r5
 8005f6a:	f000 f981 	bl	8006270 <_realloc_r>
 8005f6e:	4606      	mov	r6, r0
 8005f70:	2800      	cmp	r0, #0
 8005f72:	d1e1      	bne.n	8005f38 <__ssputs_r+0x70>
 8005f74:	4650      	mov	r0, sl
 8005f76:	6921      	ldr	r1, [r4, #16]
 8005f78:	f7ff ff00 	bl	8005d7c <_free_r>
 8005f7c:	e7c7      	b.n	8005f0e <__ssputs_r+0x46>
	...

08005f80 <_svfiprintf_r>:
 8005f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f84:	4698      	mov	r8, r3
 8005f86:	898b      	ldrh	r3, [r1, #12]
 8005f88:	4607      	mov	r7, r0
 8005f8a:	061b      	lsls	r3, r3, #24
 8005f8c:	460d      	mov	r5, r1
 8005f8e:	4614      	mov	r4, r2
 8005f90:	b09d      	sub	sp, #116	; 0x74
 8005f92:	d50e      	bpl.n	8005fb2 <_svfiprintf_r+0x32>
 8005f94:	690b      	ldr	r3, [r1, #16]
 8005f96:	b963      	cbnz	r3, 8005fb2 <_svfiprintf_r+0x32>
 8005f98:	2140      	movs	r1, #64	; 0x40
 8005f9a:	f7ff ff3b 	bl	8005e14 <_malloc_r>
 8005f9e:	6028      	str	r0, [r5, #0]
 8005fa0:	6128      	str	r0, [r5, #16]
 8005fa2:	b920      	cbnz	r0, 8005fae <_svfiprintf_r+0x2e>
 8005fa4:	230c      	movs	r3, #12
 8005fa6:	603b      	str	r3, [r7, #0]
 8005fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fac:	e0d1      	b.n	8006152 <_svfiprintf_r+0x1d2>
 8005fae:	2340      	movs	r3, #64	; 0x40
 8005fb0:	616b      	str	r3, [r5, #20]
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	9309      	str	r3, [sp, #36]	; 0x24
 8005fb6:	2320      	movs	r3, #32
 8005fb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005fbc:	2330      	movs	r3, #48	; 0x30
 8005fbe:	f04f 0901 	mov.w	r9, #1
 8005fc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fc6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800616c <_svfiprintf_r+0x1ec>
 8005fca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005fce:	4623      	mov	r3, r4
 8005fd0:	469a      	mov	sl, r3
 8005fd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fd6:	b10a      	cbz	r2, 8005fdc <_svfiprintf_r+0x5c>
 8005fd8:	2a25      	cmp	r2, #37	; 0x25
 8005fda:	d1f9      	bne.n	8005fd0 <_svfiprintf_r+0x50>
 8005fdc:	ebba 0b04 	subs.w	fp, sl, r4
 8005fe0:	d00b      	beq.n	8005ffa <_svfiprintf_r+0x7a>
 8005fe2:	465b      	mov	r3, fp
 8005fe4:	4622      	mov	r2, r4
 8005fe6:	4629      	mov	r1, r5
 8005fe8:	4638      	mov	r0, r7
 8005fea:	f7ff ff6d 	bl	8005ec8 <__ssputs_r>
 8005fee:	3001      	adds	r0, #1
 8005ff0:	f000 80aa 	beq.w	8006148 <_svfiprintf_r+0x1c8>
 8005ff4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ff6:	445a      	add	r2, fp
 8005ff8:	9209      	str	r2, [sp, #36]	; 0x24
 8005ffa:	f89a 3000 	ldrb.w	r3, [sl]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f000 80a2 	beq.w	8006148 <_svfiprintf_r+0x1c8>
 8006004:	2300      	movs	r3, #0
 8006006:	f04f 32ff 	mov.w	r2, #4294967295
 800600a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800600e:	f10a 0a01 	add.w	sl, sl, #1
 8006012:	9304      	str	r3, [sp, #16]
 8006014:	9307      	str	r3, [sp, #28]
 8006016:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800601a:	931a      	str	r3, [sp, #104]	; 0x68
 800601c:	4654      	mov	r4, sl
 800601e:	2205      	movs	r2, #5
 8006020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006024:	4851      	ldr	r0, [pc, #324]	; (800616c <_svfiprintf_r+0x1ec>)
 8006026:	f7ff fafd 	bl	8005624 <memchr>
 800602a:	9a04      	ldr	r2, [sp, #16]
 800602c:	b9d8      	cbnz	r0, 8006066 <_svfiprintf_r+0xe6>
 800602e:	06d0      	lsls	r0, r2, #27
 8006030:	bf44      	itt	mi
 8006032:	2320      	movmi	r3, #32
 8006034:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006038:	0711      	lsls	r1, r2, #28
 800603a:	bf44      	itt	mi
 800603c:	232b      	movmi	r3, #43	; 0x2b
 800603e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006042:	f89a 3000 	ldrb.w	r3, [sl]
 8006046:	2b2a      	cmp	r3, #42	; 0x2a
 8006048:	d015      	beq.n	8006076 <_svfiprintf_r+0xf6>
 800604a:	4654      	mov	r4, sl
 800604c:	2000      	movs	r0, #0
 800604e:	f04f 0c0a 	mov.w	ip, #10
 8006052:	9a07      	ldr	r2, [sp, #28]
 8006054:	4621      	mov	r1, r4
 8006056:	f811 3b01 	ldrb.w	r3, [r1], #1
 800605a:	3b30      	subs	r3, #48	; 0x30
 800605c:	2b09      	cmp	r3, #9
 800605e:	d94e      	bls.n	80060fe <_svfiprintf_r+0x17e>
 8006060:	b1b0      	cbz	r0, 8006090 <_svfiprintf_r+0x110>
 8006062:	9207      	str	r2, [sp, #28]
 8006064:	e014      	b.n	8006090 <_svfiprintf_r+0x110>
 8006066:	eba0 0308 	sub.w	r3, r0, r8
 800606a:	fa09 f303 	lsl.w	r3, r9, r3
 800606e:	4313      	orrs	r3, r2
 8006070:	46a2      	mov	sl, r4
 8006072:	9304      	str	r3, [sp, #16]
 8006074:	e7d2      	b.n	800601c <_svfiprintf_r+0x9c>
 8006076:	9b03      	ldr	r3, [sp, #12]
 8006078:	1d19      	adds	r1, r3, #4
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	9103      	str	r1, [sp, #12]
 800607e:	2b00      	cmp	r3, #0
 8006080:	bfbb      	ittet	lt
 8006082:	425b      	neglt	r3, r3
 8006084:	f042 0202 	orrlt.w	r2, r2, #2
 8006088:	9307      	strge	r3, [sp, #28]
 800608a:	9307      	strlt	r3, [sp, #28]
 800608c:	bfb8      	it	lt
 800608e:	9204      	strlt	r2, [sp, #16]
 8006090:	7823      	ldrb	r3, [r4, #0]
 8006092:	2b2e      	cmp	r3, #46	; 0x2e
 8006094:	d10c      	bne.n	80060b0 <_svfiprintf_r+0x130>
 8006096:	7863      	ldrb	r3, [r4, #1]
 8006098:	2b2a      	cmp	r3, #42	; 0x2a
 800609a:	d135      	bne.n	8006108 <_svfiprintf_r+0x188>
 800609c:	9b03      	ldr	r3, [sp, #12]
 800609e:	3402      	adds	r4, #2
 80060a0:	1d1a      	adds	r2, r3, #4
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	9203      	str	r2, [sp, #12]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	bfb8      	it	lt
 80060aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80060ae:	9305      	str	r3, [sp, #20]
 80060b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800617c <_svfiprintf_r+0x1fc>
 80060b4:	2203      	movs	r2, #3
 80060b6:	4650      	mov	r0, sl
 80060b8:	7821      	ldrb	r1, [r4, #0]
 80060ba:	f7ff fab3 	bl	8005624 <memchr>
 80060be:	b140      	cbz	r0, 80060d2 <_svfiprintf_r+0x152>
 80060c0:	2340      	movs	r3, #64	; 0x40
 80060c2:	eba0 000a 	sub.w	r0, r0, sl
 80060c6:	fa03 f000 	lsl.w	r0, r3, r0
 80060ca:	9b04      	ldr	r3, [sp, #16]
 80060cc:	3401      	adds	r4, #1
 80060ce:	4303      	orrs	r3, r0
 80060d0:	9304      	str	r3, [sp, #16]
 80060d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060d6:	2206      	movs	r2, #6
 80060d8:	4825      	ldr	r0, [pc, #148]	; (8006170 <_svfiprintf_r+0x1f0>)
 80060da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060de:	f7ff faa1 	bl	8005624 <memchr>
 80060e2:	2800      	cmp	r0, #0
 80060e4:	d038      	beq.n	8006158 <_svfiprintf_r+0x1d8>
 80060e6:	4b23      	ldr	r3, [pc, #140]	; (8006174 <_svfiprintf_r+0x1f4>)
 80060e8:	bb1b      	cbnz	r3, 8006132 <_svfiprintf_r+0x1b2>
 80060ea:	9b03      	ldr	r3, [sp, #12]
 80060ec:	3307      	adds	r3, #7
 80060ee:	f023 0307 	bic.w	r3, r3, #7
 80060f2:	3308      	adds	r3, #8
 80060f4:	9303      	str	r3, [sp, #12]
 80060f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060f8:	4433      	add	r3, r6
 80060fa:	9309      	str	r3, [sp, #36]	; 0x24
 80060fc:	e767      	b.n	8005fce <_svfiprintf_r+0x4e>
 80060fe:	460c      	mov	r4, r1
 8006100:	2001      	movs	r0, #1
 8006102:	fb0c 3202 	mla	r2, ip, r2, r3
 8006106:	e7a5      	b.n	8006054 <_svfiprintf_r+0xd4>
 8006108:	2300      	movs	r3, #0
 800610a:	f04f 0c0a 	mov.w	ip, #10
 800610e:	4619      	mov	r1, r3
 8006110:	3401      	adds	r4, #1
 8006112:	9305      	str	r3, [sp, #20]
 8006114:	4620      	mov	r0, r4
 8006116:	f810 2b01 	ldrb.w	r2, [r0], #1
 800611a:	3a30      	subs	r2, #48	; 0x30
 800611c:	2a09      	cmp	r2, #9
 800611e:	d903      	bls.n	8006128 <_svfiprintf_r+0x1a8>
 8006120:	2b00      	cmp	r3, #0
 8006122:	d0c5      	beq.n	80060b0 <_svfiprintf_r+0x130>
 8006124:	9105      	str	r1, [sp, #20]
 8006126:	e7c3      	b.n	80060b0 <_svfiprintf_r+0x130>
 8006128:	4604      	mov	r4, r0
 800612a:	2301      	movs	r3, #1
 800612c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006130:	e7f0      	b.n	8006114 <_svfiprintf_r+0x194>
 8006132:	ab03      	add	r3, sp, #12
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	462a      	mov	r2, r5
 8006138:	4638      	mov	r0, r7
 800613a:	4b0f      	ldr	r3, [pc, #60]	; (8006178 <_svfiprintf_r+0x1f8>)
 800613c:	a904      	add	r1, sp, #16
 800613e:	f7fd ff77 	bl	8004030 <_printf_float>
 8006142:	1c42      	adds	r2, r0, #1
 8006144:	4606      	mov	r6, r0
 8006146:	d1d6      	bne.n	80060f6 <_svfiprintf_r+0x176>
 8006148:	89ab      	ldrh	r3, [r5, #12]
 800614a:	065b      	lsls	r3, r3, #25
 800614c:	f53f af2c 	bmi.w	8005fa8 <_svfiprintf_r+0x28>
 8006150:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006152:	b01d      	add	sp, #116	; 0x74
 8006154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006158:	ab03      	add	r3, sp, #12
 800615a:	9300      	str	r3, [sp, #0]
 800615c:	462a      	mov	r2, r5
 800615e:	4638      	mov	r0, r7
 8006160:	4b05      	ldr	r3, [pc, #20]	; (8006178 <_svfiprintf_r+0x1f8>)
 8006162:	a904      	add	r1, sp, #16
 8006164:	f7fe fa00 	bl	8004568 <_printf_i>
 8006168:	e7eb      	b.n	8006142 <_svfiprintf_r+0x1c2>
 800616a:	bf00      	nop
 800616c:	080070dc 	.word	0x080070dc
 8006170:	080070e6 	.word	0x080070e6
 8006174:	08004031 	.word	0x08004031
 8006178:	08005ec9 	.word	0x08005ec9
 800617c:	080070e2 	.word	0x080070e2

08006180 <_sbrk_r>:
 8006180:	b538      	push	{r3, r4, r5, lr}
 8006182:	2300      	movs	r3, #0
 8006184:	4d05      	ldr	r5, [pc, #20]	; (800619c <_sbrk_r+0x1c>)
 8006186:	4604      	mov	r4, r0
 8006188:	4608      	mov	r0, r1
 800618a:	602b      	str	r3, [r5, #0]
 800618c:	f7fc f898 	bl	80022c0 <_sbrk>
 8006190:	1c43      	adds	r3, r0, #1
 8006192:	d102      	bne.n	800619a <_sbrk_r+0x1a>
 8006194:	682b      	ldr	r3, [r5, #0]
 8006196:	b103      	cbz	r3, 800619a <_sbrk_r+0x1a>
 8006198:	6023      	str	r3, [r4, #0]
 800619a:	bd38      	pop	{r3, r4, r5, pc}
 800619c:	200003e0 	.word	0x200003e0

080061a0 <__assert_func>:
 80061a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061a2:	4614      	mov	r4, r2
 80061a4:	461a      	mov	r2, r3
 80061a6:	4b09      	ldr	r3, [pc, #36]	; (80061cc <__assert_func+0x2c>)
 80061a8:	4605      	mov	r5, r0
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68d8      	ldr	r0, [r3, #12]
 80061ae:	b14c      	cbz	r4, 80061c4 <__assert_func+0x24>
 80061b0:	4b07      	ldr	r3, [pc, #28]	; (80061d0 <__assert_func+0x30>)
 80061b2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80061b6:	9100      	str	r1, [sp, #0]
 80061b8:	462b      	mov	r3, r5
 80061ba:	4906      	ldr	r1, [pc, #24]	; (80061d4 <__assert_func+0x34>)
 80061bc:	f000 f80e 	bl	80061dc <fiprintf>
 80061c0:	f000 faa2 	bl	8006708 <abort>
 80061c4:	4b04      	ldr	r3, [pc, #16]	; (80061d8 <__assert_func+0x38>)
 80061c6:	461c      	mov	r4, r3
 80061c8:	e7f3      	b.n	80061b2 <__assert_func+0x12>
 80061ca:	bf00      	nop
 80061cc:	2000001c 	.word	0x2000001c
 80061d0:	080070ed 	.word	0x080070ed
 80061d4:	080070fa 	.word	0x080070fa
 80061d8:	08007128 	.word	0x08007128

080061dc <fiprintf>:
 80061dc:	b40e      	push	{r1, r2, r3}
 80061de:	b503      	push	{r0, r1, lr}
 80061e0:	4601      	mov	r1, r0
 80061e2:	ab03      	add	r3, sp, #12
 80061e4:	4805      	ldr	r0, [pc, #20]	; (80061fc <fiprintf+0x20>)
 80061e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80061ea:	6800      	ldr	r0, [r0, #0]
 80061ec:	9301      	str	r3, [sp, #4]
 80061ee:	f000 f88d 	bl	800630c <_vfiprintf_r>
 80061f2:	b002      	add	sp, #8
 80061f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80061f8:	b003      	add	sp, #12
 80061fa:	4770      	bx	lr
 80061fc:	2000001c 	.word	0x2000001c

08006200 <__ascii_mbtowc>:
 8006200:	b082      	sub	sp, #8
 8006202:	b901      	cbnz	r1, 8006206 <__ascii_mbtowc+0x6>
 8006204:	a901      	add	r1, sp, #4
 8006206:	b142      	cbz	r2, 800621a <__ascii_mbtowc+0x1a>
 8006208:	b14b      	cbz	r3, 800621e <__ascii_mbtowc+0x1e>
 800620a:	7813      	ldrb	r3, [r2, #0]
 800620c:	600b      	str	r3, [r1, #0]
 800620e:	7812      	ldrb	r2, [r2, #0]
 8006210:	1e10      	subs	r0, r2, #0
 8006212:	bf18      	it	ne
 8006214:	2001      	movne	r0, #1
 8006216:	b002      	add	sp, #8
 8006218:	4770      	bx	lr
 800621a:	4610      	mov	r0, r2
 800621c:	e7fb      	b.n	8006216 <__ascii_mbtowc+0x16>
 800621e:	f06f 0001 	mvn.w	r0, #1
 8006222:	e7f8      	b.n	8006216 <__ascii_mbtowc+0x16>

08006224 <memmove>:
 8006224:	4288      	cmp	r0, r1
 8006226:	b510      	push	{r4, lr}
 8006228:	eb01 0402 	add.w	r4, r1, r2
 800622c:	d902      	bls.n	8006234 <memmove+0x10>
 800622e:	4284      	cmp	r4, r0
 8006230:	4623      	mov	r3, r4
 8006232:	d807      	bhi.n	8006244 <memmove+0x20>
 8006234:	1e43      	subs	r3, r0, #1
 8006236:	42a1      	cmp	r1, r4
 8006238:	d008      	beq.n	800624c <memmove+0x28>
 800623a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800623e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006242:	e7f8      	b.n	8006236 <memmove+0x12>
 8006244:	4601      	mov	r1, r0
 8006246:	4402      	add	r2, r0
 8006248:	428a      	cmp	r2, r1
 800624a:	d100      	bne.n	800624e <memmove+0x2a>
 800624c:	bd10      	pop	{r4, pc}
 800624e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006252:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006256:	e7f7      	b.n	8006248 <memmove+0x24>

08006258 <__malloc_lock>:
 8006258:	4801      	ldr	r0, [pc, #4]	; (8006260 <__malloc_lock+0x8>)
 800625a:	f000 bc15 	b.w	8006a88 <__retarget_lock_acquire_recursive>
 800625e:	bf00      	nop
 8006260:	200003e8 	.word	0x200003e8

08006264 <__malloc_unlock>:
 8006264:	4801      	ldr	r0, [pc, #4]	; (800626c <__malloc_unlock+0x8>)
 8006266:	f000 bc10 	b.w	8006a8a <__retarget_lock_release_recursive>
 800626a:	bf00      	nop
 800626c:	200003e8 	.word	0x200003e8

08006270 <_realloc_r>:
 8006270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006272:	4607      	mov	r7, r0
 8006274:	4614      	mov	r4, r2
 8006276:	460e      	mov	r6, r1
 8006278:	b921      	cbnz	r1, 8006284 <_realloc_r+0x14>
 800627a:	4611      	mov	r1, r2
 800627c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006280:	f7ff bdc8 	b.w	8005e14 <_malloc_r>
 8006284:	b922      	cbnz	r2, 8006290 <_realloc_r+0x20>
 8006286:	f7ff fd79 	bl	8005d7c <_free_r>
 800628a:	4625      	mov	r5, r4
 800628c:	4628      	mov	r0, r5
 800628e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006290:	f000 fc60 	bl	8006b54 <_malloc_usable_size_r>
 8006294:	42a0      	cmp	r0, r4
 8006296:	d20f      	bcs.n	80062b8 <_realloc_r+0x48>
 8006298:	4621      	mov	r1, r4
 800629a:	4638      	mov	r0, r7
 800629c:	f7ff fdba 	bl	8005e14 <_malloc_r>
 80062a0:	4605      	mov	r5, r0
 80062a2:	2800      	cmp	r0, #0
 80062a4:	d0f2      	beq.n	800628c <_realloc_r+0x1c>
 80062a6:	4631      	mov	r1, r6
 80062a8:	4622      	mov	r2, r4
 80062aa:	f7ff f9c9 	bl	8005640 <memcpy>
 80062ae:	4631      	mov	r1, r6
 80062b0:	4638      	mov	r0, r7
 80062b2:	f7ff fd63 	bl	8005d7c <_free_r>
 80062b6:	e7e9      	b.n	800628c <_realloc_r+0x1c>
 80062b8:	4635      	mov	r5, r6
 80062ba:	e7e7      	b.n	800628c <_realloc_r+0x1c>

080062bc <__sfputc_r>:
 80062bc:	6893      	ldr	r3, [r2, #8]
 80062be:	b410      	push	{r4}
 80062c0:	3b01      	subs	r3, #1
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	6093      	str	r3, [r2, #8]
 80062c6:	da07      	bge.n	80062d8 <__sfputc_r+0x1c>
 80062c8:	6994      	ldr	r4, [r2, #24]
 80062ca:	42a3      	cmp	r3, r4
 80062cc:	db01      	blt.n	80062d2 <__sfputc_r+0x16>
 80062ce:	290a      	cmp	r1, #10
 80062d0:	d102      	bne.n	80062d8 <__sfputc_r+0x1c>
 80062d2:	bc10      	pop	{r4}
 80062d4:	f000 b94a 	b.w	800656c <__swbuf_r>
 80062d8:	6813      	ldr	r3, [r2, #0]
 80062da:	1c58      	adds	r0, r3, #1
 80062dc:	6010      	str	r0, [r2, #0]
 80062de:	7019      	strb	r1, [r3, #0]
 80062e0:	4608      	mov	r0, r1
 80062e2:	bc10      	pop	{r4}
 80062e4:	4770      	bx	lr

080062e6 <__sfputs_r>:
 80062e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062e8:	4606      	mov	r6, r0
 80062ea:	460f      	mov	r7, r1
 80062ec:	4614      	mov	r4, r2
 80062ee:	18d5      	adds	r5, r2, r3
 80062f0:	42ac      	cmp	r4, r5
 80062f2:	d101      	bne.n	80062f8 <__sfputs_r+0x12>
 80062f4:	2000      	movs	r0, #0
 80062f6:	e007      	b.n	8006308 <__sfputs_r+0x22>
 80062f8:	463a      	mov	r2, r7
 80062fa:	4630      	mov	r0, r6
 80062fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006300:	f7ff ffdc 	bl	80062bc <__sfputc_r>
 8006304:	1c43      	adds	r3, r0, #1
 8006306:	d1f3      	bne.n	80062f0 <__sfputs_r+0xa>
 8006308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800630c <_vfiprintf_r>:
 800630c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006310:	460d      	mov	r5, r1
 8006312:	4614      	mov	r4, r2
 8006314:	4698      	mov	r8, r3
 8006316:	4606      	mov	r6, r0
 8006318:	b09d      	sub	sp, #116	; 0x74
 800631a:	b118      	cbz	r0, 8006324 <_vfiprintf_r+0x18>
 800631c:	6983      	ldr	r3, [r0, #24]
 800631e:	b90b      	cbnz	r3, 8006324 <_vfiprintf_r+0x18>
 8006320:	f000 fb14 	bl	800694c <__sinit>
 8006324:	4b89      	ldr	r3, [pc, #548]	; (800654c <_vfiprintf_r+0x240>)
 8006326:	429d      	cmp	r5, r3
 8006328:	d11b      	bne.n	8006362 <_vfiprintf_r+0x56>
 800632a:	6875      	ldr	r5, [r6, #4]
 800632c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800632e:	07d9      	lsls	r1, r3, #31
 8006330:	d405      	bmi.n	800633e <_vfiprintf_r+0x32>
 8006332:	89ab      	ldrh	r3, [r5, #12]
 8006334:	059a      	lsls	r2, r3, #22
 8006336:	d402      	bmi.n	800633e <_vfiprintf_r+0x32>
 8006338:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800633a:	f000 fba5 	bl	8006a88 <__retarget_lock_acquire_recursive>
 800633e:	89ab      	ldrh	r3, [r5, #12]
 8006340:	071b      	lsls	r3, r3, #28
 8006342:	d501      	bpl.n	8006348 <_vfiprintf_r+0x3c>
 8006344:	692b      	ldr	r3, [r5, #16]
 8006346:	b9eb      	cbnz	r3, 8006384 <_vfiprintf_r+0x78>
 8006348:	4629      	mov	r1, r5
 800634a:	4630      	mov	r0, r6
 800634c:	f000 f96e 	bl	800662c <__swsetup_r>
 8006350:	b1c0      	cbz	r0, 8006384 <_vfiprintf_r+0x78>
 8006352:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006354:	07dc      	lsls	r4, r3, #31
 8006356:	d50e      	bpl.n	8006376 <_vfiprintf_r+0x6a>
 8006358:	f04f 30ff 	mov.w	r0, #4294967295
 800635c:	b01d      	add	sp, #116	; 0x74
 800635e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006362:	4b7b      	ldr	r3, [pc, #492]	; (8006550 <_vfiprintf_r+0x244>)
 8006364:	429d      	cmp	r5, r3
 8006366:	d101      	bne.n	800636c <_vfiprintf_r+0x60>
 8006368:	68b5      	ldr	r5, [r6, #8]
 800636a:	e7df      	b.n	800632c <_vfiprintf_r+0x20>
 800636c:	4b79      	ldr	r3, [pc, #484]	; (8006554 <_vfiprintf_r+0x248>)
 800636e:	429d      	cmp	r5, r3
 8006370:	bf08      	it	eq
 8006372:	68f5      	ldreq	r5, [r6, #12]
 8006374:	e7da      	b.n	800632c <_vfiprintf_r+0x20>
 8006376:	89ab      	ldrh	r3, [r5, #12]
 8006378:	0598      	lsls	r0, r3, #22
 800637a:	d4ed      	bmi.n	8006358 <_vfiprintf_r+0x4c>
 800637c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800637e:	f000 fb84 	bl	8006a8a <__retarget_lock_release_recursive>
 8006382:	e7e9      	b.n	8006358 <_vfiprintf_r+0x4c>
 8006384:	2300      	movs	r3, #0
 8006386:	9309      	str	r3, [sp, #36]	; 0x24
 8006388:	2320      	movs	r3, #32
 800638a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800638e:	2330      	movs	r3, #48	; 0x30
 8006390:	f04f 0901 	mov.w	r9, #1
 8006394:	f8cd 800c 	str.w	r8, [sp, #12]
 8006398:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006558 <_vfiprintf_r+0x24c>
 800639c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063a0:	4623      	mov	r3, r4
 80063a2:	469a      	mov	sl, r3
 80063a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063a8:	b10a      	cbz	r2, 80063ae <_vfiprintf_r+0xa2>
 80063aa:	2a25      	cmp	r2, #37	; 0x25
 80063ac:	d1f9      	bne.n	80063a2 <_vfiprintf_r+0x96>
 80063ae:	ebba 0b04 	subs.w	fp, sl, r4
 80063b2:	d00b      	beq.n	80063cc <_vfiprintf_r+0xc0>
 80063b4:	465b      	mov	r3, fp
 80063b6:	4622      	mov	r2, r4
 80063b8:	4629      	mov	r1, r5
 80063ba:	4630      	mov	r0, r6
 80063bc:	f7ff ff93 	bl	80062e6 <__sfputs_r>
 80063c0:	3001      	adds	r0, #1
 80063c2:	f000 80aa 	beq.w	800651a <_vfiprintf_r+0x20e>
 80063c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063c8:	445a      	add	r2, fp
 80063ca:	9209      	str	r2, [sp, #36]	; 0x24
 80063cc:	f89a 3000 	ldrb.w	r3, [sl]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 80a2 	beq.w	800651a <_vfiprintf_r+0x20e>
 80063d6:	2300      	movs	r3, #0
 80063d8:	f04f 32ff 	mov.w	r2, #4294967295
 80063dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063e0:	f10a 0a01 	add.w	sl, sl, #1
 80063e4:	9304      	str	r3, [sp, #16]
 80063e6:	9307      	str	r3, [sp, #28]
 80063e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063ec:	931a      	str	r3, [sp, #104]	; 0x68
 80063ee:	4654      	mov	r4, sl
 80063f0:	2205      	movs	r2, #5
 80063f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063f6:	4858      	ldr	r0, [pc, #352]	; (8006558 <_vfiprintf_r+0x24c>)
 80063f8:	f7ff f914 	bl	8005624 <memchr>
 80063fc:	9a04      	ldr	r2, [sp, #16]
 80063fe:	b9d8      	cbnz	r0, 8006438 <_vfiprintf_r+0x12c>
 8006400:	06d1      	lsls	r1, r2, #27
 8006402:	bf44      	itt	mi
 8006404:	2320      	movmi	r3, #32
 8006406:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800640a:	0713      	lsls	r3, r2, #28
 800640c:	bf44      	itt	mi
 800640e:	232b      	movmi	r3, #43	; 0x2b
 8006410:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006414:	f89a 3000 	ldrb.w	r3, [sl]
 8006418:	2b2a      	cmp	r3, #42	; 0x2a
 800641a:	d015      	beq.n	8006448 <_vfiprintf_r+0x13c>
 800641c:	4654      	mov	r4, sl
 800641e:	2000      	movs	r0, #0
 8006420:	f04f 0c0a 	mov.w	ip, #10
 8006424:	9a07      	ldr	r2, [sp, #28]
 8006426:	4621      	mov	r1, r4
 8006428:	f811 3b01 	ldrb.w	r3, [r1], #1
 800642c:	3b30      	subs	r3, #48	; 0x30
 800642e:	2b09      	cmp	r3, #9
 8006430:	d94e      	bls.n	80064d0 <_vfiprintf_r+0x1c4>
 8006432:	b1b0      	cbz	r0, 8006462 <_vfiprintf_r+0x156>
 8006434:	9207      	str	r2, [sp, #28]
 8006436:	e014      	b.n	8006462 <_vfiprintf_r+0x156>
 8006438:	eba0 0308 	sub.w	r3, r0, r8
 800643c:	fa09 f303 	lsl.w	r3, r9, r3
 8006440:	4313      	orrs	r3, r2
 8006442:	46a2      	mov	sl, r4
 8006444:	9304      	str	r3, [sp, #16]
 8006446:	e7d2      	b.n	80063ee <_vfiprintf_r+0xe2>
 8006448:	9b03      	ldr	r3, [sp, #12]
 800644a:	1d19      	adds	r1, r3, #4
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	9103      	str	r1, [sp, #12]
 8006450:	2b00      	cmp	r3, #0
 8006452:	bfbb      	ittet	lt
 8006454:	425b      	neglt	r3, r3
 8006456:	f042 0202 	orrlt.w	r2, r2, #2
 800645a:	9307      	strge	r3, [sp, #28]
 800645c:	9307      	strlt	r3, [sp, #28]
 800645e:	bfb8      	it	lt
 8006460:	9204      	strlt	r2, [sp, #16]
 8006462:	7823      	ldrb	r3, [r4, #0]
 8006464:	2b2e      	cmp	r3, #46	; 0x2e
 8006466:	d10c      	bne.n	8006482 <_vfiprintf_r+0x176>
 8006468:	7863      	ldrb	r3, [r4, #1]
 800646a:	2b2a      	cmp	r3, #42	; 0x2a
 800646c:	d135      	bne.n	80064da <_vfiprintf_r+0x1ce>
 800646e:	9b03      	ldr	r3, [sp, #12]
 8006470:	3402      	adds	r4, #2
 8006472:	1d1a      	adds	r2, r3, #4
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	9203      	str	r2, [sp, #12]
 8006478:	2b00      	cmp	r3, #0
 800647a:	bfb8      	it	lt
 800647c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006480:	9305      	str	r3, [sp, #20]
 8006482:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006568 <_vfiprintf_r+0x25c>
 8006486:	2203      	movs	r2, #3
 8006488:	4650      	mov	r0, sl
 800648a:	7821      	ldrb	r1, [r4, #0]
 800648c:	f7ff f8ca 	bl	8005624 <memchr>
 8006490:	b140      	cbz	r0, 80064a4 <_vfiprintf_r+0x198>
 8006492:	2340      	movs	r3, #64	; 0x40
 8006494:	eba0 000a 	sub.w	r0, r0, sl
 8006498:	fa03 f000 	lsl.w	r0, r3, r0
 800649c:	9b04      	ldr	r3, [sp, #16]
 800649e:	3401      	adds	r4, #1
 80064a0:	4303      	orrs	r3, r0
 80064a2:	9304      	str	r3, [sp, #16]
 80064a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064a8:	2206      	movs	r2, #6
 80064aa:	482c      	ldr	r0, [pc, #176]	; (800655c <_vfiprintf_r+0x250>)
 80064ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064b0:	f7ff f8b8 	bl	8005624 <memchr>
 80064b4:	2800      	cmp	r0, #0
 80064b6:	d03f      	beq.n	8006538 <_vfiprintf_r+0x22c>
 80064b8:	4b29      	ldr	r3, [pc, #164]	; (8006560 <_vfiprintf_r+0x254>)
 80064ba:	bb1b      	cbnz	r3, 8006504 <_vfiprintf_r+0x1f8>
 80064bc:	9b03      	ldr	r3, [sp, #12]
 80064be:	3307      	adds	r3, #7
 80064c0:	f023 0307 	bic.w	r3, r3, #7
 80064c4:	3308      	adds	r3, #8
 80064c6:	9303      	str	r3, [sp, #12]
 80064c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ca:	443b      	add	r3, r7
 80064cc:	9309      	str	r3, [sp, #36]	; 0x24
 80064ce:	e767      	b.n	80063a0 <_vfiprintf_r+0x94>
 80064d0:	460c      	mov	r4, r1
 80064d2:	2001      	movs	r0, #1
 80064d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80064d8:	e7a5      	b.n	8006426 <_vfiprintf_r+0x11a>
 80064da:	2300      	movs	r3, #0
 80064dc:	f04f 0c0a 	mov.w	ip, #10
 80064e0:	4619      	mov	r1, r3
 80064e2:	3401      	adds	r4, #1
 80064e4:	9305      	str	r3, [sp, #20]
 80064e6:	4620      	mov	r0, r4
 80064e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064ec:	3a30      	subs	r2, #48	; 0x30
 80064ee:	2a09      	cmp	r2, #9
 80064f0:	d903      	bls.n	80064fa <_vfiprintf_r+0x1ee>
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d0c5      	beq.n	8006482 <_vfiprintf_r+0x176>
 80064f6:	9105      	str	r1, [sp, #20]
 80064f8:	e7c3      	b.n	8006482 <_vfiprintf_r+0x176>
 80064fa:	4604      	mov	r4, r0
 80064fc:	2301      	movs	r3, #1
 80064fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006502:	e7f0      	b.n	80064e6 <_vfiprintf_r+0x1da>
 8006504:	ab03      	add	r3, sp, #12
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	462a      	mov	r2, r5
 800650a:	4630      	mov	r0, r6
 800650c:	4b15      	ldr	r3, [pc, #84]	; (8006564 <_vfiprintf_r+0x258>)
 800650e:	a904      	add	r1, sp, #16
 8006510:	f7fd fd8e 	bl	8004030 <_printf_float>
 8006514:	4607      	mov	r7, r0
 8006516:	1c78      	adds	r0, r7, #1
 8006518:	d1d6      	bne.n	80064c8 <_vfiprintf_r+0x1bc>
 800651a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800651c:	07d9      	lsls	r1, r3, #31
 800651e:	d405      	bmi.n	800652c <_vfiprintf_r+0x220>
 8006520:	89ab      	ldrh	r3, [r5, #12]
 8006522:	059a      	lsls	r2, r3, #22
 8006524:	d402      	bmi.n	800652c <_vfiprintf_r+0x220>
 8006526:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006528:	f000 faaf 	bl	8006a8a <__retarget_lock_release_recursive>
 800652c:	89ab      	ldrh	r3, [r5, #12]
 800652e:	065b      	lsls	r3, r3, #25
 8006530:	f53f af12 	bmi.w	8006358 <_vfiprintf_r+0x4c>
 8006534:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006536:	e711      	b.n	800635c <_vfiprintf_r+0x50>
 8006538:	ab03      	add	r3, sp, #12
 800653a:	9300      	str	r3, [sp, #0]
 800653c:	462a      	mov	r2, r5
 800653e:	4630      	mov	r0, r6
 8006540:	4b08      	ldr	r3, [pc, #32]	; (8006564 <_vfiprintf_r+0x258>)
 8006542:	a904      	add	r1, sp, #16
 8006544:	f7fe f810 	bl	8004568 <_printf_i>
 8006548:	e7e4      	b.n	8006514 <_vfiprintf_r+0x208>
 800654a:	bf00      	nop
 800654c:	08007154 	.word	0x08007154
 8006550:	08007174 	.word	0x08007174
 8006554:	08007134 	.word	0x08007134
 8006558:	080070dc 	.word	0x080070dc
 800655c:	080070e6 	.word	0x080070e6
 8006560:	08004031 	.word	0x08004031
 8006564:	080062e7 	.word	0x080062e7
 8006568:	080070e2 	.word	0x080070e2

0800656c <__swbuf_r>:
 800656c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800656e:	460e      	mov	r6, r1
 8006570:	4614      	mov	r4, r2
 8006572:	4605      	mov	r5, r0
 8006574:	b118      	cbz	r0, 800657e <__swbuf_r+0x12>
 8006576:	6983      	ldr	r3, [r0, #24]
 8006578:	b90b      	cbnz	r3, 800657e <__swbuf_r+0x12>
 800657a:	f000 f9e7 	bl	800694c <__sinit>
 800657e:	4b21      	ldr	r3, [pc, #132]	; (8006604 <__swbuf_r+0x98>)
 8006580:	429c      	cmp	r4, r3
 8006582:	d12b      	bne.n	80065dc <__swbuf_r+0x70>
 8006584:	686c      	ldr	r4, [r5, #4]
 8006586:	69a3      	ldr	r3, [r4, #24]
 8006588:	60a3      	str	r3, [r4, #8]
 800658a:	89a3      	ldrh	r3, [r4, #12]
 800658c:	071a      	lsls	r2, r3, #28
 800658e:	d52f      	bpl.n	80065f0 <__swbuf_r+0x84>
 8006590:	6923      	ldr	r3, [r4, #16]
 8006592:	b36b      	cbz	r3, 80065f0 <__swbuf_r+0x84>
 8006594:	6923      	ldr	r3, [r4, #16]
 8006596:	6820      	ldr	r0, [r4, #0]
 8006598:	b2f6      	uxtb	r6, r6
 800659a:	1ac0      	subs	r0, r0, r3
 800659c:	6963      	ldr	r3, [r4, #20]
 800659e:	4637      	mov	r7, r6
 80065a0:	4283      	cmp	r3, r0
 80065a2:	dc04      	bgt.n	80065ae <__swbuf_r+0x42>
 80065a4:	4621      	mov	r1, r4
 80065a6:	4628      	mov	r0, r5
 80065a8:	f000 f93c 	bl	8006824 <_fflush_r>
 80065ac:	bb30      	cbnz	r0, 80065fc <__swbuf_r+0x90>
 80065ae:	68a3      	ldr	r3, [r4, #8]
 80065b0:	3001      	adds	r0, #1
 80065b2:	3b01      	subs	r3, #1
 80065b4:	60a3      	str	r3, [r4, #8]
 80065b6:	6823      	ldr	r3, [r4, #0]
 80065b8:	1c5a      	adds	r2, r3, #1
 80065ba:	6022      	str	r2, [r4, #0]
 80065bc:	701e      	strb	r6, [r3, #0]
 80065be:	6963      	ldr	r3, [r4, #20]
 80065c0:	4283      	cmp	r3, r0
 80065c2:	d004      	beq.n	80065ce <__swbuf_r+0x62>
 80065c4:	89a3      	ldrh	r3, [r4, #12]
 80065c6:	07db      	lsls	r3, r3, #31
 80065c8:	d506      	bpl.n	80065d8 <__swbuf_r+0x6c>
 80065ca:	2e0a      	cmp	r6, #10
 80065cc:	d104      	bne.n	80065d8 <__swbuf_r+0x6c>
 80065ce:	4621      	mov	r1, r4
 80065d0:	4628      	mov	r0, r5
 80065d2:	f000 f927 	bl	8006824 <_fflush_r>
 80065d6:	b988      	cbnz	r0, 80065fc <__swbuf_r+0x90>
 80065d8:	4638      	mov	r0, r7
 80065da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065dc:	4b0a      	ldr	r3, [pc, #40]	; (8006608 <__swbuf_r+0x9c>)
 80065de:	429c      	cmp	r4, r3
 80065e0:	d101      	bne.n	80065e6 <__swbuf_r+0x7a>
 80065e2:	68ac      	ldr	r4, [r5, #8]
 80065e4:	e7cf      	b.n	8006586 <__swbuf_r+0x1a>
 80065e6:	4b09      	ldr	r3, [pc, #36]	; (800660c <__swbuf_r+0xa0>)
 80065e8:	429c      	cmp	r4, r3
 80065ea:	bf08      	it	eq
 80065ec:	68ec      	ldreq	r4, [r5, #12]
 80065ee:	e7ca      	b.n	8006586 <__swbuf_r+0x1a>
 80065f0:	4621      	mov	r1, r4
 80065f2:	4628      	mov	r0, r5
 80065f4:	f000 f81a 	bl	800662c <__swsetup_r>
 80065f8:	2800      	cmp	r0, #0
 80065fa:	d0cb      	beq.n	8006594 <__swbuf_r+0x28>
 80065fc:	f04f 37ff 	mov.w	r7, #4294967295
 8006600:	e7ea      	b.n	80065d8 <__swbuf_r+0x6c>
 8006602:	bf00      	nop
 8006604:	08007154 	.word	0x08007154
 8006608:	08007174 	.word	0x08007174
 800660c:	08007134 	.word	0x08007134

08006610 <__ascii_wctomb>:
 8006610:	4603      	mov	r3, r0
 8006612:	4608      	mov	r0, r1
 8006614:	b141      	cbz	r1, 8006628 <__ascii_wctomb+0x18>
 8006616:	2aff      	cmp	r2, #255	; 0xff
 8006618:	d904      	bls.n	8006624 <__ascii_wctomb+0x14>
 800661a:	228a      	movs	r2, #138	; 0x8a
 800661c:	f04f 30ff 	mov.w	r0, #4294967295
 8006620:	601a      	str	r2, [r3, #0]
 8006622:	4770      	bx	lr
 8006624:	2001      	movs	r0, #1
 8006626:	700a      	strb	r2, [r1, #0]
 8006628:	4770      	bx	lr
	...

0800662c <__swsetup_r>:
 800662c:	4b32      	ldr	r3, [pc, #200]	; (80066f8 <__swsetup_r+0xcc>)
 800662e:	b570      	push	{r4, r5, r6, lr}
 8006630:	681d      	ldr	r5, [r3, #0]
 8006632:	4606      	mov	r6, r0
 8006634:	460c      	mov	r4, r1
 8006636:	b125      	cbz	r5, 8006642 <__swsetup_r+0x16>
 8006638:	69ab      	ldr	r3, [r5, #24]
 800663a:	b913      	cbnz	r3, 8006642 <__swsetup_r+0x16>
 800663c:	4628      	mov	r0, r5
 800663e:	f000 f985 	bl	800694c <__sinit>
 8006642:	4b2e      	ldr	r3, [pc, #184]	; (80066fc <__swsetup_r+0xd0>)
 8006644:	429c      	cmp	r4, r3
 8006646:	d10f      	bne.n	8006668 <__swsetup_r+0x3c>
 8006648:	686c      	ldr	r4, [r5, #4]
 800664a:	89a3      	ldrh	r3, [r4, #12]
 800664c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006650:	0719      	lsls	r1, r3, #28
 8006652:	d42c      	bmi.n	80066ae <__swsetup_r+0x82>
 8006654:	06dd      	lsls	r5, r3, #27
 8006656:	d411      	bmi.n	800667c <__swsetup_r+0x50>
 8006658:	2309      	movs	r3, #9
 800665a:	6033      	str	r3, [r6, #0]
 800665c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006660:	f04f 30ff 	mov.w	r0, #4294967295
 8006664:	81a3      	strh	r3, [r4, #12]
 8006666:	e03e      	b.n	80066e6 <__swsetup_r+0xba>
 8006668:	4b25      	ldr	r3, [pc, #148]	; (8006700 <__swsetup_r+0xd4>)
 800666a:	429c      	cmp	r4, r3
 800666c:	d101      	bne.n	8006672 <__swsetup_r+0x46>
 800666e:	68ac      	ldr	r4, [r5, #8]
 8006670:	e7eb      	b.n	800664a <__swsetup_r+0x1e>
 8006672:	4b24      	ldr	r3, [pc, #144]	; (8006704 <__swsetup_r+0xd8>)
 8006674:	429c      	cmp	r4, r3
 8006676:	bf08      	it	eq
 8006678:	68ec      	ldreq	r4, [r5, #12]
 800667a:	e7e6      	b.n	800664a <__swsetup_r+0x1e>
 800667c:	0758      	lsls	r0, r3, #29
 800667e:	d512      	bpl.n	80066a6 <__swsetup_r+0x7a>
 8006680:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006682:	b141      	cbz	r1, 8006696 <__swsetup_r+0x6a>
 8006684:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006688:	4299      	cmp	r1, r3
 800668a:	d002      	beq.n	8006692 <__swsetup_r+0x66>
 800668c:	4630      	mov	r0, r6
 800668e:	f7ff fb75 	bl	8005d7c <_free_r>
 8006692:	2300      	movs	r3, #0
 8006694:	6363      	str	r3, [r4, #52]	; 0x34
 8006696:	89a3      	ldrh	r3, [r4, #12]
 8006698:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800669c:	81a3      	strh	r3, [r4, #12]
 800669e:	2300      	movs	r3, #0
 80066a0:	6063      	str	r3, [r4, #4]
 80066a2:	6923      	ldr	r3, [r4, #16]
 80066a4:	6023      	str	r3, [r4, #0]
 80066a6:	89a3      	ldrh	r3, [r4, #12]
 80066a8:	f043 0308 	orr.w	r3, r3, #8
 80066ac:	81a3      	strh	r3, [r4, #12]
 80066ae:	6923      	ldr	r3, [r4, #16]
 80066b0:	b94b      	cbnz	r3, 80066c6 <__swsetup_r+0x9a>
 80066b2:	89a3      	ldrh	r3, [r4, #12]
 80066b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80066b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066bc:	d003      	beq.n	80066c6 <__swsetup_r+0x9a>
 80066be:	4621      	mov	r1, r4
 80066c0:	4630      	mov	r0, r6
 80066c2:	f000 fa07 	bl	8006ad4 <__smakebuf_r>
 80066c6:	89a0      	ldrh	r0, [r4, #12]
 80066c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066cc:	f010 0301 	ands.w	r3, r0, #1
 80066d0:	d00a      	beq.n	80066e8 <__swsetup_r+0xbc>
 80066d2:	2300      	movs	r3, #0
 80066d4:	60a3      	str	r3, [r4, #8]
 80066d6:	6963      	ldr	r3, [r4, #20]
 80066d8:	425b      	negs	r3, r3
 80066da:	61a3      	str	r3, [r4, #24]
 80066dc:	6923      	ldr	r3, [r4, #16]
 80066de:	b943      	cbnz	r3, 80066f2 <__swsetup_r+0xc6>
 80066e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80066e4:	d1ba      	bne.n	800665c <__swsetup_r+0x30>
 80066e6:	bd70      	pop	{r4, r5, r6, pc}
 80066e8:	0781      	lsls	r1, r0, #30
 80066ea:	bf58      	it	pl
 80066ec:	6963      	ldrpl	r3, [r4, #20]
 80066ee:	60a3      	str	r3, [r4, #8]
 80066f0:	e7f4      	b.n	80066dc <__swsetup_r+0xb0>
 80066f2:	2000      	movs	r0, #0
 80066f4:	e7f7      	b.n	80066e6 <__swsetup_r+0xba>
 80066f6:	bf00      	nop
 80066f8:	2000001c 	.word	0x2000001c
 80066fc:	08007154 	.word	0x08007154
 8006700:	08007174 	.word	0x08007174
 8006704:	08007134 	.word	0x08007134

08006708 <abort>:
 8006708:	2006      	movs	r0, #6
 800670a:	b508      	push	{r3, lr}
 800670c:	f000 fa52 	bl	8006bb4 <raise>
 8006710:	2001      	movs	r0, #1
 8006712:	f7fb fda5 	bl	8002260 <_exit>
	...

08006718 <__sflush_r>:
 8006718:	898a      	ldrh	r2, [r1, #12]
 800671a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800671e:	4605      	mov	r5, r0
 8006720:	0710      	lsls	r0, r2, #28
 8006722:	460c      	mov	r4, r1
 8006724:	d458      	bmi.n	80067d8 <__sflush_r+0xc0>
 8006726:	684b      	ldr	r3, [r1, #4]
 8006728:	2b00      	cmp	r3, #0
 800672a:	dc05      	bgt.n	8006738 <__sflush_r+0x20>
 800672c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800672e:	2b00      	cmp	r3, #0
 8006730:	dc02      	bgt.n	8006738 <__sflush_r+0x20>
 8006732:	2000      	movs	r0, #0
 8006734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006738:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800673a:	2e00      	cmp	r6, #0
 800673c:	d0f9      	beq.n	8006732 <__sflush_r+0x1a>
 800673e:	2300      	movs	r3, #0
 8006740:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006744:	682f      	ldr	r7, [r5, #0]
 8006746:	602b      	str	r3, [r5, #0]
 8006748:	d032      	beq.n	80067b0 <__sflush_r+0x98>
 800674a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800674c:	89a3      	ldrh	r3, [r4, #12]
 800674e:	075a      	lsls	r2, r3, #29
 8006750:	d505      	bpl.n	800675e <__sflush_r+0x46>
 8006752:	6863      	ldr	r3, [r4, #4]
 8006754:	1ac0      	subs	r0, r0, r3
 8006756:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006758:	b10b      	cbz	r3, 800675e <__sflush_r+0x46>
 800675a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800675c:	1ac0      	subs	r0, r0, r3
 800675e:	2300      	movs	r3, #0
 8006760:	4602      	mov	r2, r0
 8006762:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006764:	4628      	mov	r0, r5
 8006766:	6a21      	ldr	r1, [r4, #32]
 8006768:	47b0      	blx	r6
 800676a:	1c43      	adds	r3, r0, #1
 800676c:	89a3      	ldrh	r3, [r4, #12]
 800676e:	d106      	bne.n	800677e <__sflush_r+0x66>
 8006770:	6829      	ldr	r1, [r5, #0]
 8006772:	291d      	cmp	r1, #29
 8006774:	d82c      	bhi.n	80067d0 <__sflush_r+0xb8>
 8006776:	4a2a      	ldr	r2, [pc, #168]	; (8006820 <__sflush_r+0x108>)
 8006778:	40ca      	lsrs	r2, r1
 800677a:	07d6      	lsls	r6, r2, #31
 800677c:	d528      	bpl.n	80067d0 <__sflush_r+0xb8>
 800677e:	2200      	movs	r2, #0
 8006780:	6062      	str	r2, [r4, #4]
 8006782:	6922      	ldr	r2, [r4, #16]
 8006784:	04d9      	lsls	r1, r3, #19
 8006786:	6022      	str	r2, [r4, #0]
 8006788:	d504      	bpl.n	8006794 <__sflush_r+0x7c>
 800678a:	1c42      	adds	r2, r0, #1
 800678c:	d101      	bne.n	8006792 <__sflush_r+0x7a>
 800678e:	682b      	ldr	r3, [r5, #0]
 8006790:	b903      	cbnz	r3, 8006794 <__sflush_r+0x7c>
 8006792:	6560      	str	r0, [r4, #84]	; 0x54
 8006794:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006796:	602f      	str	r7, [r5, #0]
 8006798:	2900      	cmp	r1, #0
 800679a:	d0ca      	beq.n	8006732 <__sflush_r+0x1a>
 800679c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067a0:	4299      	cmp	r1, r3
 80067a2:	d002      	beq.n	80067aa <__sflush_r+0x92>
 80067a4:	4628      	mov	r0, r5
 80067a6:	f7ff fae9 	bl	8005d7c <_free_r>
 80067aa:	2000      	movs	r0, #0
 80067ac:	6360      	str	r0, [r4, #52]	; 0x34
 80067ae:	e7c1      	b.n	8006734 <__sflush_r+0x1c>
 80067b0:	6a21      	ldr	r1, [r4, #32]
 80067b2:	2301      	movs	r3, #1
 80067b4:	4628      	mov	r0, r5
 80067b6:	47b0      	blx	r6
 80067b8:	1c41      	adds	r1, r0, #1
 80067ba:	d1c7      	bne.n	800674c <__sflush_r+0x34>
 80067bc:	682b      	ldr	r3, [r5, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d0c4      	beq.n	800674c <__sflush_r+0x34>
 80067c2:	2b1d      	cmp	r3, #29
 80067c4:	d001      	beq.n	80067ca <__sflush_r+0xb2>
 80067c6:	2b16      	cmp	r3, #22
 80067c8:	d101      	bne.n	80067ce <__sflush_r+0xb6>
 80067ca:	602f      	str	r7, [r5, #0]
 80067cc:	e7b1      	b.n	8006732 <__sflush_r+0x1a>
 80067ce:	89a3      	ldrh	r3, [r4, #12]
 80067d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067d4:	81a3      	strh	r3, [r4, #12]
 80067d6:	e7ad      	b.n	8006734 <__sflush_r+0x1c>
 80067d8:	690f      	ldr	r7, [r1, #16]
 80067da:	2f00      	cmp	r7, #0
 80067dc:	d0a9      	beq.n	8006732 <__sflush_r+0x1a>
 80067de:	0793      	lsls	r3, r2, #30
 80067e0:	bf18      	it	ne
 80067e2:	2300      	movne	r3, #0
 80067e4:	680e      	ldr	r6, [r1, #0]
 80067e6:	bf08      	it	eq
 80067e8:	694b      	ldreq	r3, [r1, #20]
 80067ea:	eba6 0807 	sub.w	r8, r6, r7
 80067ee:	600f      	str	r7, [r1, #0]
 80067f0:	608b      	str	r3, [r1, #8]
 80067f2:	f1b8 0f00 	cmp.w	r8, #0
 80067f6:	dd9c      	ble.n	8006732 <__sflush_r+0x1a>
 80067f8:	4643      	mov	r3, r8
 80067fa:	463a      	mov	r2, r7
 80067fc:	4628      	mov	r0, r5
 80067fe:	6a21      	ldr	r1, [r4, #32]
 8006800:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006802:	47b0      	blx	r6
 8006804:	2800      	cmp	r0, #0
 8006806:	dc06      	bgt.n	8006816 <__sflush_r+0xfe>
 8006808:	89a3      	ldrh	r3, [r4, #12]
 800680a:	f04f 30ff 	mov.w	r0, #4294967295
 800680e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006812:	81a3      	strh	r3, [r4, #12]
 8006814:	e78e      	b.n	8006734 <__sflush_r+0x1c>
 8006816:	4407      	add	r7, r0
 8006818:	eba8 0800 	sub.w	r8, r8, r0
 800681c:	e7e9      	b.n	80067f2 <__sflush_r+0xda>
 800681e:	bf00      	nop
 8006820:	20400001 	.word	0x20400001

08006824 <_fflush_r>:
 8006824:	b538      	push	{r3, r4, r5, lr}
 8006826:	690b      	ldr	r3, [r1, #16]
 8006828:	4605      	mov	r5, r0
 800682a:	460c      	mov	r4, r1
 800682c:	b913      	cbnz	r3, 8006834 <_fflush_r+0x10>
 800682e:	2500      	movs	r5, #0
 8006830:	4628      	mov	r0, r5
 8006832:	bd38      	pop	{r3, r4, r5, pc}
 8006834:	b118      	cbz	r0, 800683e <_fflush_r+0x1a>
 8006836:	6983      	ldr	r3, [r0, #24]
 8006838:	b90b      	cbnz	r3, 800683e <_fflush_r+0x1a>
 800683a:	f000 f887 	bl	800694c <__sinit>
 800683e:	4b14      	ldr	r3, [pc, #80]	; (8006890 <_fflush_r+0x6c>)
 8006840:	429c      	cmp	r4, r3
 8006842:	d11b      	bne.n	800687c <_fflush_r+0x58>
 8006844:	686c      	ldr	r4, [r5, #4]
 8006846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d0ef      	beq.n	800682e <_fflush_r+0xa>
 800684e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006850:	07d0      	lsls	r0, r2, #31
 8006852:	d404      	bmi.n	800685e <_fflush_r+0x3a>
 8006854:	0599      	lsls	r1, r3, #22
 8006856:	d402      	bmi.n	800685e <_fflush_r+0x3a>
 8006858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800685a:	f000 f915 	bl	8006a88 <__retarget_lock_acquire_recursive>
 800685e:	4628      	mov	r0, r5
 8006860:	4621      	mov	r1, r4
 8006862:	f7ff ff59 	bl	8006718 <__sflush_r>
 8006866:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006868:	4605      	mov	r5, r0
 800686a:	07da      	lsls	r2, r3, #31
 800686c:	d4e0      	bmi.n	8006830 <_fflush_r+0xc>
 800686e:	89a3      	ldrh	r3, [r4, #12]
 8006870:	059b      	lsls	r3, r3, #22
 8006872:	d4dd      	bmi.n	8006830 <_fflush_r+0xc>
 8006874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006876:	f000 f908 	bl	8006a8a <__retarget_lock_release_recursive>
 800687a:	e7d9      	b.n	8006830 <_fflush_r+0xc>
 800687c:	4b05      	ldr	r3, [pc, #20]	; (8006894 <_fflush_r+0x70>)
 800687e:	429c      	cmp	r4, r3
 8006880:	d101      	bne.n	8006886 <_fflush_r+0x62>
 8006882:	68ac      	ldr	r4, [r5, #8]
 8006884:	e7df      	b.n	8006846 <_fflush_r+0x22>
 8006886:	4b04      	ldr	r3, [pc, #16]	; (8006898 <_fflush_r+0x74>)
 8006888:	429c      	cmp	r4, r3
 800688a:	bf08      	it	eq
 800688c:	68ec      	ldreq	r4, [r5, #12]
 800688e:	e7da      	b.n	8006846 <_fflush_r+0x22>
 8006890:	08007154 	.word	0x08007154
 8006894:	08007174 	.word	0x08007174
 8006898:	08007134 	.word	0x08007134

0800689c <std>:
 800689c:	2300      	movs	r3, #0
 800689e:	b510      	push	{r4, lr}
 80068a0:	4604      	mov	r4, r0
 80068a2:	e9c0 3300 	strd	r3, r3, [r0]
 80068a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068aa:	6083      	str	r3, [r0, #8]
 80068ac:	8181      	strh	r1, [r0, #12]
 80068ae:	6643      	str	r3, [r0, #100]	; 0x64
 80068b0:	81c2      	strh	r2, [r0, #14]
 80068b2:	6183      	str	r3, [r0, #24]
 80068b4:	4619      	mov	r1, r3
 80068b6:	2208      	movs	r2, #8
 80068b8:	305c      	adds	r0, #92	; 0x5c
 80068ba:	f7fd fb13 	bl	8003ee4 <memset>
 80068be:	4b05      	ldr	r3, [pc, #20]	; (80068d4 <std+0x38>)
 80068c0:	6224      	str	r4, [r4, #32]
 80068c2:	6263      	str	r3, [r4, #36]	; 0x24
 80068c4:	4b04      	ldr	r3, [pc, #16]	; (80068d8 <std+0x3c>)
 80068c6:	62a3      	str	r3, [r4, #40]	; 0x28
 80068c8:	4b04      	ldr	r3, [pc, #16]	; (80068dc <std+0x40>)
 80068ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068cc:	4b04      	ldr	r3, [pc, #16]	; (80068e0 <std+0x44>)
 80068ce:	6323      	str	r3, [r4, #48]	; 0x30
 80068d0:	bd10      	pop	{r4, pc}
 80068d2:	bf00      	nop
 80068d4:	08006bed 	.word	0x08006bed
 80068d8:	08006c0f 	.word	0x08006c0f
 80068dc:	08006c47 	.word	0x08006c47
 80068e0:	08006c6b 	.word	0x08006c6b

080068e4 <_cleanup_r>:
 80068e4:	4901      	ldr	r1, [pc, #4]	; (80068ec <_cleanup_r+0x8>)
 80068e6:	f000 b8af 	b.w	8006a48 <_fwalk_reent>
 80068ea:	bf00      	nop
 80068ec:	08006825 	.word	0x08006825

080068f0 <__sfmoreglue>:
 80068f0:	b570      	push	{r4, r5, r6, lr}
 80068f2:	2568      	movs	r5, #104	; 0x68
 80068f4:	1e4a      	subs	r2, r1, #1
 80068f6:	4355      	muls	r5, r2
 80068f8:	460e      	mov	r6, r1
 80068fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80068fe:	f7ff fa89 	bl	8005e14 <_malloc_r>
 8006902:	4604      	mov	r4, r0
 8006904:	b140      	cbz	r0, 8006918 <__sfmoreglue+0x28>
 8006906:	2100      	movs	r1, #0
 8006908:	e9c0 1600 	strd	r1, r6, [r0]
 800690c:	300c      	adds	r0, #12
 800690e:	60a0      	str	r0, [r4, #8]
 8006910:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006914:	f7fd fae6 	bl	8003ee4 <memset>
 8006918:	4620      	mov	r0, r4
 800691a:	bd70      	pop	{r4, r5, r6, pc}

0800691c <__sfp_lock_acquire>:
 800691c:	4801      	ldr	r0, [pc, #4]	; (8006924 <__sfp_lock_acquire+0x8>)
 800691e:	f000 b8b3 	b.w	8006a88 <__retarget_lock_acquire_recursive>
 8006922:	bf00      	nop
 8006924:	200003ec 	.word	0x200003ec

08006928 <__sfp_lock_release>:
 8006928:	4801      	ldr	r0, [pc, #4]	; (8006930 <__sfp_lock_release+0x8>)
 800692a:	f000 b8ae 	b.w	8006a8a <__retarget_lock_release_recursive>
 800692e:	bf00      	nop
 8006930:	200003ec 	.word	0x200003ec

08006934 <__sinit_lock_acquire>:
 8006934:	4801      	ldr	r0, [pc, #4]	; (800693c <__sinit_lock_acquire+0x8>)
 8006936:	f000 b8a7 	b.w	8006a88 <__retarget_lock_acquire_recursive>
 800693a:	bf00      	nop
 800693c:	200003e7 	.word	0x200003e7

08006940 <__sinit_lock_release>:
 8006940:	4801      	ldr	r0, [pc, #4]	; (8006948 <__sinit_lock_release+0x8>)
 8006942:	f000 b8a2 	b.w	8006a8a <__retarget_lock_release_recursive>
 8006946:	bf00      	nop
 8006948:	200003e7 	.word	0x200003e7

0800694c <__sinit>:
 800694c:	b510      	push	{r4, lr}
 800694e:	4604      	mov	r4, r0
 8006950:	f7ff fff0 	bl	8006934 <__sinit_lock_acquire>
 8006954:	69a3      	ldr	r3, [r4, #24]
 8006956:	b11b      	cbz	r3, 8006960 <__sinit+0x14>
 8006958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800695c:	f7ff bff0 	b.w	8006940 <__sinit_lock_release>
 8006960:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006964:	6523      	str	r3, [r4, #80]	; 0x50
 8006966:	4b13      	ldr	r3, [pc, #76]	; (80069b4 <__sinit+0x68>)
 8006968:	4a13      	ldr	r2, [pc, #76]	; (80069b8 <__sinit+0x6c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	62a2      	str	r2, [r4, #40]	; 0x28
 800696e:	42a3      	cmp	r3, r4
 8006970:	bf08      	it	eq
 8006972:	2301      	moveq	r3, #1
 8006974:	4620      	mov	r0, r4
 8006976:	bf08      	it	eq
 8006978:	61a3      	streq	r3, [r4, #24]
 800697a:	f000 f81f 	bl	80069bc <__sfp>
 800697e:	6060      	str	r0, [r4, #4]
 8006980:	4620      	mov	r0, r4
 8006982:	f000 f81b 	bl	80069bc <__sfp>
 8006986:	60a0      	str	r0, [r4, #8]
 8006988:	4620      	mov	r0, r4
 800698a:	f000 f817 	bl	80069bc <__sfp>
 800698e:	2200      	movs	r2, #0
 8006990:	2104      	movs	r1, #4
 8006992:	60e0      	str	r0, [r4, #12]
 8006994:	6860      	ldr	r0, [r4, #4]
 8006996:	f7ff ff81 	bl	800689c <std>
 800699a:	2201      	movs	r2, #1
 800699c:	2109      	movs	r1, #9
 800699e:	68a0      	ldr	r0, [r4, #8]
 80069a0:	f7ff ff7c 	bl	800689c <std>
 80069a4:	2202      	movs	r2, #2
 80069a6:	2112      	movs	r1, #18
 80069a8:	68e0      	ldr	r0, [r4, #12]
 80069aa:	f7ff ff77 	bl	800689c <std>
 80069ae:	2301      	movs	r3, #1
 80069b0:	61a3      	str	r3, [r4, #24]
 80069b2:	e7d1      	b.n	8006958 <__sinit+0xc>
 80069b4:	08006db0 	.word	0x08006db0
 80069b8:	080068e5 	.word	0x080068e5

080069bc <__sfp>:
 80069bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069be:	4607      	mov	r7, r0
 80069c0:	f7ff ffac 	bl	800691c <__sfp_lock_acquire>
 80069c4:	4b1e      	ldr	r3, [pc, #120]	; (8006a40 <__sfp+0x84>)
 80069c6:	681e      	ldr	r6, [r3, #0]
 80069c8:	69b3      	ldr	r3, [r6, #24]
 80069ca:	b913      	cbnz	r3, 80069d2 <__sfp+0x16>
 80069cc:	4630      	mov	r0, r6
 80069ce:	f7ff ffbd 	bl	800694c <__sinit>
 80069d2:	3648      	adds	r6, #72	; 0x48
 80069d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80069d8:	3b01      	subs	r3, #1
 80069da:	d503      	bpl.n	80069e4 <__sfp+0x28>
 80069dc:	6833      	ldr	r3, [r6, #0]
 80069de:	b30b      	cbz	r3, 8006a24 <__sfp+0x68>
 80069e0:	6836      	ldr	r6, [r6, #0]
 80069e2:	e7f7      	b.n	80069d4 <__sfp+0x18>
 80069e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80069e8:	b9d5      	cbnz	r5, 8006a20 <__sfp+0x64>
 80069ea:	4b16      	ldr	r3, [pc, #88]	; (8006a44 <__sfp+0x88>)
 80069ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80069f0:	60e3      	str	r3, [r4, #12]
 80069f2:	6665      	str	r5, [r4, #100]	; 0x64
 80069f4:	f000 f847 	bl	8006a86 <__retarget_lock_init_recursive>
 80069f8:	f7ff ff96 	bl	8006928 <__sfp_lock_release>
 80069fc:	2208      	movs	r2, #8
 80069fe:	4629      	mov	r1, r5
 8006a00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006a04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006a08:	6025      	str	r5, [r4, #0]
 8006a0a:	61a5      	str	r5, [r4, #24]
 8006a0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006a10:	f7fd fa68 	bl	8003ee4 <memset>
 8006a14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006a18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a20:	3468      	adds	r4, #104	; 0x68
 8006a22:	e7d9      	b.n	80069d8 <__sfp+0x1c>
 8006a24:	2104      	movs	r1, #4
 8006a26:	4638      	mov	r0, r7
 8006a28:	f7ff ff62 	bl	80068f0 <__sfmoreglue>
 8006a2c:	4604      	mov	r4, r0
 8006a2e:	6030      	str	r0, [r6, #0]
 8006a30:	2800      	cmp	r0, #0
 8006a32:	d1d5      	bne.n	80069e0 <__sfp+0x24>
 8006a34:	f7ff ff78 	bl	8006928 <__sfp_lock_release>
 8006a38:	230c      	movs	r3, #12
 8006a3a:	603b      	str	r3, [r7, #0]
 8006a3c:	e7ee      	b.n	8006a1c <__sfp+0x60>
 8006a3e:	bf00      	nop
 8006a40:	08006db0 	.word	0x08006db0
 8006a44:	ffff0001 	.word	0xffff0001

08006a48 <_fwalk_reent>:
 8006a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a4c:	4606      	mov	r6, r0
 8006a4e:	4688      	mov	r8, r1
 8006a50:	2700      	movs	r7, #0
 8006a52:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a5a:	f1b9 0901 	subs.w	r9, r9, #1
 8006a5e:	d505      	bpl.n	8006a6c <_fwalk_reent+0x24>
 8006a60:	6824      	ldr	r4, [r4, #0]
 8006a62:	2c00      	cmp	r4, #0
 8006a64:	d1f7      	bne.n	8006a56 <_fwalk_reent+0xe>
 8006a66:	4638      	mov	r0, r7
 8006a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a6c:	89ab      	ldrh	r3, [r5, #12]
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d907      	bls.n	8006a82 <_fwalk_reent+0x3a>
 8006a72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a76:	3301      	adds	r3, #1
 8006a78:	d003      	beq.n	8006a82 <_fwalk_reent+0x3a>
 8006a7a:	4629      	mov	r1, r5
 8006a7c:	4630      	mov	r0, r6
 8006a7e:	47c0      	blx	r8
 8006a80:	4307      	orrs	r7, r0
 8006a82:	3568      	adds	r5, #104	; 0x68
 8006a84:	e7e9      	b.n	8006a5a <_fwalk_reent+0x12>

08006a86 <__retarget_lock_init_recursive>:
 8006a86:	4770      	bx	lr

08006a88 <__retarget_lock_acquire_recursive>:
 8006a88:	4770      	bx	lr

08006a8a <__retarget_lock_release_recursive>:
 8006a8a:	4770      	bx	lr

08006a8c <__swhatbuf_r>:
 8006a8c:	b570      	push	{r4, r5, r6, lr}
 8006a8e:	460e      	mov	r6, r1
 8006a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a94:	4614      	mov	r4, r2
 8006a96:	2900      	cmp	r1, #0
 8006a98:	461d      	mov	r5, r3
 8006a9a:	b096      	sub	sp, #88	; 0x58
 8006a9c:	da07      	bge.n	8006aae <__swhatbuf_r+0x22>
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	602b      	str	r3, [r5, #0]
 8006aa2:	89b3      	ldrh	r3, [r6, #12]
 8006aa4:	061a      	lsls	r2, r3, #24
 8006aa6:	d410      	bmi.n	8006aca <__swhatbuf_r+0x3e>
 8006aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006aac:	e00e      	b.n	8006acc <__swhatbuf_r+0x40>
 8006aae:	466a      	mov	r2, sp
 8006ab0:	f000 f902 	bl	8006cb8 <_fstat_r>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	dbf2      	blt.n	8006a9e <__swhatbuf_r+0x12>
 8006ab8:	9a01      	ldr	r2, [sp, #4]
 8006aba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006abe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ac2:	425a      	negs	r2, r3
 8006ac4:	415a      	adcs	r2, r3
 8006ac6:	602a      	str	r2, [r5, #0]
 8006ac8:	e7ee      	b.n	8006aa8 <__swhatbuf_r+0x1c>
 8006aca:	2340      	movs	r3, #64	; 0x40
 8006acc:	2000      	movs	r0, #0
 8006ace:	6023      	str	r3, [r4, #0]
 8006ad0:	b016      	add	sp, #88	; 0x58
 8006ad2:	bd70      	pop	{r4, r5, r6, pc}

08006ad4 <__smakebuf_r>:
 8006ad4:	898b      	ldrh	r3, [r1, #12]
 8006ad6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ad8:	079d      	lsls	r5, r3, #30
 8006ada:	4606      	mov	r6, r0
 8006adc:	460c      	mov	r4, r1
 8006ade:	d507      	bpl.n	8006af0 <__smakebuf_r+0x1c>
 8006ae0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ae4:	6023      	str	r3, [r4, #0]
 8006ae6:	6123      	str	r3, [r4, #16]
 8006ae8:	2301      	movs	r3, #1
 8006aea:	6163      	str	r3, [r4, #20]
 8006aec:	b002      	add	sp, #8
 8006aee:	bd70      	pop	{r4, r5, r6, pc}
 8006af0:	466a      	mov	r2, sp
 8006af2:	ab01      	add	r3, sp, #4
 8006af4:	f7ff ffca 	bl	8006a8c <__swhatbuf_r>
 8006af8:	9900      	ldr	r1, [sp, #0]
 8006afa:	4605      	mov	r5, r0
 8006afc:	4630      	mov	r0, r6
 8006afe:	f7ff f989 	bl	8005e14 <_malloc_r>
 8006b02:	b948      	cbnz	r0, 8006b18 <__smakebuf_r+0x44>
 8006b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b08:	059a      	lsls	r2, r3, #22
 8006b0a:	d4ef      	bmi.n	8006aec <__smakebuf_r+0x18>
 8006b0c:	f023 0303 	bic.w	r3, r3, #3
 8006b10:	f043 0302 	orr.w	r3, r3, #2
 8006b14:	81a3      	strh	r3, [r4, #12]
 8006b16:	e7e3      	b.n	8006ae0 <__smakebuf_r+0xc>
 8006b18:	4b0d      	ldr	r3, [pc, #52]	; (8006b50 <__smakebuf_r+0x7c>)
 8006b1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006b1c:	89a3      	ldrh	r3, [r4, #12]
 8006b1e:	6020      	str	r0, [r4, #0]
 8006b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b24:	81a3      	strh	r3, [r4, #12]
 8006b26:	9b00      	ldr	r3, [sp, #0]
 8006b28:	6120      	str	r0, [r4, #16]
 8006b2a:	6163      	str	r3, [r4, #20]
 8006b2c:	9b01      	ldr	r3, [sp, #4]
 8006b2e:	b15b      	cbz	r3, 8006b48 <__smakebuf_r+0x74>
 8006b30:	4630      	mov	r0, r6
 8006b32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b36:	f000 f8d1 	bl	8006cdc <_isatty_r>
 8006b3a:	b128      	cbz	r0, 8006b48 <__smakebuf_r+0x74>
 8006b3c:	89a3      	ldrh	r3, [r4, #12]
 8006b3e:	f023 0303 	bic.w	r3, r3, #3
 8006b42:	f043 0301 	orr.w	r3, r3, #1
 8006b46:	81a3      	strh	r3, [r4, #12]
 8006b48:	89a0      	ldrh	r0, [r4, #12]
 8006b4a:	4305      	orrs	r5, r0
 8006b4c:	81a5      	strh	r5, [r4, #12]
 8006b4e:	e7cd      	b.n	8006aec <__smakebuf_r+0x18>
 8006b50:	080068e5 	.word	0x080068e5

08006b54 <_malloc_usable_size_r>:
 8006b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b58:	1f18      	subs	r0, r3, #4
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	bfbc      	itt	lt
 8006b5e:	580b      	ldrlt	r3, [r1, r0]
 8006b60:	18c0      	addlt	r0, r0, r3
 8006b62:	4770      	bx	lr

08006b64 <_raise_r>:
 8006b64:	291f      	cmp	r1, #31
 8006b66:	b538      	push	{r3, r4, r5, lr}
 8006b68:	4604      	mov	r4, r0
 8006b6a:	460d      	mov	r5, r1
 8006b6c:	d904      	bls.n	8006b78 <_raise_r+0x14>
 8006b6e:	2316      	movs	r3, #22
 8006b70:	6003      	str	r3, [r0, #0]
 8006b72:	f04f 30ff 	mov.w	r0, #4294967295
 8006b76:	bd38      	pop	{r3, r4, r5, pc}
 8006b78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006b7a:	b112      	cbz	r2, 8006b82 <_raise_r+0x1e>
 8006b7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b80:	b94b      	cbnz	r3, 8006b96 <_raise_r+0x32>
 8006b82:	4620      	mov	r0, r4
 8006b84:	f000 f830 	bl	8006be8 <_getpid_r>
 8006b88:	462a      	mov	r2, r5
 8006b8a:	4601      	mov	r1, r0
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b92:	f000 b817 	b.w	8006bc4 <_kill_r>
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d00a      	beq.n	8006bb0 <_raise_r+0x4c>
 8006b9a:	1c59      	adds	r1, r3, #1
 8006b9c:	d103      	bne.n	8006ba6 <_raise_r+0x42>
 8006b9e:	2316      	movs	r3, #22
 8006ba0:	6003      	str	r3, [r0, #0]
 8006ba2:	2001      	movs	r0, #1
 8006ba4:	e7e7      	b.n	8006b76 <_raise_r+0x12>
 8006ba6:	2400      	movs	r4, #0
 8006ba8:	4628      	mov	r0, r5
 8006baa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006bae:	4798      	blx	r3
 8006bb0:	2000      	movs	r0, #0
 8006bb2:	e7e0      	b.n	8006b76 <_raise_r+0x12>

08006bb4 <raise>:
 8006bb4:	4b02      	ldr	r3, [pc, #8]	; (8006bc0 <raise+0xc>)
 8006bb6:	4601      	mov	r1, r0
 8006bb8:	6818      	ldr	r0, [r3, #0]
 8006bba:	f7ff bfd3 	b.w	8006b64 <_raise_r>
 8006bbe:	bf00      	nop
 8006bc0:	2000001c 	.word	0x2000001c

08006bc4 <_kill_r>:
 8006bc4:	b538      	push	{r3, r4, r5, lr}
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	4d06      	ldr	r5, [pc, #24]	; (8006be4 <_kill_r+0x20>)
 8006bca:	4604      	mov	r4, r0
 8006bcc:	4608      	mov	r0, r1
 8006bce:	4611      	mov	r1, r2
 8006bd0:	602b      	str	r3, [r5, #0]
 8006bd2:	f7fb fb3b 	bl	800224c <_kill>
 8006bd6:	1c43      	adds	r3, r0, #1
 8006bd8:	d102      	bne.n	8006be0 <_kill_r+0x1c>
 8006bda:	682b      	ldr	r3, [r5, #0]
 8006bdc:	b103      	cbz	r3, 8006be0 <_kill_r+0x1c>
 8006bde:	6023      	str	r3, [r4, #0]
 8006be0:	bd38      	pop	{r3, r4, r5, pc}
 8006be2:	bf00      	nop
 8006be4:	200003e0 	.word	0x200003e0

08006be8 <_getpid_r>:
 8006be8:	f7fb bb2e 	b.w	8002248 <_getpid>

08006bec <__sread>:
 8006bec:	b510      	push	{r4, lr}
 8006bee:	460c      	mov	r4, r1
 8006bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bf4:	f000 f894 	bl	8006d20 <_read_r>
 8006bf8:	2800      	cmp	r0, #0
 8006bfa:	bfab      	itete	ge
 8006bfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006bfe:	89a3      	ldrhlt	r3, [r4, #12]
 8006c00:	181b      	addge	r3, r3, r0
 8006c02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c06:	bfac      	ite	ge
 8006c08:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c0a:	81a3      	strhlt	r3, [r4, #12]
 8006c0c:	bd10      	pop	{r4, pc}

08006c0e <__swrite>:
 8006c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c12:	461f      	mov	r7, r3
 8006c14:	898b      	ldrh	r3, [r1, #12]
 8006c16:	4605      	mov	r5, r0
 8006c18:	05db      	lsls	r3, r3, #23
 8006c1a:	460c      	mov	r4, r1
 8006c1c:	4616      	mov	r6, r2
 8006c1e:	d505      	bpl.n	8006c2c <__swrite+0x1e>
 8006c20:	2302      	movs	r3, #2
 8006c22:	2200      	movs	r2, #0
 8006c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c28:	f000 f868 	bl	8006cfc <_lseek_r>
 8006c2c:	89a3      	ldrh	r3, [r4, #12]
 8006c2e:	4632      	mov	r2, r6
 8006c30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c34:	81a3      	strh	r3, [r4, #12]
 8006c36:	4628      	mov	r0, r5
 8006c38:	463b      	mov	r3, r7
 8006c3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c42:	f000 b817 	b.w	8006c74 <_write_r>

08006c46 <__sseek>:
 8006c46:	b510      	push	{r4, lr}
 8006c48:	460c      	mov	r4, r1
 8006c4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c4e:	f000 f855 	bl	8006cfc <_lseek_r>
 8006c52:	1c43      	adds	r3, r0, #1
 8006c54:	89a3      	ldrh	r3, [r4, #12]
 8006c56:	bf15      	itete	ne
 8006c58:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c62:	81a3      	strheq	r3, [r4, #12]
 8006c64:	bf18      	it	ne
 8006c66:	81a3      	strhne	r3, [r4, #12]
 8006c68:	bd10      	pop	{r4, pc}

08006c6a <__sclose>:
 8006c6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c6e:	f000 b813 	b.w	8006c98 <_close_r>
	...

08006c74 <_write_r>:
 8006c74:	b538      	push	{r3, r4, r5, lr}
 8006c76:	4604      	mov	r4, r0
 8006c78:	4608      	mov	r0, r1
 8006c7a:	4611      	mov	r1, r2
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	4d05      	ldr	r5, [pc, #20]	; (8006c94 <_write_r+0x20>)
 8006c80:	602a      	str	r2, [r5, #0]
 8006c82:	461a      	mov	r2, r3
 8006c84:	f7fb fb00 	bl	8002288 <_write>
 8006c88:	1c43      	adds	r3, r0, #1
 8006c8a:	d102      	bne.n	8006c92 <_write_r+0x1e>
 8006c8c:	682b      	ldr	r3, [r5, #0]
 8006c8e:	b103      	cbz	r3, 8006c92 <_write_r+0x1e>
 8006c90:	6023      	str	r3, [r4, #0]
 8006c92:	bd38      	pop	{r3, r4, r5, pc}
 8006c94:	200003e0 	.word	0x200003e0

08006c98 <_close_r>:
 8006c98:	b538      	push	{r3, r4, r5, lr}
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	4d05      	ldr	r5, [pc, #20]	; (8006cb4 <_close_r+0x1c>)
 8006c9e:	4604      	mov	r4, r0
 8006ca0:	4608      	mov	r0, r1
 8006ca2:	602b      	str	r3, [r5, #0]
 8006ca4:	f7fb fafe 	bl	80022a4 <_close>
 8006ca8:	1c43      	adds	r3, r0, #1
 8006caa:	d102      	bne.n	8006cb2 <_close_r+0x1a>
 8006cac:	682b      	ldr	r3, [r5, #0]
 8006cae:	b103      	cbz	r3, 8006cb2 <_close_r+0x1a>
 8006cb0:	6023      	str	r3, [r4, #0]
 8006cb2:	bd38      	pop	{r3, r4, r5, pc}
 8006cb4:	200003e0 	.word	0x200003e0

08006cb8 <_fstat_r>:
 8006cb8:	b538      	push	{r3, r4, r5, lr}
 8006cba:	2300      	movs	r3, #0
 8006cbc:	4d06      	ldr	r5, [pc, #24]	; (8006cd8 <_fstat_r+0x20>)
 8006cbe:	4604      	mov	r4, r0
 8006cc0:	4608      	mov	r0, r1
 8006cc2:	4611      	mov	r1, r2
 8006cc4:	602b      	str	r3, [r5, #0]
 8006cc6:	f7fb faf1 	bl	80022ac <_fstat>
 8006cca:	1c43      	adds	r3, r0, #1
 8006ccc:	d102      	bne.n	8006cd4 <_fstat_r+0x1c>
 8006cce:	682b      	ldr	r3, [r5, #0]
 8006cd0:	b103      	cbz	r3, 8006cd4 <_fstat_r+0x1c>
 8006cd2:	6023      	str	r3, [r4, #0]
 8006cd4:	bd38      	pop	{r3, r4, r5, pc}
 8006cd6:	bf00      	nop
 8006cd8:	200003e0 	.word	0x200003e0

08006cdc <_isatty_r>:
 8006cdc:	b538      	push	{r3, r4, r5, lr}
 8006cde:	2300      	movs	r3, #0
 8006ce0:	4d05      	ldr	r5, [pc, #20]	; (8006cf8 <_isatty_r+0x1c>)
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	4608      	mov	r0, r1
 8006ce6:	602b      	str	r3, [r5, #0]
 8006ce8:	f7fb fae6 	bl	80022b8 <_isatty>
 8006cec:	1c43      	adds	r3, r0, #1
 8006cee:	d102      	bne.n	8006cf6 <_isatty_r+0x1a>
 8006cf0:	682b      	ldr	r3, [r5, #0]
 8006cf2:	b103      	cbz	r3, 8006cf6 <_isatty_r+0x1a>
 8006cf4:	6023      	str	r3, [r4, #0]
 8006cf6:	bd38      	pop	{r3, r4, r5, pc}
 8006cf8:	200003e0 	.word	0x200003e0

08006cfc <_lseek_r>:
 8006cfc:	b538      	push	{r3, r4, r5, lr}
 8006cfe:	4604      	mov	r4, r0
 8006d00:	4608      	mov	r0, r1
 8006d02:	4611      	mov	r1, r2
 8006d04:	2200      	movs	r2, #0
 8006d06:	4d05      	ldr	r5, [pc, #20]	; (8006d1c <_lseek_r+0x20>)
 8006d08:	602a      	str	r2, [r5, #0]
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	f7fb fad6 	bl	80022bc <_lseek>
 8006d10:	1c43      	adds	r3, r0, #1
 8006d12:	d102      	bne.n	8006d1a <_lseek_r+0x1e>
 8006d14:	682b      	ldr	r3, [r5, #0]
 8006d16:	b103      	cbz	r3, 8006d1a <_lseek_r+0x1e>
 8006d18:	6023      	str	r3, [r4, #0]
 8006d1a:	bd38      	pop	{r3, r4, r5, pc}
 8006d1c:	200003e0 	.word	0x200003e0

08006d20 <_read_r>:
 8006d20:	b538      	push	{r3, r4, r5, lr}
 8006d22:	4604      	mov	r4, r0
 8006d24:	4608      	mov	r0, r1
 8006d26:	4611      	mov	r1, r2
 8006d28:	2200      	movs	r2, #0
 8006d2a:	4d05      	ldr	r5, [pc, #20]	; (8006d40 <_read_r+0x20>)
 8006d2c:	602a      	str	r2, [r5, #0]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	f7fb fa9c 	bl	800226c <_read>
 8006d34:	1c43      	adds	r3, r0, #1
 8006d36:	d102      	bne.n	8006d3e <_read_r+0x1e>
 8006d38:	682b      	ldr	r3, [r5, #0]
 8006d3a:	b103      	cbz	r3, 8006d3e <_read_r+0x1e>
 8006d3c:	6023      	str	r3, [r4, #0]
 8006d3e:	bd38      	pop	{r3, r4, r5, pc}
 8006d40:	200003e0 	.word	0x200003e0

08006d44 <_init>:
 8006d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d46:	bf00      	nop
 8006d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d4a:	bc08      	pop	{r3}
 8006d4c:	469e      	mov	lr, r3
 8006d4e:	4770      	bx	lr

08006d50 <_fini>:
 8006d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d52:	bf00      	nop
 8006d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d56:	bc08      	pop	{r3}
 8006d58:	469e      	mov	lr, r3
 8006d5a:	4770      	bx	lr
